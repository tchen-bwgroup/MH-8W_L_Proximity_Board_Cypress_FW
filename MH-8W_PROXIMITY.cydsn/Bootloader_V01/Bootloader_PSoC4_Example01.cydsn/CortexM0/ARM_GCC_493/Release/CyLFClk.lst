ARM GAS  C:\Users\TIMCHE~1\AppData\Local\Temp\ccPS59ly.s 			page 1


   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 4
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"CyLFClk.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.CySysClkIloStart,"ax",%progbits
  18              		.align	1
  19              		.global	CySysClkIloStart
  20              		.code	16
  21              		.thumb_func
  22              		.type	CySysClkIloStart, %function
  23              	CySysClkIloStart:
  24              	.LFB0:
  25              		.file 1 "Generated_Source\\PSoC4\\CyLFClk.c"
   1:Generated_Source\PSoC4/CyLFClk.c **** /***************************************************************************//**
   2:Generated_Source\PSoC4/CyLFClk.c **** * \file .c
   3:Generated_Source\PSoC4/CyLFClk.c **** * \version 1.10
   4:Generated_Source\PSoC4/CyLFClk.c **** *
   5:Generated_Source\PSoC4/CyLFClk.c **** * \brief
   6:Generated_Source\PSoC4/CyLFClk.c **** *  This file provides the source code for configuring watchdog timers WDTs, 
   7:Generated_Source\PSoC4/CyLFClk.c **** *  low frequency clocks (LFCLK) and the Real-time Clock (RTC) component in
   8:Generated_Source\PSoC4/CyLFClk.c **** *  PSoC Creator for the PSoC 4 families.
   9:Generated_Source\PSoC4/CyLFClk.c **** *
  10:Generated_Source\PSoC4/CyLFClk.c **** ********************************************************************************
  11:Generated_Source\PSoC4/CyLFClk.c **** * \copyright
  12:Generated_Source\PSoC4/CyLFClk.c **** * Copyright 2008-2016, Cypress Semiconductor Corporation.  All rights reserved.
  13:Generated_Source\PSoC4/CyLFClk.c **** * You may use this file only in accordance with the license, terms, conditions,
  14:Generated_Source\PSoC4/CyLFClk.c **** * disclaimers, and limitations in the end user license agreement accompanying
  15:Generated_Source\PSoC4/CyLFClk.c **** * the software package with which this file was provided.
  16:Generated_Source\PSoC4/CyLFClk.c **** *******************************************************************************/
  17:Generated_Source\PSoC4/CyLFClk.c **** 
  18:Generated_Source\PSoC4/CyLFClk.c **** 
  19:Generated_Source\PSoC4/CyLFClk.c **** #include "CyLFClk.h"
  20:Generated_Source\PSoC4/CyLFClk.c **** #include "CyLib.h"
  21:Generated_Source\PSoC4/CyLFClk.c **** 
  22:Generated_Source\PSoC4/CyLFClk.c **** #if (CY_IP_WCO && CY_IP_SRSSV2)
  23:Generated_Source\PSoC4/CyLFClk.c ****     static uint32 CySysClkGetLfclkSource(void);
  24:Generated_Source\PSoC4/CyLFClk.c **** #endif /* (CY_IP_WCO && CY_IP_SRSSV2) */
  25:Generated_Source\PSoC4/CyLFClk.c **** 
  26:Generated_Source\PSoC4/CyLFClk.c **** 
  27:Generated_Source\PSoC4/CyLFClk.c **** #if(CY_IP_SRSSV2 && (!(CY_PSOC4_4100 || CY_PSOC4_4200)))
  28:Generated_Source\PSoC4/CyLFClk.c ****     /* Default Ilo Trim Register value for ILO trimming*/
  29:Generated_Source\PSoC4/CyLFClk.c ****     static volatile uint16 defaultIloTrimRegValue = CY_SYS_CLK_ILO_TRIM_DEFAULT_VALUE;
  30:Generated_Source\PSoC4/CyLFClk.c **** #endif /* (CY_IP_SRSSV2 && (!(CY_PSOC4_4100 || CY_PSOC4_4200))) */
  31:Generated_Source\PSoC4/CyLFClk.c **** 
  32:Generated_Source\PSoC4/CyLFClk.c **** #if(CY_IP_SRSSV2)
ARM GAS  C:\Users\TIMCHE~1\AppData\Local\Temp\ccPS59ly.s 			page 2


  33:Generated_Source\PSoC4/CyLFClk.c ****     /* CySysClkLfclkPosedgeCatch() / CySysClkLfclkPosedgeRestore() */
  34:Generated_Source\PSoC4/CyLFClk.c ****     static uint32 lfclkPosedgeWdtCounter0Enabled = 0u;
  35:Generated_Source\PSoC4/CyLFClk.c ****     static uint32 lfclkPosedgeWdtCounter0Mode    = CY_SYS_WDT_MODE_NONE;
  36:Generated_Source\PSoC4/CyLFClk.c **** 
  37:Generated_Source\PSoC4/CyLFClk.c ****     static volatile uint32 disableServicedIsr = 0uL;
  38:Generated_Source\PSoC4/CyLFClk.c ****     static volatile uint32 wdtIsrMask = CY_SYS_WDT_COUNTER0_INT |\
  39:Generated_Source\PSoC4/CyLFClk.c ****                                         CY_SYS_WDT_COUNTER1_INT |\
  40:Generated_Source\PSoC4/CyLFClk.c ****                                         CY_SYS_WDT_COUNTER2_INT;
  41:Generated_Source\PSoC4/CyLFClk.c **** 
  42:Generated_Source\PSoC4/CyLFClk.c ****     static const uint32 counterIntMaskTbl[CY_WDT_NUM_OF_WDT] = {CY_SYS_WDT_COUNTER0_INT,
  43:Generated_Source\PSoC4/CyLFClk.c ****                                                                 CY_SYS_WDT_COUNTER1_INT,
  44:Generated_Source\PSoC4/CyLFClk.c ****                                                                 CY_SYS_WDT_COUNTER2_INT};
  45:Generated_Source\PSoC4/CyLFClk.c **** 
  46:Generated_Source\PSoC4/CyLFClk.c ****     static void CySysClkLfclkPosedgeCatch(void);
  47:Generated_Source\PSoC4/CyLFClk.c ****     static void CySysClkLfclkPosedgeRestore(void);
  48:Generated_Source\PSoC4/CyLFClk.c **** 
  49:Generated_Source\PSoC4/CyLFClk.c ****     static uint32 CySysWdtLocked(void);
  50:Generated_Source\PSoC4/CyLFClk.c ****     static uint32 CySysClkIloEnabled(void);
  51:Generated_Source\PSoC4/CyLFClk.c **** #endif /* (CY_IP_SRSSV2) */
  52:Generated_Source\PSoC4/CyLFClk.c **** 
  53:Generated_Source\PSoC4/CyLFClk.c **** #if (CY_IP_SRSSLT && CY_IP_WCO && CY_IP_WCO_WDT_EN)
  54:Generated_Source\PSoC4/CyLFClk.c ****     static uint32 CySysClkGetTimerSource(void);
  55:Generated_Source\PSoC4/CyLFClk.c ****     static volatile uint32 disableTimerServicedIsr = 0uL;
  56:Generated_Source\PSoC4/CyLFClk.c ****     static volatile uint32 timerIsrMask = CY_SYS_TIMER0_INT |\
  57:Generated_Source\PSoC4/CyLFClk.c ****                                           CY_SYS_TIMER1_INT |\
  58:Generated_Source\PSoC4/CyLFClk.c ****                                           CY_SYS_TIMER2_INT;
  59:Generated_Source\PSoC4/CyLFClk.c **** 
  60:Generated_Source\PSoC4/CyLFClk.c ****     static const uint32 counterTimerIntMaskTbl[CY_SYS_NUM_OF_TIMERS] = {CY_SYS_TIMER0_INT,
  61:Generated_Source\PSoC4/CyLFClk.c ****                                                                         CY_SYS_TIMER1_INT,
  62:Generated_Source\PSoC4/CyLFClk.c ****                                                                         CY_SYS_TIMER2_INT};
  63:Generated_Source\PSoC4/CyLFClk.c **** 
  64:Generated_Source\PSoC4/CyLFClk.c ****     static cyTimerCallback cySysTimerCallback[CY_SYS_NUM_OF_TIMERS] = {(void *)0, (void *)0, (void 
  65:Generated_Source\PSoC4/CyLFClk.c **** #endif /* (CY_IP_SRSSLT && CY_IP_WCO && CY_IP_WCO_DWT_EN) */
  66:Generated_Source\PSoC4/CyLFClk.c **** 
  67:Generated_Source\PSoC4/CyLFClk.c **** #if(CY_IP_SRSSV2)
  68:Generated_Source\PSoC4/CyLFClk.c ****     static cyWdtCallback cySysWdtCallback[CY_WDT_NUM_OF_WDT] = {(void *)0, (void *)0, (void *)0};
  69:Generated_Source\PSoC4/CyLFClk.c **** #else
  70:Generated_Source\PSoC4/CyLFClk.c ****     static cyWdtCallback cySysWdtCallback = (void *)0;
  71:Generated_Source\PSoC4/CyLFClk.c **** #endif /* (CY_IP_SRSSV2) */
  72:Generated_Source\PSoC4/CyLFClk.c **** 
  73:Generated_Source\PSoC4/CyLFClk.c **** 
  74:Generated_Source\PSoC4/CyLFClk.c **** /*******************************************************************************
  75:Generated_Source\PSoC4/CyLFClk.c **** * Function Name: CySysClkIloStart
  76:Generated_Source\PSoC4/CyLFClk.c **** ****************************************************************************//**
  77:Generated_Source\PSoC4/CyLFClk.c **** * \brief
  78:Generated_Source\PSoC4/CyLFClk.c **** *  Enables ILO.
  79:Generated_Source\PSoC4/CyLFClk.c **** *
  80:Generated_Source\PSoC4/CyLFClk.c **** *  Refer to the device datasheet for the ILO startup time.
  81:Generated_Source\PSoC4/CyLFClk.c **** *
  82:Generated_Source\PSoC4/CyLFClk.c **** *******************************************************************************/
  83:Generated_Source\PSoC4/CyLFClk.c **** void CySysClkIloStart(void)
  84:Generated_Source\PSoC4/CyLFClk.c **** {
  26              		.loc 1 84 0
  27              		.cfi_startproc
  85:Generated_Source\PSoC4/CyLFClk.c ****     CY_SYS_CLK_ILO_CONFIG_REG |= CY_SYS_CLK_ILO_CONFIG_ENABLE;
  28              		.loc 1 85 0
  29 0000 8021     		mov	r1, #128
ARM GAS  C:\Users\TIMCHE~1\AppData\Local\Temp\ccPS59ly.s 			page 3


  30 0002 034A     		ldr	r2, .L2
  31 0004 0906     		lsl	r1, r1, #24
  32 0006 1368     		ldr	r3, [r2]
  86:Generated_Source\PSoC4/CyLFClk.c **** }
  33              		.loc 1 86 0
  34              		@ sp needed
  85:Generated_Source\PSoC4/CyLFClk.c ****     CY_SYS_CLK_ILO_CONFIG_REG |= CY_SYS_CLK_ILO_CONFIG_ENABLE;
  35              		.loc 1 85 0
  36 0008 0B43     		orr	r3, r1
  37 000a 1360     		str	r3, [r2]
  38              		.loc 1 86 0
  39 000c 7047     		bx	lr
  40              	.L3:
  41 000e C046     		.align	2
  42              	.L2:
  43 0010 2C000340 		.word	1073938476
  44              		.cfi_endproc
  45              	.LFE0:
  46              		.size	CySysClkIloStart, .-CySysClkIloStart
  47              		.section	.text.CySysClkIloStop,"ax",%progbits
  48              		.align	1
  49              		.global	CySysClkIloStop
  50              		.code	16
  51              		.thumb_func
  52              		.type	CySysClkIloStop, %function
  53              	CySysClkIloStop:
  54              	.LFB1:
  87:Generated_Source\PSoC4/CyLFClk.c **** 
  88:Generated_Source\PSoC4/CyLFClk.c **** 
  89:Generated_Source\PSoC4/CyLFClk.c **** /*******************************************************************************
  90:Generated_Source\PSoC4/CyLFClk.c **** * Function Name: CySysClkIloStop
  91:Generated_Source\PSoC4/CyLFClk.c **** ****************************************************************************//**
  92:Generated_Source\PSoC4/CyLFClk.c **** * \brief
  93:Generated_Source\PSoC4/CyLFClk.c **** *  Disables the ILO.
  94:Generated_Source\PSoC4/CyLFClk.c **** *
  95:Generated_Source\PSoC4/CyLFClk.c **** *  This function has no effect if WDT is locked (CySysWdtLock() is
  96:Generated_Source\PSoC4/CyLFClk.c **** *  called). Call CySysWdtUnlock() to unlock WDT and stop ILO.
  97:Generated_Source\PSoC4/CyLFClk.c **** *
  98:Generated_Source\PSoC4/CyLFClk.c **** *  PSoC 4100 / PSoC 4200: Note that ILO is required for WDT's operation.
  99:Generated_Source\PSoC4/CyLFClk.c **** *
 100:Generated_Source\PSoC4/CyLFClk.c **** *  PSoC 4100 BLE / PSoC 4200 BLE / PSoC 4200L / PSoC 4100M / 
 101:Generated_Source\PSoC4/CyLFClk.c **** *  PSoC 4200M:
 102:Generated_Source\PSoC4/CyLFClk.c **** *  Stopping ILO affects the peripheral clocked by LFCLK, if
 103:Generated_Source\PSoC4/CyLFClk.c **** *  LFCLK is configured to be sourced by ILO.
 104:Generated_Source\PSoC4/CyLFClk.c **** *
 105:Generated_Source\PSoC4/CyLFClk.c **** *  If the ILO is disabled, all blocks run by ILO will stop functioning.
 106:Generated_Source\PSoC4/CyLFClk.c **** *
 107:Generated_Source\PSoC4/CyLFClk.c **** *******************************************************************************/
 108:Generated_Source\PSoC4/CyLFClk.c **** void CySysClkIloStop(void)
 109:Generated_Source\PSoC4/CyLFClk.c **** {
  55              		.loc 1 109 0
  56              		.cfi_startproc
 110:Generated_Source\PSoC4/CyLFClk.c ****     #if(CY_IP_SRSSV2)
 111:Generated_Source\PSoC4/CyLFClk.c ****         uint8  interruptState;
 112:Generated_Source\PSoC4/CyLFClk.c **** 
 113:Generated_Source\PSoC4/CyLFClk.c ****         /* Do nothing if WDT is locked or ILO is disabled */
 114:Generated_Source\PSoC4/CyLFClk.c ****         if (0u == CySysWdtLocked())
ARM GAS  C:\Users\TIMCHE~1\AppData\Local\Temp\ccPS59ly.s 			page 4


 115:Generated_Source\PSoC4/CyLFClk.c ****         {
 116:Generated_Source\PSoC4/CyLFClk.c ****             if (0u != CySysClkIloEnabled())
 117:Generated_Source\PSoC4/CyLFClk.c ****             {
 118:Generated_Source\PSoC4/CyLFClk.c **** 
 119:Generated_Source\PSoC4/CyLFClk.c ****             #if (CY_IP_WCO)
 120:Generated_Source\PSoC4/CyLFClk.c ****                 if (CY_SYS_CLK_LFCLK_SRC_ILO == CySysClkGetLfclkSource())
 121:Generated_Source\PSoC4/CyLFClk.c ****                 {
 122:Generated_Source\PSoC4/CyLFClk.c ****             #endif /* (CY_IP_WCO) */
 123:Generated_Source\PSoC4/CyLFClk.c **** 
 124:Generated_Source\PSoC4/CyLFClk.c ****                 interruptState = CyEnterCriticalSection();
 125:Generated_Source\PSoC4/CyLFClk.c ****                 CySysClkLfclkPosedgeCatch();
 126:Generated_Source\PSoC4/CyLFClk.c ****                 CY_SYS_CLK_ILO_CONFIG_REG &= (uint32) ( ~(uint32)CY_SYS_CLK_ILO_CONFIG_ENABLE);
 127:Generated_Source\PSoC4/CyLFClk.c ****                 CySysClkLfclkPosedgeRestore();
 128:Generated_Source\PSoC4/CyLFClk.c ****                 CyExitCriticalSection(interruptState);
 129:Generated_Source\PSoC4/CyLFClk.c **** 
 130:Generated_Source\PSoC4/CyLFClk.c ****             #if (CY_IP_WCO)
 131:Generated_Source\PSoC4/CyLFClk.c ****                 }
 132:Generated_Source\PSoC4/CyLFClk.c ****                 else /* Safe to disable - shortened pulse does not impact peripheral */
 133:Generated_Source\PSoC4/CyLFClk.c ****                 {
 134:Generated_Source\PSoC4/CyLFClk.c ****                     CY_SYS_CLK_ILO_CONFIG_REG &= (uint32) ( ~(uint32)CY_SYS_CLK_ILO_CONFIG_ENABLE);
 135:Generated_Source\PSoC4/CyLFClk.c ****                 }
 136:Generated_Source\PSoC4/CyLFClk.c ****             #endif /* (CY_IP_WCO) */
 137:Generated_Source\PSoC4/CyLFClk.c **** 
 138:Generated_Source\PSoC4/CyLFClk.c ****             }
 139:Generated_Source\PSoC4/CyLFClk.c ****         }
 140:Generated_Source\PSoC4/CyLFClk.c ****     #else
 141:Generated_Source\PSoC4/CyLFClk.c ****         CY_SYS_CLK_ILO_CONFIG_REG &= ( uint32 ) ( ~( uint32 )CY_SYS_CLK_ILO_CONFIG_ENABLE);
  57              		.loc 1 141 0
  58 0000 024A     		ldr	r2, .L5
 142:Generated_Source\PSoC4/CyLFClk.c ****     #endif /* (CY_IP_SRSSV2) */
 143:Generated_Source\PSoC4/CyLFClk.c **** }
  59              		.loc 1 143 0
  60              		@ sp needed
 141:Generated_Source\PSoC4/CyLFClk.c ****     #endif /* (CY_IP_SRSSV2) */
  61              		.loc 1 141 0
  62 0002 1368     		ldr	r3, [r2]
  63 0004 5B00     		lsl	r3, r3, #1
  64 0006 5B08     		lsr	r3, r3, #1
  65 0008 1360     		str	r3, [r2]
  66              		.loc 1 143 0
  67 000a 7047     		bx	lr
  68              	.L6:
  69              		.align	2
  70              	.L5:
  71 000c 2C000340 		.word	1073938476
  72              		.cfi_endproc
  73              	.LFE1:
  74              		.size	CySysClkIloStop, .-CySysClkIloStop
  75              		.section	.text.CySysClkIloStartMeasurement,"ax",%progbits
  76              		.align	1
  77              		.global	CySysClkIloStartMeasurement
  78              		.code	16
  79              		.thumb_func
  80              		.type	CySysClkIloStartMeasurement, %function
  81              	CySysClkIloStartMeasurement:
  82              	.LFB2:
 144:Generated_Source\PSoC4/CyLFClk.c **** 
ARM GAS  C:\Users\TIMCHE~1\AppData\Local\Temp\ccPS59ly.s 			page 5


 145:Generated_Source\PSoC4/CyLFClk.c **** 
 146:Generated_Source\PSoC4/CyLFClk.c **** /******************************************************************************
 147:Generated_Source\PSoC4/CyLFClk.c **** * Function Name: CySysClkIloStartMeasurement
 148:Generated_Source\PSoC4/CyLFClk.c **** ***************************************************************************//**
 149:Generated_Source\PSoC4/CyLFClk.c **** * \brief
 150:Generated_Source\PSoC4/CyLFClk.c **** * Starts the ILO accuracy measurement.
 151:Generated_Source\PSoC4/CyLFClk.c **** *
 152:Generated_Source\PSoC4/CyLFClk.c **** * This function is non-blocking and needs to be called before using the 
 153:Generated_Source\PSoC4/CyLFClk.c **** * CySysClkIloTrim() and CySysClkIloCompensate() API.
 154:Generated_Source\PSoC4/CyLFClk.c **** *
 155:Generated_Source\PSoC4/CyLFClk.c **** * This API configures measurement counters to be sourced by SysClk (Counter 1)
 156:Generated_Source\PSoC4/CyLFClk.c **** * and ILO (Counter 2). 
 157:Generated_Source\PSoC4/CyLFClk.c **** *
 158:Generated_Source\PSoC4/CyLFClk.c **** * \note SysClk should be sourced by IMO. Otherwise CySysClkIloTrim() and 
 159:Generated_Source\PSoC4/CyLFClk.c **** * CySysClkIloCompensate() API can give incorrect results.
 160:Generated_Source\PSoC4/CyLFClk.c **** *
 161:Generated_Source\PSoC4/CyLFClk.c **** * In addition, this API stores the factory ILO trim settings on the first call 
 162:Generated_Source\PSoC4/CyLFClk.c **** * after reset. This stored factory setting is used by the 
 163:Generated_Source\PSoC4/CyLFClk.c **** * CySysClkIloRestoreFactoryTrim() API to restore the ILO factory trim. 
 164:Generated_Source\PSoC4/CyLFClk.c **** * Hence, it is important to call this API before restoring the ILO 
 165:Generated_Source\PSoC4/CyLFClk.c **** * factory trim settings.
 166:Generated_Source\PSoC4/CyLFClk.c **** *
 167:Generated_Source\PSoC4/CyLFClk.c **** ******************************************************************************/
 168:Generated_Source\PSoC4/CyLFClk.c **** void CySysClkIloStartMeasurement(void)
 169:Generated_Source\PSoC4/CyLFClk.c **** {
  83              		.loc 1 169 0
  84              		.cfi_startproc
 170:Generated_Source\PSoC4/CyLFClk.c **** #if(CY_IP_SRSSV2 && (!(CY_PSOC4_4100 || CY_PSOC4_4200)))
 171:Generated_Source\PSoC4/CyLFClk.c ****     static uint8 iloTrimTrig = 0u;
 172:Generated_Source\PSoC4/CyLFClk.c **** 
 173:Generated_Source\PSoC4/CyLFClk.c ****     /* Write default ILO trim value while ILO starting ( Cypress ID 225244 )*/
 174:Generated_Source\PSoC4/CyLFClk.c ****     if (0u == iloTrimTrig)
 175:Generated_Source\PSoC4/CyLFClk.c ****     {
 176:Generated_Source\PSoC4/CyLFClk.c ****         defaultIloTrimRegValue = ((uint8)(CY_SYS_CLK_ILO_TRIM_REG & CY_SYS_CLK_ILO_TRIM_MASK));
 177:Generated_Source\PSoC4/CyLFClk.c ****         iloTrimTrig = 1u;
 178:Generated_Source\PSoC4/CyLFClk.c ****     }
 179:Generated_Source\PSoC4/CyLFClk.c **** #endif /* (CY_IP_SRSSV2 && (!(CY_PSOC4_4100 || CY_PSOC4_4200))) */
 180:Generated_Source\PSoC4/CyLFClk.c **** 
 181:Generated_Source\PSoC4/CyLFClk.c ****     /* Configure measurement counters to source by SysClk (Counter 1) and ILO (Counter 2)*/
 182:Generated_Source\PSoC4/CyLFClk.c ****     CY_SYS_CLK_DFT_REG = (CY_SYS_CLK_DFT_REG & (uint32) ~CY_SYS_CLK_DFT_SELECT_DEFAULT_MASK) |
  85              		.loc 1 182 0
  86 0000 074A     		ldr	r2, .L8
  87 0002 084B     		ldr	r3, .L8+4
  88 0004 1168     		ldr	r1, [r2]
 183:Generated_Source\PSoC4/CyLFClk.c ****                             CY_SYS_CLK_SEL_ILO_DFT_SOURCE; 
 184:Generated_Source\PSoC4/CyLFClk.c **** 
 185:Generated_Source\PSoC4/CyLFClk.c ****     CY_SYS_TST_DDFT_CTRL_REG = (CY_SYS_TST_DDFT_CTRL_REG & (uint32) ~ CY_SYS_TST_DDFT_CTRL_REG_DEFA
 186:Generated_Source\PSoC4/CyLFClk.c ****                             CY_SYS_TST_DDFT_CTRL_REG_SEL2_CLK1;
 187:Generated_Source\PSoC4/CyLFClk.c **** }
  89              		.loc 1 187 0
  90              		@ sp needed
 182:Generated_Source\PSoC4/CyLFClk.c ****                             CY_SYS_CLK_SEL_ILO_DFT_SOURCE; 
  91              		.loc 1 182 0
  92 0006 0B40     		and	r3, r1
  93 0008 8021     		mov	r1, #128
  94 000a 4900     		lsl	r1, r1, #1
  95 000c 0B43     		orr	r3, r1
ARM GAS  C:\Users\TIMCHE~1\AppData\Local\Temp\ccPS59ly.s 			page 6


  96 000e 1360     		str	r3, [r2]
 185:Generated_Source\PSoC4/CyLFClk.c ****                             CY_SYS_TST_DDFT_CTRL_REG_SEL2_CLK1;
  97              		.loc 1 185 0
  98 0010 054A     		ldr	r2, .L8+8
  99 0012 064B     		ldr	r3, .L8+12
 100 0014 1168     		ldr	r1, [r2]
 101 0016 0B40     		and	r3, r1
 102 0018 0549     		ldr	r1, .L8+16
 103 001a 0B43     		orr	r3, r1
 104 001c 1360     		str	r3, [r2]
 105              		.loc 1 187 0
 106 001e 7047     		bx	lr
 107              	.L9:
 108              		.align	2
 109              	.L8:
 110 0020 34000340 		.word	1073938484
 111 0024 FFF0FFFF 		.word	-3841
 112 0028 18000340 		.word	1073938456
 113 002c F0F0FFFF 		.word	-3856
 114 0030 08090000 		.word	2312
 115              		.cfi_endproc
 116              	.LFE2:
 117              		.size	CySysClkIloStartMeasurement, .-CySysClkIloStartMeasurement
 118              		.section	.text.CySysClkIloStopMeasurement,"ax",%progbits
 119              		.align	1
 120              		.global	CySysClkIloStopMeasurement
 121              		.code	16
 122              		.thumb_func
 123              		.type	CySysClkIloStopMeasurement, %function
 124              	CySysClkIloStopMeasurement:
 125              	.LFB3:
 188:Generated_Source\PSoC4/CyLFClk.c **** 
 189:Generated_Source\PSoC4/CyLFClk.c **** 
 190:Generated_Source\PSoC4/CyLFClk.c **** /******************************************************************************
 191:Generated_Source\PSoC4/CyLFClk.c **** * Function Name: CySysClkIloStopMeasurement
 192:Generated_Source\PSoC4/CyLFClk.c **** ***************************************************************************//**
 193:Generated_Source\PSoC4/CyLFClk.c **** * \brief
 194:Generated_Source\PSoC4/CyLFClk.c **** * Stops the ILO accuracy measurement.
 195:Generated_Source\PSoC4/CyLFClk.c **** *
 196:Generated_Source\PSoC4/CyLFClk.c **** * Calling this function immediately stops the the ILO frequency measurement.
 197:Generated_Source\PSoC4/CyLFClk.c **** * This function should be called before placing the device to deepsleep, if 
 198:Generated_Source\PSoC4/CyLFClk.c **** * CySysClkIloStartMeasurement() API was called before. 
 199:Generated_Source\PSoC4/CyLFClk.c **** *
 200:Generated_Source\PSoC4/CyLFClk.c **** ******************************************************************************/
 201:Generated_Source\PSoC4/CyLFClk.c **** void CySysClkIloStopMeasurement(void)
 202:Generated_Source\PSoC4/CyLFClk.c **** {
 126              		.loc 1 202 0
 127              		.cfi_startproc
 203:Generated_Source\PSoC4/CyLFClk.c ****     /* Set default configurations in 11...8 DFT register bits to zero */
 204:Generated_Source\PSoC4/CyLFClk.c ****     CY_SYS_CLK_DFT_REG &= ~CY_SYS_CLK_DFT_SELECT_DEFAULT_MASK;
 128              		.loc 1 204 0
 129 0000 054A     		ldr	r2, .L11
 130 0002 064B     		ldr	r3, .L11+4
 131 0004 1168     		ldr	r1, [r2]
 205:Generated_Source\PSoC4/CyLFClk.c ****     #if(CY_IP_SRSSLT)
 206:Generated_Source\PSoC4/CyLFClk.c ****         CY_SYS_TST_DDFT_CTRL_REG &= ((uint32) CY_SYS_TST_DDFT_CTRL_REG_DEFAULT_MASK);
 207:Generated_Source\PSoC4/CyLFClk.c ****     #endif /* (CY_IP_SRSSLT) */
ARM GAS  C:\Users\TIMCHE~1\AppData\Local\Temp\ccPS59ly.s 			page 7


 208:Generated_Source\PSoC4/CyLFClk.c **** }
 132              		.loc 1 208 0
 133              		@ sp needed
 204:Generated_Source\PSoC4/CyLFClk.c ****     #if(CY_IP_SRSSLT)
 134              		.loc 1 204 0
 135 0006 0B40     		and	r3, r1
 136 0008 1360     		str	r3, [r2]
 206:Generated_Source\PSoC4/CyLFClk.c ****     #endif /* (CY_IP_SRSSLT) */
 137              		.loc 1 206 0
 138 000a 054A     		ldr	r2, .L11+8
 139 000c 054B     		ldr	r3, .L11+12
 140 000e 1168     		ldr	r1, [r2]
 141 0010 0B40     		and	r3, r1
 142 0012 1360     		str	r3, [r2]
 143              		.loc 1 208 0
 144 0014 7047     		bx	lr
 145              	.L12:
 146 0016 C046     		.align	2
 147              	.L11:
 148 0018 34000340 		.word	1073938484
 149 001c FFF0FFFF 		.word	-3841
 150 0020 18000340 		.word	1073938456
 151 0024 0F0F0000 		.word	3855
 152              		.cfi_endproc
 153              	.LFE3:
 154              		.size	CySysClkIloStopMeasurement, .-CySysClkIloStopMeasurement
 155              		.global	__aeabi_uidiv
 156              		.section	.text.CySysClkIloCompensate,"ax",%progbits
 157              		.align	1
 158              		.global	CySysClkIloCompensate
 159              		.code	16
 160              		.thumb_func
 161              		.type	CySysClkIloCompensate, %function
 162              	CySysClkIloCompensate:
 163              	.LFB4:
 209:Generated_Source\PSoC4/CyLFClk.c **** 
 210:Generated_Source\PSoC4/CyLFClk.c **** 
 211:Generated_Source\PSoC4/CyLFClk.c **** /******************************************************************************
 212:Generated_Source\PSoC4/CyLFClk.c **** * Function Name: CySysClkIloCompensate
 213:Generated_Source\PSoC4/CyLFClk.c **** ***************************************************************************//**
 214:Generated_Source\PSoC4/CyLFClk.c **** * \brief
 215:Generated_Source\PSoC4/CyLFClk.c **** * This API measures the current ILO accuracy.
 216:Generated_Source\PSoC4/CyLFClk.c **** *
 217:Generated_Source\PSoC4/CyLFClk.c **** * Basing on the measured frequency the required number of ILO cycles for a 
 218:Generated_Source\PSoC4/CyLFClk.c **** * given delay (in microseconds) is obtained. The desired delay that needs to 
 219:Generated_Source\PSoC4/CyLFClk.c **** * be compensated is passed through the desiredDelay parameter. The compensated 
 220:Generated_Source\PSoC4/CyLFClk.c **** * cycle count is returned through the compesatedCycles pointer.
 221:Generated_Source\PSoC4/CyLFClk.c **** * The compensated ILO cycles can then be used to define the WDT period value, 
 222:Generated_Source\PSoC4/CyLFClk.c **** * effectively compensating for the ILO inaccuracy and allowing a more 
 223:Generated_Source\PSoC4/CyLFClk.c **** * accurate WDT interrupt generation.
 224:Generated_Source\PSoC4/CyLFClk.c **** *
 225:Generated_Source\PSoC4/CyLFClk.c **** * CySysClkIloStartMeasurement() API should be called prior to calling this API. 
 226:Generated_Source\PSoC4/CyLFClk.c **** *
 227:Generated_Source\PSoC4/CyLFClk.c **** * \note SysClk should be sourced by IMO. Otherwise CySysClkIloTrim() and 
 228:Generated_Source\PSoC4/CyLFClk.c **** * CySysClkIloCompensate() API can give incorrect results.
 229:Generated_Source\PSoC4/CyLFClk.c **** *
 230:Generated_Source\PSoC4/CyLFClk.c **** * \note If the System clock frequency is changed in runtime, the CyDelayFreq() 
ARM GAS  C:\Users\TIMCHE~1\AppData\Local\Temp\ccPS59ly.s 			page 8


 231:Generated_Source\PSoC4/CyLFClk.c **** * with the appropriate parameter (Frequency of bus clock in Hertz) should be 
 232:Generated_Source\PSoC4/CyLFClk.c **** * called before calling a next CySysClkIloCompensate().
 233:Generated_Source\PSoC4/CyLFClk.c **** *
 234:Generated_Source\PSoC4/CyLFClk.c **** * \warning Do not enter deep sleep mode until the function returns CYRET_SUCCESS.
 235:Generated_Source\PSoC4/CyLFClk.c **** *
 236:Generated_Source\PSoC4/CyLFClk.c **** * \param desiredDelay Required delay in microseconds.
 237:Generated_Source\PSoC4/CyLFClk.c **** *
 238:Generated_Source\PSoC4/CyLFClk.c **** * \param *compensatedCycles The pointer to the variable in which the required
 239:Generated_Source\PSoC4/CyLFClk.c **** * number of ILO cycles for the given delay will be returned.
 240:Generated_Source\PSoC4/CyLFClk.c **** *
 241:Generated_Source\PSoC4/CyLFClk.c **** * \details
 242:Generated_Source\PSoC4/CyLFClk.c **** * The value returned in *compensatedCycles pointer is not valid until the 
 243:Generated_Source\PSoC4/CyLFClk.c **** * function returns CYRET_SUCCESS.
 244:Generated_Source\PSoC4/CyLFClk.c **** *
 245:Generated_Source\PSoC4/CyLFClk.c **** * The desiredDelay parameter value should be in next range: <br>From 100 to 
 246:Generated_Source\PSoC4/CyLFClk.c **** * 2 000 000 microseconds for PSoC 4000 / PSoC 4000S / PSoC 4100S / PSoC Analog 
 247:Generated_Source\PSoC4/CyLFClk.c **** * Coprocessor devices.<br>From 100 to 4 000 000 000 microseconds for 
 248:Generated_Source\PSoC4/CyLFClk.c **** * PSoC 4100 / PSoC 4200 / PSoC 4100 BLE / PSoC 4200 BLE / PRoC BLE /
 249:Generated_Source\PSoC4/CyLFClk.c **** * PSoC 4200L / PSoC 4100M /PSoC 4200M devices.
 250:Generated_Source\PSoC4/CyLFClk.c **** *
 251:Generated_Source\PSoC4/CyLFClk.c **** * \return CYRET_SUCCESS - The compensation process is complete and the 
 252:Generated_Source\PSoC4/CyLFClk.c **** * compensated cycles value is returned in the compensatedCycles pointer.
 253:Generated_Source\PSoC4/CyLFClk.c **** *
 254:Generated_Source\PSoC4/CyLFClk.c **** * \return CYRET_STARTED - Indicates measurement is in progress. It is 
 255:Generated_Source\PSoC4/CyLFClk.c **** * strongly recommended to do not make pauses between API calling. The 
 256:Generated_Source\PSoC4/CyLFClk.c **** * function should be called repeatedly until the API returns CYRET_SUCCESS.
 257:Generated_Source\PSoC4/CyLFClk.c **** *
 258:Generated_Source\PSoC4/CyLFClk.c **** * \return CYRET_INVALID_STATE - Indicates that measurement not started. 
 259:Generated_Source\PSoC4/CyLFClk.c **** * The user should call CySysClkIloStartMeasurement() API before calling 
 260:Generated_Source\PSoC4/CyLFClk.c **** * this API.
 261:Generated_Source\PSoC4/CyLFClk.c **** *
 262:Generated_Source\PSoC4/CyLFClk.c **** * \note For a correct WDT or DeepSleep Timers functioning with ILO compensating 
 263:Generated_Source\PSoC4/CyLFClk.c **** * the CySysClkIloCompensate() should be called before WDT or DeepSleep Timers 
 264:Generated_Source\PSoC4/CyLFClk.c **** * enabling.
 265:Generated_Source\PSoC4/CyLFClk.c **** *
 266:Generated_Source\PSoC4/CyLFClk.c **** *******************************************************************************/
 267:Generated_Source\PSoC4/CyLFClk.c **** cystatus CySysClkIloCompensate(uint32 desiredDelay , uint32* compensatedCycles)
 268:Generated_Source\PSoC4/CyLFClk.c **** {
 164              		.loc 1 268 0
 165              		.cfi_startproc
 166              	.LVL0:
 167 0000 F7B5     		push	{r0, r1, r2, r4, r5, r6, r7, lr}
 168              		.cfi_def_cfa_offset 32
 169              		.cfi_offset 0, -32
 170              		.cfi_offset 1, -28
 171              		.cfi_offset 2, -24
 172              		.cfi_offset 4, -20
 173              		.cfi_offset 5, -16
 174              		.cfi_offset 6, -12
 175              		.cfi_offset 7, -8
 176              		.cfi_offset 14, -4
 269:Generated_Source\PSoC4/CyLFClk.c ****     uint32 iloCompensatedCycles;
 270:Generated_Source\PSoC4/CyLFClk.c ****     uint32 desiredDelayInCounts;
 271:Generated_Source\PSoC4/CyLFClk.c ****     static uint32 compensateRunningStatus = CY_SYS_CLK_TRIM_OR_COMP_FINISHED;
 272:Generated_Source\PSoC4/CyLFClk.c ****     uint32 checkStatus;
 273:Generated_Source\PSoC4/CyLFClk.c ****     cystatus returnStatus;
 274:Generated_Source\PSoC4/CyLFClk.c **** 
ARM GAS  C:\Users\TIMCHE~1\AppData\Local\Temp\ccPS59ly.s 			page 9


 275:Generated_Source\PSoC4/CyLFClk.c ****     checkStatus = (uint32) (CY_SYS_CLK_DFT_REG & (uint32) CY_SYS_TST_DDFT_CTRL_REG_DEFAULT_MASK);
 276:Generated_Source\PSoC4/CyLFClk.c **** 
 277:Generated_Source\PSoC4/CyLFClk.c ****     /* Check if CySysStartMeasurement was called before */
 278:Generated_Source\PSoC4/CyLFClk.c ****     if((checkStatus == CY_SYS_CLK_SEL_ILO_DFT_SOURCE) && 
 177              		.loc 1 278 0
 178 0002 8024     		mov	r4, #128
 275:Generated_Source\PSoC4/CyLFClk.c **** 
 179              		.loc 1 275 0
 180 0004 2C4B     		ldr	r3, .L26
 181              		.loc 1 278 0
 182 0006 6400     		lsl	r4, r4, #1
 275:Generated_Source\PSoC4/CyLFClk.c **** 
 183              		.loc 1 275 0
 184 0008 1A68     		ldr	r2, [r3]
 185              	.LVL1:
 186 000a 2C4B     		ldr	r3, .L26+4
 187 000c 1A40     		and	r2, r3
 188              	.LVL2:
 279:Generated_Source\PSoC4/CyLFClk.c ****        (CY_SYS_TST_DDFT_CTRL_REG == CY_SYS_TST_DDFT_CTRL_REG_SEL2_CLK1) &&
 280:Generated_Source\PSoC4/CyLFClk.c ****        (CY_SYS_CLK_MAX_DELAY_US >= desiredDelay) &&
 281:Generated_Source\PSoC4/CyLFClk.c ****        (CY_SYS_CLK_MIN_DELAY_US <= desiredDelay) &&
 282:Generated_Source\PSoC4/CyLFClk.c ****        (compensatedCycles !=  NULL))
 283:Generated_Source\PSoC4/CyLFClk.c ****     {
 284:Generated_Source\PSoC4/CyLFClk.c ****         if(CY_SYS_CLK_TRIM_OR_COMP_FINISHED != compensateRunningStatus)
 285:Generated_Source\PSoC4/CyLFClk.c ****         {
 286:Generated_Source\PSoC4/CyLFClk.c ****             /* Wait until counter 1 stopped counting and after it calculate compensated cycles */
 287:Generated_Source\PSoC4/CyLFClk.c ****             if(0u != (CY_SYS_CNT_REG1_REG & CY_SYS_CLK_ILO_CALIBR_COMPLETE_MASK))
 288:Generated_Source\PSoC4/CyLFClk.c ****             {
 289:Generated_Source\PSoC4/CyLFClk.c ****                 if (0u != CY_SYS_CNT_REG2_REG)
 290:Generated_Source\PSoC4/CyLFClk.c ****                 {
 291:Generated_Source\PSoC4/CyLFClk.c ****                     /* Calculate required number of ILO cycles for given delay */
 292:Generated_Source\PSoC4/CyLFClk.c ****                     #if(CY_IP_SRSSV2)
 293:Generated_Source\PSoC4/CyLFClk.c ****                         if (CY_SYS_CLK_DELAY_COUNTS_LIMIT < desiredDelay)
 294:Generated_Source\PSoC4/CyLFClk.c ****                         {
 295:Generated_Source\PSoC4/CyLFClk.c ****                             desiredDelayInCounts = (desiredDelay / CY_SYS_CLK_ILO_PERIOD);
 296:Generated_Source\PSoC4/CyLFClk.c ****                             iloCompensatedCycles = 
 297:Generated_Source\PSoC4/CyLFClk.c ****                             (((CY_SYS_CNT_REG2_REG * cydelayFreqHz) / (cydelayFreqHz >> CY_SYS_CLK_
 298:Generated_Source\PSoC4/CyLFClk.c ****                                 CY_SYS_CLK_ILO_FREQ_2MSB) * (desiredDelayInCounts / CY_SYS_CLK_ILO_
 299:Generated_Source\PSoC4/CyLFClk.c ****                         }
 300:Generated_Source\PSoC4/CyLFClk.c ****                         else
 301:Generated_Source\PSoC4/CyLFClk.c ****                         {
 302:Generated_Source\PSoC4/CyLFClk.c ****                             desiredDelayInCounts = ((desiredDelay * CY_SYS_CLK_COEF_PHUNDRED) + 
 303:Generated_Source\PSoC4/CyLFClk.c ****                                                      CY_SYS_CLK_HALF_OF_CLOCK) / CY_SYS_CLK_ILO_PER
 304:Generated_Source\PSoC4/CyLFClk.c **** 
 305:Generated_Source\PSoC4/CyLFClk.c ****                             iloCompensatedCycles = (((CY_SYS_CNT_REG2_REG * cydelayFreqHz) / 
 306:Generated_Source\PSoC4/CyLFClk.c ****                                                      (cydelayFreqHz >> CY_SYS_CLK_SYS_CLK_DEVIDER))
 307:Generated_Source\PSoC4/CyLFClk.c ****                                                      desiredDelayInCounts) / CY_SYS_CLK_ILO_DESIRED
 308:Generated_Source\PSoC4/CyLFClk.c ****                         }
 309:Generated_Source\PSoC4/CyLFClk.c ****                     #else /* (CY_IP_SRSSLT) */
 310:Generated_Source\PSoC4/CyLFClk.c ****                         desiredDelayInCounts = ((desiredDelay * CY_SYS_CLK_COEF_PHUNDRED) + CY_SYS_
 311:Generated_Source\PSoC4/CyLFClk.c ****                                                                                            CY_SYS_C
 312:Generated_Source\PSoC4/CyLFClk.c ****                         if(CY_SYS_CLK_MAX_LITE_NUMBER < desiredDelayInCounts)
 313:Generated_Source\PSoC4/CyLFClk.c ****                         {
 314:Generated_Source\PSoC4/CyLFClk.c ****                             iloCompensatedCycles = (((CY_SYS_CNT_REG2_REG * cydelayFreqHz) / (cydel
 315:Generated_Source\PSoC4/CyLFClk.c ****                                                    CY_SYS_CLK_SYS_CLK_DEVIDER)) / CY_SYS_CLK_ILO_FR
 316:Generated_Source\PSoC4/CyLFClk.c ****                                                    (desiredDelayInCounts / CY_SYS_CLK_ILO_FREQ_3LSB
 317:Generated_Source\PSoC4/CyLFClk.c ****                         }
ARM GAS  C:\Users\TIMCHE~1\AppData\Local\Temp\ccPS59ly.s 			page 10


 318:Generated_Source\PSoC4/CyLFClk.c ****                         else
 319:Generated_Source\PSoC4/CyLFClk.c ****                         {
 320:Generated_Source\PSoC4/CyLFClk.c ****                             iloCompensatedCycles = (((CY_SYS_CNT_REG2_REG * cydelayFreqHz) / 
 321:Generated_Source\PSoC4/CyLFClk.c ****                                                      (cydelayFreqHz >> CY_SYS_CLK_SYS_CLK_DEVIDER))
 322:Generated_Source\PSoC4/CyLFClk.c ****                                                      desiredDelayInCounts) / CY_SYS_CLK_ILO_DESIRED
 323:Generated_Source\PSoC4/CyLFClk.c ****                         }
 324:Generated_Source\PSoC4/CyLFClk.c ****                     #endif /* (CY_IP_SRSSV2) */
 325:Generated_Source\PSoC4/CyLFClk.c **** 
 326:Generated_Source\PSoC4/CyLFClk.c ****                     *compensatedCycles = iloCompensatedCycles;
 327:Generated_Source\PSoC4/CyLFClk.c ****                     compensateRunningStatus = CY_SYS_CLK_TRIM_OR_COMP_FINISHED;
 328:Generated_Source\PSoC4/CyLFClk.c ****                     returnStatus = CYRET_SUCCESS;
 329:Generated_Source\PSoC4/CyLFClk.c ****                 }
 330:Generated_Source\PSoC4/CyLFClk.c ****                 else
 331:Generated_Source\PSoC4/CyLFClk.c ****                 {
 332:Generated_Source\PSoC4/CyLFClk.c ****                     returnStatus  = CYRET_INVALID_STATE;
 333:Generated_Source\PSoC4/CyLFClk.c ****                 }
 334:Generated_Source\PSoC4/CyLFClk.c ****             }
 335:Generated_Source\PSoC4/CyLFClk.c ****             else
 336:Generated_Source\PSoC4/CyLFClk.c ****             {
 337:Generated_Source\PSoC4/CyLFClk.c ****                 returnStatus = CYRET_STARTED;
 338:Generated_Source\PSoC4/CyLFClk.c ****             }
 339:Generated_Source\PSoC4/CyLFClk.c ****         }
 340:Generated_Source\PSoC4/CyLFClk.c ****         else
 341:Generated_Source\PSoC4/CyLFClk.c ****         {
 342:Generated_Source\PSoC4/CyLFClk.c ****             /* Reload CNTR 1 count value for next measurement cycle*/
 343:Generated_Source\PSoC4/CyLFClk.c ****             CY_SYS_CNT_REG1_REG = (cydelayFreqHz >> CY_SYS_CLK_SYS_CLK_DEVIDER);
 344:Generated_Source\PSoC4/CyLFClk.c ****             compensateRunningStatus = CY_SYS_CLK_TRIM_OR_COMP_STARTED;
 345:Generated_Source\PSoC4/CyLFClk.c ****             returnStatus = CYRET_STARTED;
 346:Generated_Source\PSoC4/CyLFClk.c ****         }
 347:Generated_Source\PSoC4/CyLFClk.c ****     }
 348:Generated_Source\PSoC4/CyLFClk.c ****     else
 349:Generated_Source\PSoC4/CyLFClk.c ****     {
 350:Generated_Source\PSoC4/CyLFClk.c ****         returnStatus = CYRET_INVALID_STATE;
 189              		.loc 1 350 0
 190 000e 1123     		mov	r3, #17
 278:Generated_Source\PSoC4/CyLFClk.c ****        (CY_SYS_TST_DDFT_CTRL_REG == CY_SYS_TST_DDFT_CTRL_REG_SEL2_CLK1) &&
 191              		.loc 1 278 0
 192 0010 A242     		cmp	r2, r4
 193 0012 4ED1     		bne	.L14
 279:Generated_Source\PSoC4/CyLFClk.c ****        (CY_SYS_TST_DDFT_CTRL_REG == CY_SYS_TST_DDFT_CTRL_REG_SEL2_CLK1) &&
 194              		.loc 1 279 0 discriminator 1
 195 0014 2A4A     		ldr	r2, .L26+8
 196              	.LVL3:
 197 0016 1468     		ldr	r4, [r2]
 278:Generated_Source\PSoC4/CyLFClk.c ****        (CY_SYS_TST_DDFT_CTRL_REG == CY_SYS_TST_DDFT_CTRL_REG_SEL2_CLK1) &&
 198              		.loc 1 278 0 discriminator 1
 199 0018 2A4A     		ldr	r2, .L26+12
 200 001a 9442     		cmp	r4, r2
 201 001c 49D1     		bne	.L14
 280:Generated_Source\PSoC4/CyLFClk.c ****        (CY_SYS_CLK_MIN_DELAY_US <= desiredDelay) &&
 202              		.loc 1 280 0
 203 001e 041C     		mov	r4, r0
 204 0020 294A     		ldr	r2, .L26+16
 205 0022 643C     		sub	r4, r4, #100
 206 0024 9442     		cmp	r4, r2
 207 0026 44D8     		bhi	.L14
 281:Generated_Source\PSoC4/CyLFClk.c ****        (compensatedCycles !=  NULL))
ARM GAS  C:\Users\TIMCHE~1\AppData\Local\Temp\ccPS59ly.s 			page 11


 208              		.loc 1 281 0
 209 0028 0029     		cmp	r1, #0
 210 002a 42D0     		beq	.L14
 284:Generated_Source\PSoC4/CyLFClk.c ****         {
 211              		.loc 1 284 0
 212 002c 274B     		ldr	r3, .L26+20
 213 002e 284D     		ldr	r5, .L26+24
 214 0030 1A68     		ldr	r2, [r3]
 215 0032 1F1C     		mov	r7, r3
 216 0034 002A     		cmp	r2, #0
 217 0036 35D0     		beq	.L15
 287:Generated_Source\PSoC4/CyLFClk.c ****             {
 218              		.loc 1 287 0
 219 0038 2A68     		ldr	r2, [r5]
 337:Generated_Source\PSoC4/CyLFClk.c ****             }
 220              		.loc 1 337 0
 221 003a 0723     		mov	r3, #7
 287:Generated_Source\PSoC4/CyLFClk.c ****             {
 222              		.loc 1 287 0
 223 003c 002A     		cmp	r2, #0
 224 003e 38DA     		bge	.L14
 289:Generated_Source\PSoC4/CyLFClk.c ****                 {
 225              		.loc 1 289 0
 226 0040 244D     		ldr	r5, .L26+28
 227              		.loc 1 350 0
 228 0042 0A33     		add	r3, r3, #10
 289:Generated_Source\PSoC4/CyLFClk.c ****                 {
 229              		.loc 1 289 0
 230 0044 2A68     		ldr	r2, [r5]
 231 0046 002A     		cmp	r2, #0
 232 0048 33D0     		beq	.L14
 310:Generated_Source\PSoC4/CyLFClk.c ****                                                                                            CY_SYS_C
 233              		.loc 1 310 0
 234 004a 5333     		add	r3, r3, #83
 235 004c 5843     		mul	r0, r3
 236              	.LVL4:
 237 004e 224B     		ldr	r3, .L26+32
 238 0050 0C1C     		mov	r4, r1
 239              	.LVL5:
 240 0052 C018     		add	r0, r0, r3
 241 0054 2149     		ldr	r1, .L26+36
 242              	.LVL6:
 243 0056 FFF7FEFF 		bl	__aeabi_uidiv
 244              	.LVL7:
 312:Generated_Source\PSoC4/CyLFClk.c ****                         {
 245              		.loc 1 312 0
 246 005a 214A     		ldr	r2, .L26+40
 310:Generated_Source\PSoC4/CyLFClk.c ****                                                                                            CY_SYS_C
 247              		.loc 1 310 0
 248 005c 061E     		sub	r6, r0, #0
 249              	.LVL8:
 250 005e 214B     		ldr	r3, .L26+44
 312:Generated_Source\PSoC4/CyLFClk.c ****                         {
 251              		.loc 1 312 0
 252 0060 9642     		cmp	r6, r2
 253 0062 11D9     		bls	.L16
 316:Generated_Source\PSoC4/CyLFClk.c ****                         }
ARM GAS  C:\Users\TIMCHE~1\AppData\Local\Temp\ccPS59ly.s 			page 12


 254              		.loc 1 316 0
 255 0064 FA21     		mov	r1, #250
 314:Generated_Source\PSoC4/CyLFClk.c ****                                                    CY_SYS_CLK_SYS_CLK_DEVIDER)) / CY_SYS_CLK_ILO_FR
 256              		.loc 1 314 0
 257 0066 2A68     		ldr	r2, [r5]
 316:Generated_Source\PSoC4/CyLFClk.c ****                         }
 258              		.loc 1 316 0
 259 0068 8900     		lsl	r1, r1, #2
 314:Generated_Source\PSoC4/CyLFClk.c ****                                                    CY_SYS_CLK_SYS_CLK_DEVIDER)) / CY_SYS_CLK_ILO_FR
 260              		.loc 1 314 0
 261 006a 1D68     		ldr	r5, [r3]
 262 006c 0192     		str	r2, [sp, #4]
 316:Generated_Source\PSoC4/CyLFClk.c ****                         }
 263              		.loc 1 316 0
 264 006e FFF7FEFF 		bl	__aeabi_uidiv
 265              	.LVL9:
 266 0072 061C     		mov	r6, r0
 267              	.LVL10:
 314:Generated_Source\PSoC4/CyLFClk.c ****                                                    CY_SYS_CLK_SYS_CLK_DEVIDER)) / CY_SYS_CLK_ILO_FR
 268              		.loc 1 314 0
 269 0074 0198     		ldr	r0, [sp, #4]
 270 0076 A90A     		lsr	r1, r5, #10
 271 0078 6843     		mul	r0, r5
 272 007a FFF7FEFF 		bl	__aeabi_uidiv
 273              	.LVL11:
 315:Generated_Source\PSoC4/CyLFClk.c ****                                                    (desiredDelayInCounts / CY_SYS_CLK_ILO_FREQ_3LSB
 274              		.loc 1 315 0
 275 007e 2821     		mov	r1, #40
 276 0080 FFF7FEFF 		bl	__aeabi_uidiv
 277              	.LVL12:
 314:Generated_Source\PSoC4/CyLFClk.c ****                                                    CY_SYS_CLK_SYS_CLK_DEVIDER)) / CY_SYS_CLK_ILO_FR
 278              		.loc 1 314 0
 279 0084 7043     		mul	r0, r6
 280              	.LVL13:
 281 0086 09E0     		b	.L17
 282              	.LVL14:
 283              	.L16:
 320:Generated_Source\PSoC4/CyLFClk.c ****                                                      (cydelayFreqHz >> CY_SYS_CLK_SYS_CLK_DEVIDER))
 284              		.loc 1 320 0
 285 0088 1968     		ldr	r1, [r3]
 286 008a 2868     		ldr	r0, [r5]
 287              	.LVL15:
 288 008c 4843     		mul	r0, r1
 321:Generated_Source\PSoC4/CyLFClk.c ****                                                      desiredDelayInCounts) / CY_SYS_CLK_ILO_DESIRED
 289              		.loc 1 321 0
 290 008e 890A     		lsr	r1, r1, #10
 320:Generated_Source\PSoC4/CyLFClk.c ****                                                      (cydelayFreqHz >> CY_SYS_CLK_SYS_CLK_DEVIDER))
 291              		.loc 1 320 0
 292 0090 FFF7FEFF 		bl	__aeabi_uidiv
 293              	.LVL16:
 294 0094 1449     		ldr	r1, .L26+48
 321:Generated_Source\PSoC4/CyLFClk.c ****                                                      desiredDelayInCounts) / CY_SYS_CLK_ILO_DESIRED
 295              		.loc 1 321 0
 296 0096 7043     		mul	r0, r6
 320:Generated_Source\PSoC4/CyLFClk.c ****                                                      (cydelayFreqHz >> CY_SYS_CLK_SYS_CLK_DEVIDER))
 297              		.loc 1 320 0
 298 0098 FFF7FEFF 		bl	__aeabi_uidiv
ARM GAS  C:\Users\TIMCHE~1\AppData\Local\Temp\ccPS59ly.s 			page 13


 299              	.LVL17:
 300              	.L17:
 327:Generated_Source\PSoC4/CyLFClk.c ****                     returnStatus = CYRET_SUCCESS;
 301              		.loc 1 327 0
 302 009c 0023     		mov	r3, #0
 326:Generated_Source\PSoC4/CyLFClk.c ****                     compensateRunningStatus = CY_SYS_CLK_TRIM_OR_COMP_FINISHED;
 303              		.loc 1 326 0
 304 009e 2060     		str	r0, [r4]
 327:Generated_Source\PSoC4/CyLFClk.c ****                     returnStatus = CYRET_SUCCESS;
 305              		.loc 1 327 0
 306 00a0 3B60     		str	r3, [r7]
 307              	.LVL18:
 308 00a2 06E0     		b	.L14
 309              	.LVL19:
 310              	.L15:
 343:Generated_Source\PSoC4/CyLFClk.c ****             compensateRunningStatus = CY_SYS_CLK_TRIM_OR_COMP_STARTED;
 311              		.loc 1 343 0
 312 00a4 0F4A     		ldr	r2, .L26+44
 313 00a6 1268     		ldr	r2, [r2]
 314 00a8 920A     		lsr	r2, r2, #10
 315 00aa 2A60     		str	r2, [r5]
 344:Generated_Source\PSoC4/CyLFClk.c ****             returnStatus = CYRET_STARTED;
 316              		.loc 1 344 0
 317 00ac 0122     		mov	r2, #1
 318 00ae 1A60     		str	r2, [r3]
 319              	.LVL20:
 345:Generated_Source\PSoC4/CyLFClk.c ****         }
 320              		.loc 1 345 0
 321 00b0 0723     		mov	r3, #7
 322              	.LVL21:
 323              	.L14:
 351:Generated_Source\PSoC4/CyLFClk.c ****     }
 352:Generated_Source\PSoC4/CyLFClk.c **** 
 353:Generated_Source\PSoC4/CyLFClk.c ****     return (returnStatus);
 354:Generated_Source\PSoC4/CyLFClk.c **** }
 324              		.loc 1 354 0
 325 00b2 181C     		mov	r0, r3
 326              		@ sp needed
 327 00b4 FEBD     		pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 328              	.L27:
 329 00b6 C046     		.align	2
 330              	.L26:
 331 00b8 34000340 		.word	1073938484
 332 00bc 0F0F0000 		.word	3855
 333 00c0 18000340 		.word	1073938456
 334 00c4 08090000 		.word	2312
 335 00c8 1C841E00 		.word	1999900
 336 00cc 00000000 		.word	.LANCHOR0
 337 00d0 1C000340 		.word	1073938460
 338 00d4 20000340 		.word	1073938464
 339 00d8 71020000 		.word	625
 340 00dc C4090000 		.word	2500
 341 00e0 60D10000 		.word	53600
 342 00e4 00000000 		.word	cydelayFreqHz
 343 00e8 409C0000 		.word	40000
 344              		.cfi_endproc
 345              	.LFE4:
ARM GAS  C:\Users\TIMCHE~1\AppData\Local\Temp\ccPS59ly.s 			page 14


 346              		.size	CySysClkIloCompensate, .-CySysClkIloCompensate
 347              		.section	.text.CySysWdtGetEnabledStatus,"ax",%progbits
 348              		.align	1
 349              		.global	CySysWdtGetEnabledStatus
 350              		.code	16
 351              		.thumb_func
 352              		.type	CySysWdtGetEnabledStatus, %function
 353              	CySysWdtGetEnabledStatus:
 354              	.LFB5:
 355:Generated_Source\PSoC4/CyLFClk.c **** 
 356:Generated_Source\PSoC4/CyLFClk.c **** 
 357:Generated_Source\PSoC4/CyLFClk.c **** #if(CY_IP_SRSSV2)
 358:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
 359:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysClkIloEnabled
 360:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
 361:Generated_Source\PSoC4/CyLFClk.c ****     *
 362:Generated_Source\PSoC4/CyLFClk.c ****     * \internal
 363:Generated_Source\PSoC4/CyLFClk.c ****     * Reports the ILO enable state.
 364:Generated_Source\PSoC4/CyLFClk.c ****     *
 365:Generated_Source\PSoC4/CyLFClk.c ****     * \return
 366:Generated_Source\PSoC4/CyLFClk.c ****     * 1 if ILO is enabled, and 0 if ILO is disabled.
 367:Generated_Source\PSoC4/CyLFClk.c ****     *
 368:Generated_Source\PSoC4/CyLFClk.c ****     * \endinternal
 369:Generated_Source\PSoC4/CyLFClk.c ****     ********************************************************************************/
 370:Generated_Source\PSoC4/CyLFClk.c ****     static uint32 CySysClkIloEnabled(void)
 371:Generated_Source\PSoC4/CyLFClk.c ****     {
 372:Generated_Source\PSoC4/CyLFClk.c ****         /* Prohibits writing to WDT registers and ILO/WCO registers when not equal to 0 */
 373:Generated_Source\PSoC4/CyLFClk.c ****         return ((0u != (CY_SYS_CLK_ILO_CONFIG_REG & (uint32)(CY_SYS_CLK_ILO_CONFIG_ENABLE))) ?
 374:Generated_Source\PSoC4/CyLFClk.c ****             (uint32) 1u :
 375:Generated_Source\PSoC4/CyLFClk.c ****             (uint32) 0u);
 376:Generated_Source\PSoC4/CyLFClk.c ****     }
 377:Generated_Source\PSoC4/CyLFClk.c **** #endif /* (CY_IP_SRSSV2) */
 378:Generated_Source\PSoC4/CyLFClk.c **** 
 379:Generated_Source\PSoC4/CyLFClk.c **** 
 380:Generated_Source\PSoC4/CyLFClk.c **** #if(CY_IP_SRSSV2 && (!(CY_PSOC4_4100 || CY_PSOC4_4200)))
 381:Generated_Source\PSoC4/CyLFClk.c **** /********************************************************************************
 382:Generated_Source\PSoC4/CyLFClk.c **** * Function Name: CySysClkIloTrim
 383:Generated_Source\PSoC4/CyLFClk.c **** *****************************************************************************//**
 384:Generated_Source\PSoC4/CyLFClk.c **** * \brief
 385:Generated_Source\PSoC4/CyLFClk.c **** * The API trims the ILO frequency to +/- 10% accuracy range using accurate 
 386:Generated_Source\PSoC4/CyLFClk.c **** * SysClk.
 387:Generated_Source\PSoC4/CyLFClk.c **** *
 388:Generated_Source\PSoC4/CyLFClk.c **** * The API can be blocking or non-blocking depending on the value of the mode 
 389:Generated_Source\PSoC4/CyLFClk.c **** * parameter passed. The accuracy of ILO after trimming in parts per thousand 
 390:Generated_Source\PSoC4/CyLFClk.c **** * is returned through the iloAccuracyInPPT pointer. A positive number indicates 
 391:Generated_Source\PSoC4/CyLFClk.c **** * that the ILO is running fast and a negative number indicates that the ILO is 
 392:Generated_Source\PSoC4/CyLFClk.c **** * running slowly. This error is relative to the error in the reference clock 
 393:Generated_Source\PSoC4/CyLFClk.c **** * (SysClk), so the absolute error will be higher and depends on the accuracy 
 394:Generated_Source\PSoC4/CyLFClk.c **** * of the reference.
 395:Generated_Source\PSoC4/CyLFClk.c **** *
 396:Generated_Source\PSoC4/CyLFClk.c **** * The CySysClkIloStartMeasurement() API should be called prior to calling this 
 397:Generated_Source\PSoC4/CyLFClk.c **** * API. Otherwise it will return CYRET_INVALID_STATE as the measurement was not 
 398:Generated_Source\PSoC4/CyLFClk.c **** * started.
 399:Generated_Source\PSoC4/CyLFClk.c **** *
 400:Generated_Source\PSoC4/CyLFClk.c **** * \note SysClk should be sourced by IMO. Otherwise CySysClkIloTrim() and 
 401:Generated_Source\PSoC4/CyLFClk.c **** * CySysClkIloCompensate() API can give incorrect results.
 402:Generated_Source\PSoC4/CyLFClk.c **** *
ARM GAS  C:\Users\TIMCHE~1\AppData\Local\Temp\ccPS59ly.s 			page 15


 403:Generated_Source\PSoC4/CyLFClk.c **** * \note If System clock frequency is changed in runtime, the CyDelayFreq() 
 404:Generated_Source\PSoC4/CyLFClk.c **** * with the appropriate parameter (Frequency of bus clock in Hertz) should be 
 405:Generated_Source\PSoC4/CyLFClk.c **** * called before next CySysClkIloCompensate() usage.
 406:Generated_Source\PSoC4/CyLFClk.c **** *
 407:Generated_Source\PSoC4/CyLFClk.c **** * \warning Do not enter deep sleep mode until the function returns CYRET_SUCCESS
 408:Generated_Source\PSoC4/CyLFClk.c **** * or CYRET_TIMEOUT.
 409:Generated_Source\PSoC4/CyLFClk.c **** *
 410:Generated_Source\PSoC4/CyLFClk.c **** * Available for all PSoC 4 devices with ILO trim capability. This excludes 
 411:Generated_Source\PSoC4/CyLFClk.c **** * PSoC 4000 / PSoC 4100 / PSoC 4200 / PSoC 4000S / PSoC 4100S / PSoC
 412:Generated_Source\PSoC4/CyLFClk.c **** * Analog Coprocessor devices.
 413:Generated_Source\PSoC4/CyLFClk.c **** *
 414:Generated_Source\PSoC4/CyLFClk.c **** * \param mode
 415:Generated_Source\PSoC4/CyLFClk.c **** *  CY_SYS_CLK_BLOCKING -  The function does not return until the ILO is 
 416:Generated_Source\PSoC4/CyLFClk.c **** * within +/-10% accuracy range or time out has occurred.<br>
 417:Generated_Source\PSoC4/CyLFClk.c **** * CY_SYS_CLK_NON_BLOCKING - The function returns immediately after 
 418:Generated_Source\PSoC4/CyLFClk.c **** * performing a single iteration of the trim process. The function should be 
 419:Generated_Source\PSoC4/CyLFClk.c **** * called repeatedly until the trimming is completed successfully.
 420:Generated_Source\PSoC4/CyLFClk.c **** *
 421:Generated_Source\PSoC4/CyLFClk.c **** * \param *iloAccuracyInPPT Pointer to an integer in which the trimmed ILO 
 422:Generated_Source\PSoC4/CyLFClk.c **** * accuracy will be returned.
 423:Generated_Source\PSoC4/CyLFClk.c **** *
 424:Generated_Source\PSoC4/CyLFClk.c **** * \details The value returned in *iloAccuracyInPPT pointer is not valid 
 425:Generated_Source\PSoC4/CyLFClk.c **** * until the function returns CYRET_SUCCESS. ILO accuracy in PPT is given by:
 426:Generated_Source\PSoC4/CyLFClk.c **** *
 427:Generated_Source\PSoC4/CyLFClk.c **** * IloAccuracyInPPT = ((MeasuredIloFreq - DesiredIloFreq) * 
 428:Generated_Source\PSoC4/CyLFClk.c **** * CY_SYS_CLK_PERTHOUSAND) / DesiredIloFreq);
 429:Generated_Source\PSoC4/CyLFClk.c **** *
 430:Generated_Source\PSoC4/CyLFClk.c **** * DesiredIloFreq  = 32000, CY_SYS_CLK_PERTHOUSAND = 1000;
 431:Generated_Source\PSoC4/CyLFClk.c **** *
 432:Generated_Source\PSoC4/CyLFClk.c **** * \return CYRET_SUCCESS - Indicates trimming is complete. This value indicates 
 433:Generated_Source\PSoC4/CyLFClk.c **** * trimming is successful and iloAccuracyInPPT is within +/- 10%.
 434:Generated_Source\PSoC4/CyLFClk.c **** *
 435:Generated_Source\PSoC4/CyLFClk.c **** * \return CYRET_STARTED - Indicates measurement is in progress. This is applicable 
 436:Generated_Source\PSoC4/CyLFClk.c **** * only for non-blocking mode.
 437:Generated_Source\PSoC4/CyLFClk.c **** *
 438:Generated_Source\PSoC4/CyLFClk.c **** * \return CYRET_INVALID_STATE - Indicates trimming was unsuccessful. You should 
 439:Generated_Source\PSoC4/CyLFClk.c **** * call CySysClkIloStartMeasurement() before calling this API.
 440:Generated_Source\PSoC4/CyLFClk.c **** *
 441:Generated_Source\PSoC4/CyLFClk.c **** * \return CYRET_TIMEOUT - Indicates trimming was unsuccessful. This is applicable 
 442:Generated_Source\PSoC4/CyLFClk.c **** * only for blocking mode. Timeout means the trimming was tried 5 times without 
 443:Generated_Source\PSoC4/CyLFClk.c **** * success (i.e. ILO accuracy > +/- 10%). The user can call the API again for 
 444:Generated_Source\PSoC4/CyLFClk.c **** * another try or wait for some time before calling it again (to let the system 
 445:Generated_Source\PSoC4/CyLFClk.c **** * to settle to another operating point change in temperature etc.) and continue 
 446:Generated_Source\PSoC4/CyLFClk.c **** * using the previous trim value till the next call.
 447:Generated_Source\PSoC4/CyLFClk.c **** *
 448:Generated_Source\PSoC4/CyLFClk.c **** **********************************************************************************/
 449:Generated_Source\PSoC4/CyLFClk.c **** cystatus CySysClkIloTrim(uint32 mode, int32* iloAccuracyInPPT)
 450:Generated_Source\PSoC4/CyLFClk.c **** {
 451:Generated_Source\PSoC4/CyLFClk.c ****     uint32 timeOutClocks = CY_SYS_CLK_TIMEOUT;
 452:Generated_Source\PSoC4/CyLFClk.c ****     uint32 waitUntilCntr1Stops;
 453:Generated_Source\PSoC4/CyLFClk.c ****     static uint32 trimRunningStatus = CY_SYS_CLK_TRIM_OR_COMP_FINISHED;
 454:Generated_Source\PSoC4/CyLFClk.c ****     uint32 checkStatus;
 455:Generated_Source\PSoC4/CyLFClk.c ****     cystatus returnStatus;
 456:Generated_Source\PSoC4/CyLFClk.c **** 
 457:Generated_Source\PSoC4/CyLFClk.c ****     checkStatus = (uint32) (CY_SYS_CLK_DFT_REG & (uint32) CY_SYS_TST_DDFT_CTRL_REG_DEFAULT_MASK);
 458:Generated_Source\PSoC4/CyLFClk.c **** 
 459:Generated_Source\PSoC4/CyLFClk.c ****     /* Check if DFT and CTRL registers were configures in CySysStartMeasurement*/
ARM GAS  C:\Users\TIMCHE~1\AppData\Local\Temp\ccPS59ly.s 			page 16


 460:Generated_Source\PSoC4/CyLFClk.c ****     if((checkStatus == CY_SYS_CLK_SEL_ILO_DFT_SOURCE) &&
 461:Generated_Source\PSoC4/CyLFClk.c ****        (CY_SYS_TST_DDFT_CTRL_REG == CY_SYS_TST_DDFT_CTRL_REG_SEL2_CLK1) &&
 462:Generated_Source\PSoC4/CyLFClk.c ****        (iloAccuracyInPPT != NULL))
 463:Generated_Source\PSoC4/CyLFClk.c ****     {
 464:Generated_Source\PSoC4/CyLFClk.c ****         if(CY_SYS_CLK_BLOCKING == mode)
 465:Generated_Source\PSoC4/CyLFClk.c ****         {
 466:Generated_Source\PSoC4/CyLFClk.c ****             waitUntilCntr1Stops = cydelayFreqHz >> CY_SYS_CLK_SYS_CLK_DEVIDER;
 467:Generated_Source\PSoC4/CyLFClk.c ****             do
 468:Generated_Source\PSoC4/CyLFClk.c ****             {
 469:Generated_Source\PSoC4/CyLFClk.c ****                 /* Reload CNTR 1 count value for measuring cycle*/
 470:Generated_Source\PSoC4/CyLFClk.c ****                 CY_SYS_CNT_REG1_REG = cydelayFreqHz >> CY_SYS_CLK_SYS_CLK_DEVIDER; 
 471:Generated_Source\PSoC4/CyLFClk.c **** 
 472:Generated_Source\PSoC4/CyLFClk.c ****                 /* Wait until counter CNTR 1 will finish down-counting */
 473:Generated_Source\PSoC4/CyLFClk.c ****                 while (0u == (CY_SYS_CNT_REG1_REG & CY_SYS_CLK_ILO_CALIBR_COMPLETE_MASK))
 474:Generated_Source\PSoC4/CyLFClk.c ****                 {
 475:Generated_Source\PSoC4/CyLFClk.c ****                     waitUntilCntr1Stops--;
 476:Generated_Source\PSoC4/CyLFClk.c ****                     if (0u == waitUntilCntr1Stops)
 477:Generated_Source\PSoC4/CyLFClk.c ****                     {
 478:Generated_Source\PSoC4/CyLFClk.c ****                         break;
 479:Generated_Source\PSoC4/CyLFClk.c ****                     }
 480:Generated_Source\PSoC4/CyLFClk.c ****                 }
 481:Generated_Source\PSoC4/CyLFClk.c ****                 trimRunningStatus = CySysClkIloUpdateTrimReg(iloAccuracyInPPT);
 482:Generated_Source\PSoC4/CyLFClk.c ****                 timeOutClocks--;
 483:Generated_Source\PSoC4/CyLFClk.c **** 
 484:Generated_Source\PSoC4/CyLFClk.c ****             /* Untill ILO accuracy will be in range less than +/- 10% or timeout occurs*/
 485:Generated_Source\PSoC4/CyLFClk.c ****             } while((CYRET_SUCCESS != trimRunningStatus) && 
 486:Generated_Source\PSoC4/CyLFClk.c ****               (CYRET_INVALID_STATE != trimRunningStatus) && 
 487:Generated_Source\PSoC4/CyLFClk.c ****                                (0u != timeOutClocks));
 488:Generated_Source\PSoC4/CyLFClk.c **** 
 489:Generated_Source\PSoC4/CyLFClk.c ****             if (CYRET_SUCCESS == trimRunningStatus)
 490:Generated_Source\PSoC4/CyLFClk.c ****             {
 491:Generated_Source\PSoC4/CyLFClk.c ****                 returnStatus = CYRET_SUCCESS;
 492:Generated_Source\PSoC4/CyLFClk.c ****             }
 493:Generated_Source\PSoC4/CyLFClk.c ****             else
 494:Generated_Source\PSoC4/CyLFClk.c ****             {
 495:Generated_Source\PSoC4/CyLFClk.c ****                 if(0u == timeOutClocks)
 496:Generated_Source\PSoC4/CyLFClk.c ****                 {
 497:Generated_Source\PSoC4/CyLFClk.c ****                     trimRunningStatus = CY_SYS_CLK_TRIM_OR_COMP_FINISHED;
 498:Generated_Source\PSoC4/CyLFClk.c ****                     returnStatus = CYRET_TIMEOUT;
 499:Generated_Source\PSoC4/CyLFClk.c ****                 }
 500:Generated_Source\PSoC4/CyLFClk.c ****                 else
 501:Generated_Source\PSoC4/CyLFClk.c ****                 {
 502:Generated_Source\PSoC4/CyLFClk.c ****                     returnStatus = CYRET_INVALID_STATE;
 503:Generated_Source\PSoC4/CyLFClk.c ****                 }
 504:Generated_Source\PSoC4/CyLFClk.c ****             }
 505:Generated_Source\PSoC4/CyLFClk.c ****         }
 506:Generated_Source\PSoC4/CyLFClk.c ****         /* Non - blocking mode */
 507:Generated_Source\PSoC4/CyLFClk.c ****         else
 508:Generated_Source\PSoC4/CyLFClk.c ****         {
 509:Generated_Source\PSoC4/CyLFClk.c ****             if (CY_SYS_CLK_TRIM_OR_COMP_FINISHED != trimRunningStatus)
 510:Generated_Source\PSoC4/CyLFClk.c ****             {
 511:Generated_Source\PSoC4/CyLFClk.c ****                 /* Checking if the counter CNTR 1 finished down-counting */
 512:Generated_Source\PSoC4/CyLFClk.c ****                 if(0u != (CY_SYS_CNT_REG1_REG & CY_SYS_CLK_ILO_CALIBR_COMPLETE_MASK))
 513:Generated_Source\PSoC4/CyLFClk.c ****                 {
 514:Generated_Source\PSoC4/CyLFClk.c ****                     returnStatus = CySysClkIloUpdateTrimReg(iloAccuracyInPPT);
 515:Generated_Source\PSoC4/CyLFClk.c ****                     trimRunningStatus = CY_SYS_CLK_TRIM_OR_COMP_FINISHED;
 516:Generated_Source\PSoC4/CyLFClk.c ****                 }
ARM GAS  C:\Users\TIMCHE~1\AppData\Local\Temp\ccPS59ly.s 			page 17


 517:Generated_Source\PSoC4/CyLFClk.c ****                 else
 518:Generated_Source\PSoC4/CyLFClk.c ****                 {
 519:Generated_Source\PSoC4/CyLFClk.c ****                     returnStatus = CYRET_STARTED;
 520:Generated_Source\PSoC4/CyLFClk.c ****                 }
 521:Generated_Source\PSoC4/CyLFClk.c ****             }
 522:Generated_Source\PSoC4/CyLFClk.c ****             else
 523:Generated_Source\PSoC4/CyLFClk.c ****             {
 524:Generated_Source\PSoC4/CyLFClk.c ****                 /* Reload CNTR 1 count value for next measuring */
 525:Generated_Source\PSoC4/CyLFClk.c ****                 CY_SYS_CNT_REG1_REG = cydelayFreqHz >> CY_SYS_CLK_SYS_CLK_DEVIDER;
 526:Generated_Source\PSoC4/CyLFClk.c ****                 trimRunningStatus = CY_SYS_CLK_TRIM_OR_COMP_STARTED;
 527:Generated_Source\PSoC4/CyLFClk.c ****                 returnStatus = CYRET_STARTED;
 528:Generated_Source\PSoC4/CyLFClk.c ****             }
 529:Generated_Source\PSoC4/CyLFClk.c ****         }
 530:Generated_Source\PSoC4/CyLFClk.c ****     }
 531:Generated_Source\PSoC4/CyLFClk.c ****     else
 532:Generated_Source\PSoC4/CyLFClk.c ****     {
 533:Generated_Source\PSoC4/CyLFClk.c ****         returnStatus = CYRET_INVALID_STATE;
 534:Generated_Source\PSoC4/CyLFClk.c ****     }
 535:Generated_Source\PSoC4/CyLFClk.c **** 
 536:Generated_Source\PSoC4/CyLFClk.c ****     return (returnStatus);
 537:Generated_Source\PSoC4/CyLFClk.c **** }
 538:Generated_Source\PSoC4/CyLFClk.c **** 
 539:Generated_Source\PSoC4/CyLFClk.c **** 
 540:Generated_Source\PSoC4/CyLFClk.c **** /********************************************************************************
 541:Generated_Source\PSoC4/CyLFClk.c **** * Function Name: CySysClkIloUpdateTrimReg
 542:Generated_Source\PSoC4/CyLFClk.c **** *********************************************************************************
 543:Generated_Source\PSoC4/CyLFClk.c **** *
 544:Generated_Source\PSoC4/CyLFClk.c **** * \internal
 545:Generated_Source\PSoC4/CyLFClk.c **** * Function calculates ILO accuracy and check is error range is higher than 
 546:Generated_Source\PSoC4/CyLFClk.c **** * +/- 10%. If Measured frequency is higher than +/- 10% function updates 
 547:Generated_Source\PSoC4/CyLFClk.c **** * ILO Trim register.
 548:Generated_Source\PSoC4/CyLFClk.c **** *
 549:Generated_Source\PSoC4/CyLFClk.c **** * \param
 550:Generated_Source\PSoC4/CyLFClk.c **** * iloAccuracyInPPT Pointer to an integer in which the trimmed ILO 
 551:Generated_Source\PSoC4/CyLFClk.c **** * accuracy will be returned. The value returned in this pointer is not valid 
 552:Generated_Source\PSoC4/CyLFClk.c **** * until the function returns CYRET_SUCCESS. If ILO frequency error is lower 
 553:Generated_Source\PSoC4/CyLFClk.c **** * than +/- 10% then the value returned in this pointer will be updated.
 554:Generated_Source\PSoC4/CyLFClk.c **** *
 555:Generated_Source\PSoC4/CyLFClk.c **** * \return CYRET_SUCCESS - Indicates that ILO frequency error is lower than 
 556:Generated_Source\PSoC4/CyLFClk.c **** * +/- 10% and no actions are required.
 557:Generated_Source\PSoC4/CyLFClk.c **** *
 558:Generated_Source\PSoC4/CyLFClk.c **** * \return  CYRET_STARTED - Indicates that ILO frequency error is higher than 
 559:Generated_Source\PSoC4/CyLFClk.c **** * +/- 10% and ILO Trim register was updated.
 560:Generated_Source\PSoC4/CyLFClk.c **** *
 561:Generated_Source\PSoC4/CyLFClk.c **** * \return CYRET_INVALID_STATE - Indicates trimming was unsuccessful.
 562:Generated_Source\PSoC4/CyLFClk.c **** *
 563:Generated_Source\PSoC4/CyLFClk.c **** * Post #1 - To obtain 10% ILO accuracy the calculated accuracy should be equal 
 564:Generated_Source\PSoC4/CyLFClk.c **** * CY_SYS_CLK_ERROR_RANGE = 5.6%. Error value should take to account IMO error of 
 565:Generated_Source\PSoC4/CyLFClk.c **** * +/-2% (+/-0.64kHz), trim step of 2.36kHz (+/-1.18kHz) and error while ILO 
 566:Generated_Source\PSoC4/CyLFClk.c **** * frequency measuring.
 567:Generated_Source\PSoC4/CyLFClk.c **** *
 568:Generated_Source\PSoC4/CyLFClk.c **** * \endinternal
 569:Generated_Source\PSoC4/CyLFClk.c **** *
 570:Generated_Source\PSoC4/CyLFClk.c **** **********************************************************************************/
 571:Generated_Source\PSoC4/CyLFClk.c **** cystatus CySysClkIloUpdateTrimReg(int32* iloAccuracyInPPT)
 572:Generated_Source\PSoC4/CyLFClk.c **** {
 573:Generated_Source\PSoC4/CyLFClk.c ****     uint32 measuredIloFreq;
ARM GAS  C:\Users\TIMCHE~1\AppData\Local\Temp\ccPS59ly.s 			page 18


 574:Generated_Source\PSoC4/CyLFClk.c ****     uint32 currentIloTrimValue;
 575:Generated_Source\PSoC4/CyLFClk.c ****     int32 iloAccuracyValue;
 576:Generated_Source\PSoC4/CyLFClk.c ****     int32 trimStep;
 577:Generated_Source\PSoC4/CyLFClk.c ****     cystatus errorRangeStatus;
 578:Generated_Source\PSoC4/CyLFClk.c **** 
 579:Generated_Source\PSoC4/CyLFClk.c ****     if(0u != CY_SYS_CNT_REG2_REG)
 580:Generated_Source\PSoC4/CyLFClk.c ****     {
 581:Generated_Source\PSoC4/CyLFClk.c ****         measuredIloFreq = (CY_SYS_CNT_REG2_REG * cydelayFreqHz) / (cydelayFreqHz >> CY_SYS_CLK_SYS_
 582:Generated_Source\PSoC4/CyLFClk.c **** 
 583:Generated_Source\PSoC4/CyLFClk.c ****         /* Calculate value of error in PPT according to formula - 
 584:Generated_Source\PSoC4/CyLFClk.c ****         *       ((measuredIlofrequency - iloDesired freaquency) * 1000 / iloDesired freaquency) */
 585:Generated_Source\PSoC4/CyLFClk.c ****         iloAccuracyValue = (((int32) measuredIloFreq - (int32) CY_SYS_CLK_ILO_DESIRED_FREQ_HZ) * \
 586:Generated_Source\PSoC4/CyLFClk.c ****                             ((int32) CY_SYS_CLK_PERTHOUSAND)) / ((int32) CY_SYS_CLK_ILO_DESIRED_FRE
 587:Generated_Source\PSoC4/CyLFClk.c **** 
 588:Generated_Source\PSoC4/CyLFClk.c ****         /* Check if ILO accuracy is more than +/- CY_SYS_CLK_ERROR_RANGE. See post #1 of API descri
 589:Generated_Source\PSoC4/CyLFClk.c ****         if(CY_SYS_CLK_ERROR_RANGE < (uint32) (CY_SYS_CLK_ABS_MACRO(iloAccuracyValue)))
 590:Generated_Source\PSoC4/CyLFClk.c ****         {
 591:Generated_Source\PSoC4/CyLFClk.c ****             if (0 < iloAccuracyValue)
 592:Generated_Source\PSoC4/CyLFClk.c ****             {
 593:Generated_Source\PSoC4/CyLFClk.c ****                 trimStep = (int32) (((iloAccuracyValue * (int32) CY_SYS_CLK_ERROR_COEF) + 
 594:Generated_Source\PSoC4/CyLFClk.c ****                 CY_SYS_CLK_HALF_OF_STEP) / CY_SYS_CLK_ERROR_STEP);
 595:Generated_Source\PSoC4/CyLFClk.c ****             }
 596:Generated_Source\PSoC4/CyLFClk.c ****             else
 597:Generated_Source\PSoC4/CyLFClk.c ****             {
 598:Generated_Source\PSoC4/CyLFClk.c ****                 trimStep = (int32) (((iloAccuracyValue * (int32) CY_SYS_CLK_ERROR_COEF) - 
 599:Generated_Source\PSoC4/CyLFClk.c ****                 CY_SYS_CLK_HALF_OF_STEP) / CY_SYS_CLK_ERROR_STEP);
 600:Generated_Source\PSoC4/CyLFClk.c ****             }
 601:Generated_Source\PSoC4/CyLFClk.c ****             currentIloTrimValue = (CY_SYS_CLK_ILO_TRIM_REG & CY_SYS_CLK_ILO_TRIM_MASK);
 602:Generated_Source\PSoC4/CyLFClk.c ****             trimStep = (int32) currentIloTrimValue - trimStep;
 603:Generated_Source\PSoC4/CyLFClk.c **** 
 604:Generated_Source\PSoC4/CyLFClk.c ****             if(trimStep > CY_SYS_CLK_FOURBITS_MAX)
 605:Generated_Source\PSoC4/CyLFClk.c ****             {
 606:Generated_Source\PSoC4/CyLFClk.c ****                 trimStep = CY_SYS_CLK_FOURBITS_MAX;
 607:Generated_Source\PSoC4/CyLFClk.c ****             }
 608:Generated_Source\PSoC4/CyLFClk.c ****             if(trimStep < 0)
 609:Generated_Source\PSoC4/CyLFClk.c ****             {
 610:Generated_Source\PSoC4/CyLFClk.c ****                 trimStep = 0;
 611:Generated_Source\PSoC4/CyLFClk.c ****             }
 612:Generated_Source\PSoC4/CyLFClk.c ****             CY_SYS_CLK_ILO_TRIM_REG = (CY_SYS_CLK_ILO_TRIM_REG & (uint32)(~CY_SYS_CLK_ILO_TRIM_MASK
 613:Generated_Source\PSoC4/CyLFClk.c ****                                                                  ((uint32) trimStep);
 614:Generated_Source\PSoC4/CyLFClk.c ****             errorRangeStatus = CYRET_STARTED;
 615:Generated_Source\PSoC4/CyLFClk.c ****         } /* Else return success because error is in +/- 10% range*/
 616:Generated_Source\PSoC4/CyLFClk.c ****         else
 617:Generated_Source\PSoC4/CyLFClk.c ****         {
 618:Generated_Source\PSoC4/CyLFClk.c ****             /* Write trimmed ILO accuracy through pointer. */
 619:Generated_Source\PSoC4/CyLFClk.c ****             *iloAccuracyInPPT = iloAccuracyValue;
 620:Generated_Source\PSoC4/CyLFClk.c ****             errorRangeStatus = CYRET_SUCCESS;
 621:Generated_Source\PSoC4/CyLFClk.c ****         }
 622:Generated_Source\PSoC4/CyLFClk.c ****     }
 623:Generated_Source\PSoC4/CyLFClk.c ****     else
 624:Generated_Source\PSoC4/CyLFClk.c ****     {
 625:Generated_Source\PSoC4/CyLFClk.c ****         errorRangeStatus = CYRET_INVALID_STATE;
 626:Generated_Source\PSoC4/CyLFClk.c ****     }
 627:Generated_Source\PSoC4/CyLFClk.c **** return (errorRangeStatus);
 628:Generated_Source\PSoC4/CyLFClk.c **** }
 629:Generated_Source\PSoC4/CyLFClk.c **** 
 630:Generated_Source\PSoC4/CyLFClk.c **** 
ARM GAS  C:\Users\TIMCHE~1\AppData\Local\Temp\ccPS59ly.s 			page 19


 631:Generated_Source\PSoC4/CyLFClk.c **** /*******************************************************************************
 632:Generated_Source\PSoC4/CyLFClk.c **** * Function Name: CySysClkIloRestoreFactoryTrim
 633:Generated_Source\PSoC4/CyLFClk.c **** ****************************************************************************//**
 634:Generated_Source\PSoC4/CyLFClk.c **** * \brief
 635:Generated_Source\PSoC4/CyLFClk.c **** * Restores the ILO Trim Register to factory value.
 636:Generated_Source\PSoC4/CyLFClk.c **** *
 637:Generated_Source\PSoC4/CyLFClk.c **** * The CySysClkIloStartMeasurement() API should be called prior to 
 638:Generated_Source\PSoC4/CyLFClk.c **** * calling this API. Otherwise CYRET_UNKNOWN will be returned.
 639:Generated_Source\PSoC4/CyLFClk.c **** *
 640:Generated_Source\PSoC4/CyLFClk.c **** * Available for all PSoC 4 devices except for PSoC 4000 / PSoC 4100 / PSoC 4200 
 641:Generated_Source\PSoC4/CyLFClk.c **** * / PSoC 4000S / PSoC 4100S / PSoC Analog Coprocessor devices.
 642:Generated_Source\PSoC4/CyLFClk.c **** *
 643:Generated_Source\PSoC4/CyLFClk.c **** * \return CYRET_SUCCESS - Operation was successful. 
 644:Generated_Source\PSoC4/CyLFClk.c **** * \return CYRET_UNKNOWN - CySysClkIloStartMeasurement() was not called 
 645:Generated_Source\PSoC4/CyLFClk.c **** * before this API. Hence the trim value cannot be updated.
 646:Generated_Source\PSoC4/CyLFClk.c **** *
 647:Generated_Source\PSoC4/CyLFClk.c **** ******************************************************************************/
 648:Generated_Source\PSoC4/CyLFClk.c **** cystatus CySysClkIloRestoreFactoryTrim(void)
 649:Generated_Source\PSoC4/CyLFClk.c **** {
 650:Generated_Source\PSoC4/CyLFClk.c ****     cystatus returnStatus = CYRET_SUCCESS;
 651:Generated_Source\PSoC4/CyLFClk.c **** 
 652:Generated_Source\PSoC4/CyLFClk.c ****     /* Check was defaultIloTrimRegValue modified in CySysClkIloStartMeasurement */
 653:Generated_Source\PSoC4/CyLFClk.c ****     if(CY_SYS_CLK_ILO_TRIM_DEFAULT_VALUE != defaultIloTrimRegValue)
 654:Generated_Source\PSoC4/CyLFClk.c ****         {
 655:Generated_Source\PSoC4/CyLFClk.c ****             CY_SYS_CLK_ILO_TRIM_REG = ((CY_SYS_CLK_ILO_TRIM_REG & (uint32)(~CY_SYS_CLK_ILO_TRIM_MAS
 656:Generated_Source\PSoC4/CyLFClk.c ****                                        (defaultIloTrimRegValue & CY_SYS_CLK_ILO_TRIM_MASK));
 657:Generated_Source\PSoC4/CyLFClk.c ****         }
 658:Generated_Source\PSoC4/CyLFClk.c ****         else
 659:Generated_Source\PSoC4/CyLFClk.c ****         {
 660:Generated_Source\PSoC4/CyLFClk.c ****             returnStatus = CYRET_UNKNOWN;
 661:Generated_Source\PSoC4/CyLFClk.c ****         }
 662:Generated_Source\PSoC4/CyLFClk.c **** 
 663:Generated_Source\PSoC4/CyLFClk.c ****         return (returnStatus);
 664:Generated_Source\PSoC4/CyLFClk.c **** }
 665:Generated_Source\PSoC4/CyLFClk.c **** #endif /* (CY_IP_SRSSV2 && (!(CY_PSOC4_4100 || CY_PSOC4_4200))) */
 666:Generated_Source\PSoC4/CyLFClk.c **** 
 667:Generated_Source\PSoC4/CyLFClk.c **** 
 668:Generated_Source\PSoC4/CyLFClk.c **** #if (CY_IP_WCO && CY_IP_SRSSV2)
 669:Generated_Source\PSoC4/CyLFClk.c **** /*******************************************************************************
 670:Generated_Source\PSoC4/CyLFClk.c **** * Function Name: CySysClkGetLfclkSource
 671:Generated_Source\PSoC4/CyLFClk.c **** ********************************************************************************
 672:Generated_Source\PSoC4/CyLFClk.c **** *
 673:Generated_Source\PSoC4/CyLFClk.c **** * \internal
 674:Generated_Source\PSoC4/CyLFClk.c **** *  Gets the clock source for the LFCLK clock.
 675:Generated_Source\PSoC4/CyLFClk.c **** *  The function is applicable only for PSoC 4100 BLE / PSoC 4200 BLE / PSoC 4100M /
 676:Generated_Source\PSoC4/CyLFClk.c **** *  PSoC 4200M / PSoC 4200L.
 677:Generated_Source\PSoC4/CyLFClk.c **** *
 678:Generated_Source\PSoC4/CyLFClk.c **** * \return The LFCLK source:
 679:Generated_Source\PSoC4/CyLFClk.c **** * CY_SYS_CLK_LFCLK_SRC_ILO Internal Low Frequency (32 kHz) Oscillator (ILO)
 680:Generated_Source\PSoC4/CyLFClk.c **** * CY_SYS_CLK_LFCLK_SRC_WCO Low Frequency Watch Crystal Oscillator (WCO)
 681:Generated_Source\PSoC4/CyLFClk.c **** *
 682:Generated_Source\PSoC4/CyLFClk.c **** * \endinternal
 683:Generated_Source\PSoC4/CyLFClk.c **** *
 684:Generated_Source\PSoC4/CyLFClk.c **** *******************************************************************************/
 685:Generated_Source\PSoC4/CyLFClk.c ****     static uint32 CySysClkGetLfclkSource(void)
 686:Generated_Source\PSoC4/CyLFClk.c ****     {
 687:Generated_Source\PSoC4/CyLFClk.c ****         uint32 lfclkSource;
ARM GAS  C:\Users\TIMCHE~1\AppData\Local\Temp\ccPS59ly.s 			page 20


 688:Generated_Source\PSoC4/CyLFClk.c ****         lfclkSource = CY_SYS_WDT_CONFIG_REG & CY_SYS_CLK_LFCLK_SEL_MASK;
 689:Generated_Source\PSoC4/CyLFClk.c ****         return (lfclkSource);
 690:Generated_Source\PSoC4/CyLFClk.c ****     }
 691:Generated_Source\PSoC4/CyLFClk.c **** 
 692:Generated_Source\PSoC4/CyLFClk.c ****     
 693:Generated_Source\PSoC4/CyLFClk.c **** /*******************************************************************************
 694:Generated_Source\PSoC4/CyLFClk.c **** * Function Name: CySysClkSetLfclkSource
 695:Generated_Source\PSoC4/CyLFClk.c **** ****************************************************************************//**
 696:Generated_Source\PSoC4/CyLFClk.c **** * \brief
 697:Generated_Source\PSoC4/CyLFClk.c **** *  Sets the clock source for the LFCLK clock.
 698:Generated_Source\PSoC4/CyLFClk.c **** *
 699:Generated_Source\PSoC4/CyLFClk.c **** * The switch between LFCLK sources must be done between the positive edges of
 700:Generated_Source\PSoC4/CyLFClk.c **** * LFCLK, because the glitch risk is around the LFCLK positive edge. To ensure
 701:Generated_Source\PSoC4/CyLFClk.c **** * that the switch can be done safely, the WDT counter value is read until it
 702:Generated_Source\PSoC4/CyLFClk.c **** * changes.
 703:Generated_Source\PSoC4/CyLFClk.c **** *
 704:Generated_Source\PSoC4/CyLFClk.c **** * That means that the positive edge just finished and the switch is performed.
 705:Generated_Source\PSoC4/CyLFClk.c **** * The enabled WDT counter is used for that purpose. If no counters are enabled,
 706:Generated_Source\PSoC4/CyLFClk.c **** * counter 0 is enabled. And after the LFCLK source is switched, counter 0
 707:Generated_Source\PSoC4/CyLFClk.c **** * configuration is restored.
 708:Generated_Source\PSoC4/CyLFClk.c **** *
 709:Generated_Source\PSoC4/CyLFClk.c **** *  The function is applicable only for devices with more than one source for 
 710:Generated_Source\PSoC4/CyLFClk.c **** * LFCLK - PSoC 4100 BLE / PSoC 4200 BLE / PRoC BLE / PSoC 4100M / PSoC 4200M / 
 711:Generated_Source\PSoC4/CyLFClk.c **** * PSoC 4200L.
 712:Generated_Source\PSoC4/CyLFClk.c **** *
 713:Generated_Source\PSoC4/CyLFClk.c **** * \note For PSoC 4000S / PSoC 4100S / PSoC Analog Coprocessor devices LFCLK can
 714:Generated_Source\PSoC4/CyLFClk.c **** * only be sourced from ILO even though WCO is available.
 715:Generated_Source\PSoC4/CyLFClk.c **** *
 716:Generated_Source\PSoC4/CyLFClk.c **** * \param
 717:Generated_Source\PSoC4/CyLFClk.c **** * source
 718:Generated_Source\PSoC4/CyLFClk.c **** * CY_SYS_CLK_LFCLK_SRC_ILO - Internal Low Frequency (32 kHz) 
 719:Generated_Source\PSoC4/CyLFClk.c **** * Oscillator (ILO).<br>
 720:Generated_Source\PSoC4/CyLFClk.c **** * CY_SYS_CLK_LFCLK_SRC_WCO - Low Frequency Watch Crystal Oscillator (WCO).
 721:Generated_Source\PSoC4/CyLFClk.c **** *
 722:Generated_Source\PSoC4/CyLFClk.c **** * \details
 723:Generated_Source\PSoC4/CyLFClk.c **** * This function has no effect if WDT is locked (CySysWdtLock() is called). 
 724:Generated_Source\PSoC4/CyLFClk.c **** * Call CySysWdtUnlock() to unlock WDT.
 725:Generated_Source\PSoC4/CyLFClk.c **** *
 726:Generated_Source\PSoC4/CyLFClk.c **** * Both the current source and the new source must be running and stable before
 727:Generated_Source\PSoC4/CyLFClk.c **** * calling this function.
 728:Generated_Source\PSoC4/CyLFClk.c **** *
 729:Generated_Source\PSoC4/CyLFClk.c **** * Changing the LFCLK clock source may change the LFCLK clock frequency and
 730:Generated_Source\PSoC4/CyLFClk.c **** * affect the functionality that uses this clock. For example, watchdog timer
 731:Generated_Source\PSoC4/CyLFClk.c **** * "uses this clock" or "this clock uses" (WDT) is clocked by LFCLK.
 732:Generated_Source\PSoC4/CyLFClk.c **** *
 733:Generated_Source\PSoC4/CyLFClk.c **** *******************************************************************************/
 734:Generated_Source\PSoC4/CyLFClk.c ****     void CySysClkSetLfclkSource(uint32 source)
 735:Generated_Source\PSoC4/CyLFClk.c ****     {
 736:Generated_Source\PSoC4/CyLFClk.c ****         uint8  interruptState;
 737:Generated_Source\PSoC4/CyLFClk.c **** 
 738:Generated_Source\PSoC4/CyLFClk.c ****         if (CySysClkGetLfclkSource() != source)
 739:Generated_Source\PSoC4/CyLFClk.c ****         {
 740:Generated_Source\PSoC4/CyLFClk.c ****             interruptState = CyEnterCriticalSection();
 741:Generated_Source\PSoC4/CyLFClk.c ****             CySysClkLfclkPosedgeCatch();
 742:Generated_Source\PSoC4/CyLFClk.c ****             CY_SYS_WDT_CONFIG_REG = (CY_SYS_WDT_CONFIG_REG & (uint32)(~CY_SYS_CLK_LFCLK_SEL_MASK)) 
 743:Generated_Source\PSoC4/CyLFClk.c ****                                     (source & CY_SYS_CLK_LFCLK_SEL_MASK);
 744:Generated_Source\PSoC4/CyLFClk.c ****             CySysClkLfclkPosedgeRestore();
ARM GAS  C:\Users\TIMCHE~1\AppData\Local\Temp\ccPS59ly.s 			page 21


 745:Generated_Source\PSoC4/CyLFClk.c ****             CyExitCriticalSection(interruptState);
 746:Generated_Source\PSoC4/CyLFClk.c ****         }
 747:Generated_Source\PSoC4/CyLFClk.c ****     }
 748:Generated_Source\PSoC4/CyLFClk.c **** #endif /* (CY_IP_WCO && CY_IP_SRSSV2) */
 749:Generated_Source\PSoC4/CyLFClk.c **** 
 750:Generated_Source\PSoC4/CyLFClk.c **** 
 751:Generated_Source\PSoC4/CyLFClk.c **** #if (CY_IP_WCO)
 752:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
 753:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysClkWcoStart
 754:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
 755:Generated_Source\PSoC4/CyLFClk.c ****     * \brief
 756:Generated_Source\PSoC4/CyLFClk.c ****     *  Enables Watch Crystal Oscillator (WCO).
 757:Generated_Source\PSoC4/CyLFClk.c ****     * 
 758:Generated_Source\PSoC4/CyLFClk.c ****     * This API enables WCO which is used as a source for LFCLK. Similar to ILO, 
 759:Generated_Source\PSoC4/CyLFClk.c ****     * WCO is also available in all modes except Hibernate and Stop modes.
 760:Generated_Source\PSoC4/CyLFClk.c ****     * \note In PSoC 4000S / PSoC 4100S / PSoC Analog Coprocessor devices
 761:Generated_Source\PSoC4/CyLFClk.c ****     * WCO cannot be a source for the LFCLK. 
 762:Generated_Source\PSoC4/CyLFClk.c ****     *
 763:Generated_Source\PSoC4/CyLFClk.c ****     *  WCO is always enabled in High Power Mode (HPM). Refer to the device
 764:Generated_Source\PSoC4/CyLFClk.c ****     *  datasheet for the  WCO startup time. Once WCO becomes stable it can be
 765:Generated_Source\PSoC4/CyLFClk.c ****     *  switched to Low Power Mode (LPM). Note that oscillator can be unstable
 766:Generated_Source\PSoC4/CyLFClk.c ****     *  during a switch and hence its output should not be used at that moment.
 767:Generated_Source\PSoC4/CyLFClk.c ****     *
 768:Generated_Source\PSoC4/CyLFClk.c ****     *  The CySysClkWcoSetPowerMode() function configures the WCO power mode.
 769:Generated_Source\PSoC4/CyLFClk.c ****     *
 770:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
 771:Generated_Source\PSoC4/CyLFClk.c ****     void CySysClkWcoStart(void)
 772:Generated_Source\PSoC4/CyLFClk.c ****     {
 773:Generated_Source\PSoC4/CyLFClk.c ****         CySysClkWcoSetHighPowerMode();
 774:Generated_Source\PSoC4/CyLFClk.c ****         CY_SYS_CLK_WCO_CONFIG_REG |= CY_SYS_CLK_WCO_CONFIG_LPM_ENABLE;
 775:Generated_Source\PSoC4/CyLFClk.c ****     }
 776:Generated_Source\PSoC4/CyLFClk.c **** 
 777:Generated_Source\PSoC4/CyLFClk.c **** 
 778:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
 779:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysClkWcoStop
 780:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
 781:Generated_Source\PSoC4/CyLFClk.c ****     * \brief
 782:Generated_Source\PSoC4/CyLFClk.c ****     * Disables the 32 KHz Crystal Oscillator.
 783:Generated_Source\PSoC4/CyLFClk.c ****     *
 784:Generated_Source\PSoC4/CyLFClk.c ****     * API switch of WCO.
 785:Generated_Source\PSoC4/CyLFClk.c ****     * \note PSoC 4100S / PSoC Analog Coprocessor: WCO is required for DeepSleep 
 786:Generated_Source\PSoC4/CyLFClk.c ****     * Timer's operation.
 787:Generated_Source\PSoC4/CyLFClk.c ****     *
 788:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
 789:Generated_Source\PSoC4/CyLFClk.c ****     void  CySysClkWcoStop(void)
 790:Generated_Source\PSoC4/CyLFClk.c ****     {
 791:Generated_Source\PSoC4/CyLFClk.c ****         #if (CY_IP_SRSSV2)
 792:Generated_Source\PSoC4/CyLFClk.c ****             uint8  interruptState;
 793:Generated_Source\PSoC4/CyLFClk.c ****         #endif /* (CY_IP_SRSSV2) */
 794:Generated_Source\PSoC4/CyLFClk.c **** 
 795:Generated_Source\PSoC4/CyLFClk.c ****         if (0u != CySysClkWcoEnabled())
 796:Generated_Source\PSoC4/CyLFClk.c ****         {
 797:Generated_Source\PSoC4/CyLFClk.c ****             #if (CY_IP_SRSSV2)
 798:Generated_Source\PSoC4/CyLFClk.c ****                 if (CY_SYS_CLK_LFCLK_SRC_WCO == CySysClkGetLfclkSource())
 799:Generated_Source\PSoC4/CyLFClk.c ****                 {
 800:Generated_Source\PSoC4/CyLFClk.c ****                     interruptState = CyEnterCriticalSection();
 801:Generated_Source\PSoC4/CyLFClk.c ****                     CySysClkLfclkPosedgeCatch();
ARM GAS  C:\Users\TIMCHE~1\AppData\Local\Temp\ccPS59ly.s 			page 22


 802:Generated_Source\PSoC4/CyLFClk.c ****                     CY_SYS_CLK_WCO_CONFIG_REG &= (uint32) ~CY_SYS_CLK_WCO_CONFIG_LPM_ENABLE;
 803:Generated_Source\PSoC4/CyLFClk.c ****                     CySysClkLfclkPosedgeRestore();
 804:Generated_Source\PSoC4/CyLFClk.c ****                     CyExitCriticalSection(interruptState);
 805:Generated_Source\PSoC4/CyLFClk.c ****                 }
 806:Generated_Source\PSoC4/CyLFClk.c ****                 else /* Safe to disable - shortened pulse does not impact peripheral */
 807:Generated_Source\PSoC4/CyLFClk.c ****             #endif /* (CY_IP_SRSSV2) */
 808:Generated_Source\PSoC4/CyLFClk.c ****             {
 809:Generated_Source\PSoC4/CyLFClk.c ****                 CY_SYS_CLK_WCO_CONFIG_REG &= (uint32) ~CY_SYS_CLK_WCO_CONFIG_LPM_ENABLE;
 810:Generated_Source\PSoC4/CyLFClk.c ****             }
 811:Generated_Source\PSoC4/CyLFClk.c ****         } /* Otherwise do nothing. WCO configuration cannot be changed. */
 812:Generated_Source\PSoC4/CyLFClk.c ****     }
 813:Generated_Source\PSoC4/CyLFClk.c **** 
 814:Generated_Source\PSoC4/CyLFClk.c **** 
 815:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
 816:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysClkWcoEnabled
 817:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
 818:Generated_Source\PSoC4/CyLFClk.c ****     * \internal Reports the WCO enable state.
 819:Generated_Source\PSoC4/CyLFClk.c ****     *
 820:Generated_Source\PSoC4/CyLFClk.c ****     * \return 1 if WCO is enabled
 821:Generated_Source\PSoC4/CyLFClk.c ****     * \return 0 if WCO is disabled.
 822:Generated_Source\PSoC4/CyLFClk.c ****     * \endinternal
 823:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
 824:Generated_Source\PSoC4/CyLFClk.c ****     uint32 CySysClkWcoEnabled(void)
 825:Generated_Source\PSoC4/CyLFClk.c ****     {
 826:Generated_Source\PSoC4/CyLFClk.c ****         return ((0u != (CY_SYS_CLK_WCO_CONFIG_REG & (uint32)(CY_SYS_CLK_WCO_CONFIG_LPM_ENABLE))) ?
 827:Generated_Source\PSoC4/CyLFClk.c ****                 (uint32) 1u :
 828:Generated_Source\PSoC4/CyLFClk.c ****                 (uint32) 0u);
 829:Generated_Source\PSoC4/CyLFClk.c ****     }
 830:Generated_Source\PSoC4/CyLFClk.c **** 
 831:Generated_Source\PSoC4/CyLFClk.c **** 
 832:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
 833:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysClkWcoSetPowerMode
 834:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
 835:Generated_Source\PSoC4/CyLFClk.c ****     * \brief
 836:Generated_Source\PSoC4/CyLFClk.c ****     * Sets the power mode for the 32 KHz WCO.
 837:Generated_Source\PSoC4/CyLFClk.c ****     *
 838:Generated_Source\PSoC4/CyLFClk.c ****     * By default (if this function is not called), the WCO is in High power mode 
 839:Generated_Source\PSoC4/CyLFClk.c ****     * during Active and device's low power modes
 840:Generated_Source\PSoC4/CyLFClk.c ****     *
 841:Generated_Source\PSoC4/CyLFClk.c ****     * \param mode
 842:Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_CLK_WCO_HPM - The High Power mode.<br>
 843:Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_CLK_WCO_LPM - The Low Power mode.
 844:Generated_Source\PSoC4/CyLFClk.c ****     *
 845:Generated_Source\PSoC4/CyLFClk.c ****     * \return A previous power mode. The same as the parameters.
 846:Generated_Source\PSoC4/CyLFClk.c ****     *
 847:Generated_Source\PSoC4/CyLFClk.c ****     * \note
 848:Generated_Source\PSoC4/CyLFClk.c ****     * The WCO Low Power mode is applicable for PSoC 4100 BLE / PSoC 4200 BLE devices.
 849:Generated_Source\PSoC4/CyLFClk.c ****     *
 850:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
 851:Generated_Source\PSoC4/CyLFClk.c ****     uint32 CySysClkWcoSetPowerMode(uint32 mode)
 852:Generated_Source\PSoC4/CyLFClk.c ****     {
 853:Generated_Source\PSoC4/CyLFClk.c ****         uint32 powerModeStatus;
 854:Generated_Source\PSoC4/CyLFClk.c **** 
 855:Generated_Source\PSoC4/CyLFClk.c ****         powerModeStatus = CY_SYS_CLK_WCO_CONFIG_REG & CY_SYS_CLK_WCO_CONFIG_LPM_EN;
 856:Generated_Source\PSoC4/CyLFClk.c **** 
 857:Generated_Source\PSoC4/CyLFClk.c ****         switch(mode)
 858:Generated_Source\PSoC4/CyLFClk.c ****         {
ARM GAS  C:\Users\TIMCHE~1\AppData\Local\Temp\ccPS59ly.s 			page 23


 859:Generated_Source\PSoC4/CyLFClk.c ****         case CY_SYS_CLK_WCO_HPM:
 860:Generated_Source\PSoC4/CyLFClk.c ****                 CySysClkWcoSetHighPowerMode();
 861:Generated_Source\PSoC4/CyLFClk.c ****             break;
 862:Generated_Source\PSoC4/CyLFClk.c **** 
 863:Generated_Source\PSoC4/CyLFClk.c ****         #if(CY_PSOC4_4100BL || CY_PSOC4_4200BL)
 864:Generated_Source\PSoC4/CyLFClk.c ****             case CY_SYS_CLK_WCO_LPM:
 865:Generated_Source\PSoC4/CyLFClk.c ****                     CySysClkWcoSetLowPowerMode();
 866:Generated_Source\PSoC4/CyLFClk.c ****                 break;
 867:Generated_Source\PSoC4/CyLFClk.c ****         #endif /* (CY_PSOC4_4100BL || CY_PSOC4_4200BL) */
 868:Generated_Source\PSoC4/CyLFClk.c **** 
 869:Generated_Source\PSoC4/CyLFClk.c ****         default:
 870:Generated_Source\PSoC4/CyLFClk.c ****             CYASSERT(0u != 0u);
 871:Generated_Source\PSoC4/CyLFClk.c ****             break;
 872:Generated_Source\PSoC4/CyLFClk.c ****         }
 873:Generated_Source\PSoC4/CyLFClk.c **** 
 874:Generated_Source\PSoC4/CyLFClk.c ****         return (powerModeStatus);
 875:Generated_Source\PSoC4/CyLFClk.c ****     }
 876:Generated_Source\PSoC4/CyLFClk.c **** 
 877:Generated_Source\PSoC4/CyLFClk.c **** 
 878:Generated_Source\PSoC4/CyLFClk.c **** /*******************************************************************************
 879:Generated_Source\PSoC4/CyLFClk.c **** * Function Name: CySysClkWcoClockOutSelect
 880:Generated_Source\PSoC4/CyLFClk.c **** ****************************************************************************//**
 881:Generated_Source\PSoC4/CyLFClk.c **** * \brief
 882:Generated_Source\PSoC4/CyLFClk.c **** * Selects the WCO block output source.
 883:Generated_Source\PSoC4/CyLFClk.c **** *
 884:Generated_Source\PSoC4/CyLFClk.c **** * In addition to generating 32.768 kHz clock from external crystals, WCO 
 885:Generated_Source\PSoC4/CyLFClk.c **** * can be sourced by external clock source using wco_out pin. The API help to
 886:Generated_Source\PSoC4/CyLFClk.c **** * lets you select between the sources: External crystal or external pin.
 887:Generated_Source\PSoC4/CyLFClk.c **** *
 888:Generated_Source\PSoC4/CyLFClk.c **** * If you want to use external pin to drive WCO the next procedure is required:
 889:Generated_Source\PSoC4/CyLFClk.c **** * <br> 1) Disable the WCO.
 890:Generated_Source\PSoC4/CyLFClk.c **** * <br> 2) Drive the wco_out pin to an external signal source.
 891:Generated_Source\PSoC4/CyLFClk.c **** * <br> 3) Call CySysClkWcoClockOutSelect(CY_SYS_CLK_WCO_SEL_PIN).
 892:Generated_Source\PSoC4/CyLFClk.c **** * <br> 4) Enable the WCO and wait for 15 us before clocking the XO pad at the high 
 893:Generated_Source\PSoC4/CyLFClk.c **** * potential. Let's assume you are using the 1.6v clock amplitude, then the
 894:Generated_Source\PSoC4/CyLFClk.c **** * sequence would start at 1.6v, then 0v, then 1.6v etc at a chosen frequency.
 895:Generated_Source\PSoC4/CyLFClk.c **** *
 896:Generated_Source\PSoC4/CyLFClk.c **** * If you want to use WCO after using an external pin source:
 897:Generated_Source\PSoC4/CyLFClk.c **** * <br> 1) Disable the WCO.
 898:Generated_Source\PSoC4/CyLFClk.c **** * <br> 2) Drive off wco_out pin with external signal source.
 899:Generated_Source\PSoC4/CyLFClk.c **** * <br> 3) Call CySysClkWcoClockOutSelect(CY_SYS_CLK_WCO_SEL_CRYSTAL).
 900:Generated_Source\PSoC4/CyLFClk.c **** * <br> 4) Enable the WCO.
 901:Generated_Source\PSoC4/CyLFClk.c **** *
 902:Generated_Source\PSoC4/CyLFClk.c **** * \warning 
 903:Generated_Source\PSoC4/CyLFClk.c **** * Do not use the oscillator output clock prior to a 15uS delay in your system.
 904:Generated_Source\PSoC4/CyLFClk.c **** * There are no limitations on the external clock frequency.
 905:Generated_Source\PSoC4/CyLFClk.c **** * \warning 
 906:Generated_Source\PSoC4/CyLFClk.c **** * When external clock source was selected to drive WCO block the IMO can be 
 907:Generated_Source\PSoC4/CyLFClk.c **** * trimmed only when external clock source period is equal to WCO external
 908:Generated_Source\PSoC4/CyLFClk.c **** * crystal period. Also external clock source accuracy should be higher 
 909:Generated_Source\PSoC4/CyLFClk.c **** * or equal to WCO external crystal accuracy.
 910:Generated_Source\PSoC4/CyLFClk.c **** *
 911:Generated_Source\PSoC4/CyLFClk.c **** * \param clockSel
 912:Generated_Source\PSoC4/CyLFClk.c **** * CY_SYS_CLK_WCO_SEL_CRYSTAL - Selects External crystal as clock 
 913:Generated_Source\PSoC4/CyLFClk.c **** * source of WCO.<br>
 914:Generated_Source\PSoC4/CyLFClk.c **** * CY_SYS_CLK_WCO_SEL_PIN - Selects External clock input on wco_in pin as 
 915:Generated_Source\PSoC4/CyLFClk.c **** * clock source of WCO.
ARM GAS  C:\Users\TIMCHE~1\AppData\Local\Temp\ccPS59ly.s 			page 24


 916:Generated_Source\PSoC4/CyLFClk.c **** *
 917:Generated_Source\PSoC4/CyLFClk.c **** *******************************************************************************/
 918:Generated_Source\PSoC4/CyLFClk.c **** void CySysClkWcoClockOutSelect(uint32 clockSel)
 919:Generated_Source\PSoC4/CyLFClk.c ****     {
 920:Generated_Source\PSoC4/CyLFClk.c ****         if (0u != CySysClkWcoEnabled())
 921:Generated_Source\PSoC4/CyLFClk.c ****         {
 922:Generated_Source\PSoC4/CyLFClk.c ****             if (1u >= clockSel)
 923:Generated_Source\PSoC4/CyLFClk.c ****             {
 924:Generated_Source\PSoC4/CyLFClk.c ****                 CY_SYS_CLK_WCO_CONFIG_REG = (CY_SYS_CLK_WCO_CONFIG_REG & (uint32)(~CY_SYS_CLK_WCO_S
 925:Generated_Source\PSoC4/CyLFClk.c ****                                         (clockSel << CY_SYS_CLK_WCO_SELECT_PIN_OFFSET);
 926:Generated_Source\PSoC4/CyLFClk.c ****             }
 927:Generated_Source\PSoC4/CyLFClk.c ****             else
 928:Generated_Source\PSoC4/CyLFClk.c ****             {
 929:Generated_Source\PSoC4/CyLFClk.c ****                 CYASSERT(0u != 0u);
 930:Generated_Source\PSoC4/CyLFClk.c ****             }
 931:Generated_Source\PSoC4/CyLFClk.c ****         }
 932:Generated_Source\PSoC4/CyLFClk.c ****     }
 933:Generated_Source\PSoC4/CyLFClk.c **** #endif  /* (CY_IP_WCO) */
 934:Generated_Source\PSoC4/CyLFClk.c **** 
 935:Generated_Source\PSoC4/CyLFClk.c **** 
 936:Generated_Source\PSoC4/CyLFClk.c **** #if(CY_IP_SRSSV2)
 937:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
 938:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtLock
 939:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
 940:Generated_Source\PSoC4/CyLFClk.c ****     * \brief
 941:Generated_Source\PSoC4/CyLFClk.c ****     * Locks out configuration changes to the Watchdog timer registers and ILO
 942:Generated_Source\PSoC4/CyLFClk.c ****     * configuration register.
 943:Generated_Source\PSoC4/CyLFClk.c ****     *
 944:Generated_Source\PSoC4/CyLFClk.c ****     * After this function is called, ILO clock can't be disabled until
 945:Generated_Source\PSoC4/CyLFClk.c ****     * CySysWdtUnlock() is called.
 946:Generated_Source\PSoC4/CyLFClk.c ****     *
 947:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
 948:Generated_Source\PSoC4/CyLFClk.c ****     void CySysWdtLock(void)
 949:Generated_Source\PSoC4/CyLFClk.c ****     {
 950:Generated_Source\PSoC4/CyLFClk.c ****         uint8 interruptState;
 951:Generated_Source\PSoC4/CyLFClk.c ****         interruptState = CyEnterCriticalSection();
 952:Generated_Source\PSoC4/CyLFClk.c **** 
 953:Generated_Source\PSoC4/CyLFClk.c ****         CY_SYS_CLK_SELECT_REG = (CY_SYS_CLK_SELECT_REG & (uint32)(~CY_SYS_WDT_CLK_LOCK_BITS_MASK)) 
 954:Generated_Source\PSoC4/CyLFClk.c ****                  CY_SYS_WDT_CLK_LOCK_BITS_MASK;
 955:Generated_Source\PSoC4/CyLFClk.c **** 
 956:Generated_Source\PSoC4/CyLFClk.c ****         CyExitCriticalSection(interruptState);
 957:Generated_Source\PSoC4/CyLFClk.c ****     }
 958:Generated_Source\PSoC4/CyLFClk.c **** 
 959:Generated_Source\PSoC4/CyLFClk.c **** 
 960:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
 961:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtLocked
 962:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
 963:Generated_Source\PSoC4/CyLFClk.c ****     * \internal
 964:Generated_Source\PSoC4/CyLFClk.c ****     * Reports the WDT lock state.
 965:Generated_Source\PSoC4/CyLFClk.c ****     *
 966:Generated_Source\PSoC4/CyLFClk.c ****     * \return 1 - WDT is locked, and 0 - WDT is unlocked.
 967:Generated_Source\PSoC4/CyLFClk.c ****     * \endinternal
 968:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
 969:Generated_Source\PSoC4/CyLFClk.c ****     static uint32 CySysWdtLocked(void)
 970:Generated_Source\PSoC4/CyLFClk.c ****     {
 971:Generated_Source\PSoC4/CyLFClk.c ****         /* Prohibits writing to WDT registers and ILO/WCO registers when not equal 0 */
 972:Generated_Source\PSoC4/CyLFClk.c ****         return ((0u != (CY_SYS_CLK_SELECT_REG & (uint32)(CY_SYS_WDT_CLK_LOCK_BITS_MASK))) ? (uint32
ARM GAS  C:\Users\TIMCHE~1\AppData\Local\Temp\ccPS59ly.s 			page 25


 973:Generated_Source\PSoC4/CyLFClk.c ****     }
 974:Generated_Source\PSoC4/CyLFClk.c **** 
 975:Generated_Source\PSoC4/CyLFClk.c **** 
 976:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
 977:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtUnlock
 978:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
 979:Generated_Source\PSoC4/CyLFClk.c ****     * \brief
 980:Generated_Source\PSoC4/CyLFClk.c ****     *  Unlocks the Watchdog Timer configuration register.
 981:Generated_Source\PSoC4/CyLFClk.c ****     *
 982:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
 983:Generated_Source\PSoC4/CyLFClk.c ****     void CySysWdtUnlock(void)
 984:Generated_Source\PSoC4/CyLFClk.c ****     {
 985:Generated_Source\PSoC4/CyLFClk.c ****         uint8 interruptState;
 986:Generated_Source\PSoC4/CyLFClk.c ****         interruptState = CyEnterCriticalSection();
 987:Generated_Source\PSoC4/CyLFClk.c **** 
 988:Generated_Source\PSoC4/CyLFClk.c ****         /* Removing WDT lock requires two writes */
 989:Generated_Source\PSoC4/CyLFClk.c ****         CY_SYS_CLK_SELECT_REG = ((CY_SYS_CLK_SELECT_REG & (uint32)(~CY_SYS_WDT_CLK_LOCK_BITS_MASK))
 990:Generated_Source\PSoC4/CyLFClk.c ****                 CY_SYS_WDT_CLK_LOCK_BIT0);
 991:Generated_Source\PSoC4/CyLFClk.c **** 
 992:Generated_Source\PSoC4/CyLFClk.c ****         CY_SYS_CLK_SELECT_REG = ((CY_SYS_CLK_SELECT_REG & (uint32)(~CY_SYS_WDT_CLK_LOCK_BITS_MASK))
 993:Generated_Source\PSoC4/CyLFClk.c ****                 CY_SYS_WDT_CLK_LOCK_BIT1);
 994:Generated_Source\PSoC4/CyLFClk.c **** 
 995:Generated_Source\PSoC4/CyLFClk.c ****         CyExitCriticalSection(interruptState);
 996:Generated_Source\PSoC4/CyLFClk.c ****     }
 997:Generated_Source\PSoC4/CyLFClk.c **** 
 998:Generated_Source\PSoC4/CyLFClk.c **** 
 999:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1000:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtGetEnabledStatus
1001:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1002:Generated_Source\PSoC4/CyLFClk.c ****     * \brief
1003:Generated_Source\PSoC4/CyLFClk.c ****     *  Reads the enabled status of one of the three WDT counters.
1004:Generated_Source\PSoC4/CyLFClk.c ****     *
1005:Generated_Source\PSoC4/CyLFClk.c ****     * \param counterNum: Valid range [0-2].  The number of the WDT counter.
1006:Generated_Source\PSoC4/CyLFClk.c ****     *
1007:Generated_Source\PSoC4/CyLFClk.c ****     * \return The status of the WDT counter:
1008:Generated_Source\PSoC4/CyLFClk.c ****     * \return 0 - If the counter is disabled.
1009:Generated_Source\PSoC4/CyLFClk.c ****     * \return 1 - If the counter is enabled.
1010:Generated_Source\PSoC4/CyLFClk.c ****     *
1011:Generated_Source\PSoC4/CyLFClk.c ****     * \details
1012:Generated_Source\PSoC4/CyLFClk.c ****     * This function returns an actual WDT counter status from the status register. It may
1013:Generated_Source\PSoC4/CyLFClk.c ****     * take up to 3 LFCLK cycles for the WDT status register to contain actual data
1014:Generated_Source\PSoC4/CyLFClk.c ****     * after the WDT counter is enabled.
1015:Generated_Source\PSoC4/CyLFClk.c ****     *
1016:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1017:Generated_Source\PSoC4/CyLFClk.c ****     uint32 CySysWdtGetEnabledStatus(uint32 counterNum)
1018:Generated_Source\PSoC4/CyLFClk.c ****     {
1019:Generated_Source\PSoC4/CyLFClk.c ****         CYASSERT(counterNum < CY_SYS_WDT_COUNTERS_MAX);
1020:Generated_Source\PSoC4/CyLFClk.c ****         return ((CY_SYS_WDT_CONTROL_REG >> ((CY_SYS_WDT_CNT_SHIFT * counterNum) + CY_SYS_WDT_CNT_ST
1021:Generated_Source\PSoC4/CyLFClk.c ****     }
1022:Generated_Source\PSoC4/CyLFClk.c **** 
1023:Generated_Source\PSoC4/CyLFClk.c **** 
1024:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1025:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtSetMode
1026:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1027:Generated_Source\PSoC4/CyLFClk.c ****     * \brief
1028:Generated_Source\PSoC4/CyLFClk.c ****     * Writes the mode of one of the three WDT counters.
1029:Generated_Source\PSoC4/CyLFClk.c ****     *
ARM GAS  C:\Users\TIMCHE~1\AppData\Local\Temp\ccPS59ly.s 			page 26


1030:Generated_Source\PSoC4/CyLFClk.c ****     * \param counterNum: Valid range [0-2].  The number of the WDT counter.
1031:Generated_Source\PSoC4/CyLFClk.c ****     *
1032:Generated_Source\PSoC4/CyLFClk.c ****     * \param mode
1033:Generated_Source\PSoC4/CyLFClk.c ****     *  CY_SYS_WDT_MODE_NONE - Free running.<br>
1034:Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_WDT_MODE_INT - The interrupt generated on match for counter 0
1035:Generated_Source\PSoC4/CyLFClk.c ****     * and 1, and on bit toggle for counter 2.<br>
1036:Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_WDT_MODE_RESET - Reset on match (valid for counter 0 and 1 only).<br>
1037:Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_WDT_MODE_INT_RESET - Generate an interrupt.  Generate a reset on
1038:Generated_Source\PSoC4/CyLFClk.c ****     * the 3rd non-handled interrupt (valid for counter 0 and counter 1 only).
1039:Generated_Source\PSoC4/CyLFClk.c ****     *
1040:Generated_Source\PSoC4/CyLFClk.c ****     * \details
1041:Generated_Source\PSoC4/CyLFClk.c ****     * WDT counter counterNum should be disabled to set a mode. Otherwise, this
1042:Generated_Source\PSoC4/CyLFClk.c ****     * function call has no effect. If the specified counter is enabled,
1043:Generated_Source\PSoC4/CyLFClk.c ****     * call the CySysWdtDisable() function with the corresponding parameter to
1044:Generated_Source\PSoC4/CyLFClk.c ****     * disable the specified counter and wait for it to stop.
1045:Generated_Source\PSoC4/CyLFClk.c ****     *
1046:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1047:Generated_Source\PSoC4/CyLFClk.c ****     void CySysWdtSetMode(uint32 counterNum, uint32 mode)
1048:Generated_Source\PSoC4/CyLFClk.c ****     {
1049:Generated_Source\PSoC4/CyLFClk.c ****         uint32 configRegValue;
1050:Generated_Source\PSoC4/CyLFClk.c **** 
1051:Generated_Source\PSoC4/CyLFClk.c ****         CYASSERT(counterNum < CY_SYS_WDT_COUNTERS_MAX);
1052:Generated_Source\PSoC4/CyLFClk.c **** 
1053:Generated_Source\PSoC4/CyLFClk.c ****         if(0u == CySysWdtGetEnabledStatus(counterNum))
1054:Generated_Source\PSoC4/CyLFClk.c ****         {
1055:Generated_Source\PSoC4/CyLFClk.c ****             configRegValue = CY_SYS_WDT_CONFIG_REG &
1056:Generated_Source\PSoC4/CyLFClk.c ****                                 (uint32)~((uint32)(CY_SYS_WDT_MODE_MASK << (counterNum * CY_SYS_WDT
1057:Generated_Source\PSoC4/CyLFClk.c ****             configRegValue |= (uint32)((mode & CY_SYS_WDT_MODE_MASK) << (counterNum * CY_SYS_WDT_CN
1058:Generated_Source\PSoC4/CyLFClk.c ****             CY_SYS_WDT_CONFIG_REG = configRegValue;
1059:Generated_Source\PSoC4/CyLFClk.c ****         }
1060:Generated_Source\PSoC4/CyLFClk.c ****     }
1061:Generated_Source\PSoC4/CyLFClk.c **** 
1062:Generated_Source\PSoC4/CyLFClk.c **** 
1063:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1064:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtGetMode
1065:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1066:Generated_Source\PSoC4/CyLFClk.c ****     * 
1067:Generated_Source\PSoC4/CyLFClk.c ****     * \brief Reads the mode of one of the three WDT counters.
1068:Generated_Source\PSoC4/CyLFClk.c ****     *
1069:Generated_Source\PSoC4/CyLFClk.c ****     * \param counterNum Valid range [0-2]. The number of the WDT counter.
1070:Generated_Source\PSoC4/CyLFClk.c ****     *
1071:Generated_Source\PSoC4/CyLFClk.c ****     * \return The mode of the counter. The same enumerated values as the mode 
1072:Generated_Source\PSoC4/CyLFClk.c ****     * parameter used in CySysWdtSetMode().
1073:Generated_Source\PSoC4/CyLFClk.c ****     *
1074:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1075:Generated_Source\PSoC4/CyLFClk.c ****     uint32 CySysWdtGetMode(uint32 counterNum)
1076:Generated_Source\PSoC4/CyLFClk.c ****     {
1077:Generated_Source\PSoC4/CyLFClk.c ****         return ((CY_SYS_WDT_CONFIG_REG >> (counterNum * CY_SYS_WDT_CNT_SHIFT)) & CY_SYS_WDT_MODE_MA
1078:Generated_Source\PSoC4/CyLFClk.c ****     }
1079:Generated_Source\PSoC4/CyLFClk.c **** 
1080:Generated_Source\PSoC4/CyLFClk.c **** 
1081:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1082:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtSetClearOnMatch
1083:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1084:Generated_Source\PSoC4/CyLFClk.c ****     * 
1085:Generated_Source\PSoC4/CyLFClk.c ****     * \brief Configures the WDT counter "clear on match" setting.
1086:Generated_Source\PSoC4/CyLFClk.c ****     *
ARM GAS  C:\Users\TIMCHE~1\AppData\Local\Temp\ccPS59ly.s 			page 27


1087:Generated_Source\PSoC4/CyLFClk.c ****     * If configured to "clear on match", the counter counts from 0 to MatchValue
1088:Generated_Source\PSoC4/CyLFClk.c ****     * giving it a period of (MatchValue + 1).
1089:Generated_Source\PSoC4/CyLFClk.c ****     *
1090:Generated_Source\PSoC4/CyLFClk.c ****     * \param counterNum
1091:Generated_Source\PSoC4/CyLFClk.c ****     * Valid range [0-1]. The number of the WDT counter. The match values are not
1092:Generated_Source\PSoC4/CyLFClk.c ****     * supported by counter 2.
1093:Generated_Source\PSoC4/CyLFClk.c ****     *
1094:Generated_Source\PSoC4/CyLFClk.c ****     * \param enable 0 to disable appropriate counter <br>
1095:Generated_Source\PSoC4/CyLFClk.c ****     *  1 to enable appropriate counter
1096:Generated_Source\PSoC4/CyLFClk.c ****     *
1097:Generated_Source\PSoC4/CyLFClk.c ****     * \details
1098:Generated_Source\PSoC4/CyLFClk.c ****     * WDT counter counterNum should be disabled. Otherwise this function call
1099:Generated_Source\PSoC4/CyLFClk.c ****     * has no effect. If the specified counter is enabled, call the CySysWdtDisable()
1100:Generated_Source\PSoC4/CyLFClk.c ****     * function with the corresponding parameter to disable the specified counter and
1101:Generated_Source\PSoC4/CyLFClk.c ****     * wait for it to stop. This may take up to three LFCLK cycles.
1102:Generated_Source\PSoC4/CyLFClk.c ****     *
1103:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1104:Generated_Source\PSoC4/CyLFClk.c ****     void CySysWdtSetClearOnMatch(uint32 counterNum, uint32 enable)
1105:Generated_Source\PSoC4/CyLFClk.c ****     {
1106:Generated_Source\PSoC4/CyLFClk.c ****         uint32 configRegValue;
1107:Generated_Source\PSoC4/CyLFClk.c **** 
1108:Generated_Source\PSoC4/CyLFClk.c ****         CYASSERT((counterNum == CY_SYS_WDT_COUNTER0) ||
1109:Generated_Source\PSoC4/CyLFClk.c ****                  (counterNum == CY_SYS_WDT_COUNTER1));
1110:Generated_Source\PSoC4/CyLFClk.c **** 
1111:Generated_Source\PSoC4/CyLFClk.c ****         if(0u == CySysWdtGetEnabledStatus(counterNum))
1112:Generated_Source\PSoC4/CyLFClk.c ****         {
1113:Generated_Source\PSoC4/CyLFClk.c ****             configRegValue = CY_SYS_WDT_CONFIG_REG & (uint32)~((uint32)((uint32)1u << 
1114:Generated_Source\PSoC4/CyLFClk.c ****                                      ((counterNum * CY_SYS_WDT_CNT_SHIFT) + CY_SYS_WDT_CNT_MATCH_CL
1115:Generated_Source\PSoC4/CyLFClk.c **** 
1116:Generated_Source\PSoC4/CyLFClk.c ****             configRegValue
1117:Generated_Source\PSoC4/CyLFClk.c ****                 |= (uint32)(enable << ((counterNum * CY_SYS_WDT_CNT_SHIFT) + CY_SYS_WDT_CNT_MATCH_C
1118:Generated_Source\PSoC4/CyLFClk.c **** 
1119:Generated_Source\PSoC4/CyLFClk.c ****             CY_SYS_WDT_CONFIG_REG = configRegValue;
1120:Generated_Source\PSoC4/CyLFClk.c ****         }
1121:Generated_Source\PSoC4/CyLFClk.c ****     }
1122:Generated_Source\PSoC4/CyLFClk.c **** 
1123:Generated_Source\PSoC4/CyLFClk.c **** 
1124:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1125:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtGetClearOnMatch
1126:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1127:Generated_Source\PSoC4/CyLFClk.c ****     * \brief
1128:Generated_Source\PSoC4/CyLFClk.c ****     * Reads the "clear on match" setting for the specified counter.
1129:Generated_Source\PSoC4/CyLFClk.c ****     *
1130:Generated_Source\PSoC4/CyLFClk.c ****     * \param
1131:Generated_Source\PSoC4/CyLFClk.c ****     * counterNum Valid range [0-1]. The number of the WDT counter. The match values
1132:Generated_Source\PSoC4/CyLFClk.c ****     * are not supported by counter 2.
1133:Generated_Source\PSoC4/CyLFClk.c ****     *
1134:Generated_Source\PSoC4/CyLFClk.c ****     * \return The "clear on match" status: <br>1 if enabled <br>0 if disabled
1135:Generated_Source\PSoC4/CyLFClk.c ****     *
1136:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1137:Generated_Source\PSoC4/CyLFClk.c ****     uint32 CySysWdtGetClearOnMatch(uint32 counterNum)
1138:Generated_Source\PSoC4/CyLFClk.c ****     {
1139:Generated_Source\PSoC4/CyLFClk.c ****         CYASSERT((counterNum == CY_SYS_WDT_COUNTER0) ||
1140:Generated_Source\PSoC4/CyLFClk.c ****                  (counterNum == CY_SYS_WDT_COUNTER1));
1141:Generated_Source\PSoC4/CyLFClk.c **** 
1142:Generated_Source\PSoC4/CyLFClk.c ****         return (uint32)((CY_SYS_WDT_CONFIG_REG >>
1143:Generated_Source\PSoC4/CyLFClk.c ****                         ((counterNum * CY_SYS_WDT_CNT_SHIFT) + CY_SYS_WDT_CNT_MATCH_CLR_SHIFT)) & 0
ARM GAS  C:\Users\TIMCHE~1\AppData\Local\Temp\ccPS59ly.s 			page 28


1144:Generated_Source\PSoC4/CyLFClk.c ****     }
1145:Generated_Source\PSoC4/CyLFClk.c **** 
1146:Generated_Source\PSoC4/CyLFClk.c **** 
1147:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1148:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtEnable
1149:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1150:Generated_Source\PSoC4/CyLFClk.c ****     *
1151:Generated_Source\PSoC4/CyLFClk.c ****     * \brief Enables the specified WDT counters.
1152:Generated_Source\PSoC4/CyLFClk.c ****     *
1153:Generated_Source\PSoC4/CyLFClk.c ****     * All the counters specified in the mask are enabled.
1154:Generated_Source\PSoC4/CyLFClk.c ****     *
1155:Generated_Source\PSoC4/CyLFClk.c ****     * \param counterMask
1156:Generated_Source\PSoC4/CyLFClk.c ****     *  CY_SYS_WDT_COUNTER0_MASK - The mask for counter 0 to enable.<br>
1157:Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_WDT_COUNTER1_MASK - The mask for counter 1 to enable.<br>
1158:Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_WDT_COUNTER2_MASK - The mask for counter 2 to enable.
1159:Generated_Source\PSoC4/CyLFClk.c ****     *
1160:Generated_Source\PSoC4/CyLFClk.c ****     * \details
1161:Generated_Source\PSoC4/CyLFClk.c ****     * Enabling or disabling WDT requires 3 LFCLK cycles to come into effect.
1162:Generated_Source\PSoC4/CyLFClk.c ****     * Therefore, the WDT enable state must not be changed more than once in
1163:Generated_Source\PSoC4/CyLFClk.c ****     * that period.
1164:Generated_Source\PSoC4/CyLFClk.c ****     *
1165:Generated_Source\PSoC4/CyLFClk.c ****     * After WDT is enabled, it is illegal to write WDT configuration (WDT_CONFIG)
1166:Generated_Source\PSoC4/CyLFClk.c ****     * and control (WDT_CONTROL) registers. This means that all WDT functions that
1167:Generated_Source\PSoC4/CyLFClk.c ****     * contain 'write' in the name (with the exception of CySysWdtSetMatch()
1168:Generated_Source\PSoC4/CyLFClk.c ****     * function) are illegal to call if WDT is enabled.
1169:Generated_Source\PSoC4/CyLFClk.c ****     *
1170:Generated_Source\PSoC4/CyLFClk.c ****     * PSoC 4100 / PSoC 4200: This function enables ILO.
1171:Generated_Source\PSoC4/CyLFClk.c ****     *
1172:Generated_Source\PSoC4/CyLFClk.c ****     * PSoC 4100 BLE / PSoC 4200 BLE / PSoC4200L / PSoC 4100M 
1173:Generated_Source\PSoC4/CyLFClk.c ****     * / PSoC 4200M:
1174:Generated_Source\PSoC4/CyLFClk.c ****     * LFLCK should be configured before calling this function. The desired
1175:Generated_Source\PSoC4/CyLFClk.c ****     * source should be enabled and configured to be the source for LFCLK.
1176:Generated_Source\PSoC4/CyLFClk.c ****     *
1177:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1178:Generated_Source\PSoC4/CyLFClk.c ****     void CySysWdtEnable(uint32 counterMask)
1179:Generated_Source\PSoC4/CyLFClk.c ****     {
1180:Generated_Source\PSoC4/CyLFClk.c ****         #if (!CY_IP_WCO)
1181:Generated_Source\PSoC4/CyLFClk.c ****             CySysClkIloStart();
1182:Generated_Source\PSoC4/CyLFClk.c ****         #endif /* (!CY_IP_WCO) */
1183:Generated_Source\PSoC4/CyLFClk.c **** 
1184:Generated_Source\PSoC4/CyLFClk.c ****         CY_SYS_WDT_CONTROL_REG |= counterMask;
1185:Generated_Source\PSoC4/CyLFClk.c **** 
1186:Generated_Source\PSoC4/CyLFClk.c ****         if(0u != (counterMask & CY_SYS_WDT_COUNTER0_MASK))
1187:Generated_Source\PSoC4/CyLFClk.c ****         {
1188:Generated_Source\PSoC4/CyLFClk.c ****             while (0u == CySysWdtGetEnabledStatus(CY_SYS_WDT_COUNTER0))
1189:Generated_Source\PSoC4/CyLFClk.c ****             {
1190:Generated_Source\PSoC4/CyLFClk.c ****                 /* Wait for changes to come into effect */
1191:Generated_Source\PSoC4/CyLFClk.c ****             }
1192:Generated_Source\PSoC4/CyLFClk.c ****         }
1193:Generated_Source\PSoC4/CyLFClk.c **** 
1194:Generated_Source\PSoC4/CyLFClk.c ****         if(0u != (counterMask & CY_SYS_WDT_COUNTER1_MASK))
1195:Generated_Source\PSoC4/CyLFClk.c ****         {
1196:Generated_Source\PSoC4/CyLFClk.c ****             while (0u == CySysWdtGetEnabledStatus(CY_SYS_WDT_COUNTER1))
1197:Generated_Source\PSoC4/CyLFClk.c ****             {
1198:Generated_Source\PSoC4/CyLFClk.c ****                 /* Wait for changes to come into effect */
1199:Generated_Source\PSoC4/CyLFClk.c ****             }
1200:Generated_Source\PSoC4/CyLFClk.c ****         }
ARM GAS  C:\Users\TIMCHE~1\AppData\Local\Temp\ccPS59ly.s 			page 29


1201:Generated_Source\PSoC4/CyLFClk.c **** 
1202:Generated_Source\PSoC4/CyLFClk.c ****         if(0u != (counterMask & CY_SYS_WDT_COUNTER2_MASK))
1203:Generated_Source\PSoC4/CyLFClk.c ****         {
1204:Generated_Source\PSoC4/CyLFClk.c ****             while (0u == CySysWdtGetEnabledStatus(CY_SYS_WDT_COUNTER2))
1205:Generated_Source\PSoC4/CyLFClk.c ****             {
1206:Generated_Source\PSoC4/CyLFClk.c ****                 /* Wait for changes to come into effect */
1207:Generated_Source\PSoC4/CyLFClk.c ****             }
1208:Generated_Source\PSoC4/CyLFClk.c ****         }
1209:Generated_Source\PSoC4/CyLFClk.c ****     }
1210:Generated_Source\PSoC4/CyLFClk.c **** 
1211:Generated_Source\PSoC4/CyLFClk.c **** 
1212:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1213:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtDisable
1214:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1215:Generated_Source\PSoC4/CyLFClk.c ****     *
1216:Generated_Source\PSoC4/CyLFClk.c ****     * \brief Disables the specified WDT counters.
1217:Generated_Source\PSoC4/CyLFClk.c ****     * All the counters specified in the mask are disabled. The function waits for 
1218:Generated_Source\PSoC4/CyLFClk.c ****     * the changes to come into effect.
1219:Generated_Source\PSoC4/CyLFClk.c ****     *
1220:Generated_Source\PSoC4/CyLFClk.c ****     * \param counterMask
1221:Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_WDT_COUNTER0_MASK - The mask for counter 0 to disable. <br>
1222:Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_WDT_COUNTER1_MASK - The mask for counter 1 to disable. <br>
1223:Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_WDT_COUNTER2_MASK - The mask for counter 2 to disable.
1224:Generated_Source\PSoC4/CyLFClk.c ****     *
1225:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1226:Generated_Source\PSoC4/CyLFClk.c ****     void CySysWdtDisable(uint32 counterMask)
1227:Generated_Source\PSoC4/CyLFClk.c ****     {
1228:Generated_Source\PSoC4/CyLFClk.c ****         if (0uL == CySysWdtLocked())
1229:Generated_Source\PSoC4/CyLFClk.c ****         {
1230:Generated_Source\PSoC4/CyLFClk.c ****             CY_SYS_WDT_CONTROL_REG &= ~counterMask;
1231:Generated_Source\PSoC4/CyLFClk.c **** 
1232:Generated_Source\PSoC4/CyLFClk.c ****             if(0u != (counterMask & CY_SYS_WDT_COUNTER0_MASK))
1233:Generated_Source\PSoC4/CyLFClk.c ****             {
1234:Generated_Source\PSoC4/CyLFClk.c ****                 while (0u != CySysWdtGetEnabledStatus(CY_SYS_WDT_COUNTER0))
1235:Generated_Source\PSoC4/CyLFClk.c ****                 {
1236:Generated_Source\PSoC4/CyLFClk.c ****                     /* Wait for changes to come into effect */
1237:Generated_Source\PSoC4/CyLFClk.c ****                 }
1238:Generated_Source\PSoC4/CyLFClk.c ****             }
1239:Generated_Source\PSoC4/CyLFClk.c **** 
1240:Generated_Source\PSoC4/CyLFClk.c ****             if(0u != (counterMask & CY_SYS_WDT_COUNTER1_MASK))
1241:Generated_Source\PSoC4/CyLFClk.c ****             {
1242:Generated_Source\PSoC4/CyLFClk.c ****                 while (0u != CySysWdtGetEnabledStatus(CY_SYS_WDT_COUNTER1))
1243:Generated_Source\PSoC4/CyLFClk.c ****                 {
1244:Generated_Source\PSoC4/CyLFClk.c ****                     /* Wait for changes to come into effect */
1245:Generated_Source\PSoC4/CyLFClk.c ****                 }
1246:Generated_Source\PSoC4/CyLFClk.c ****             }
1247:Generated_Source\PSoC4/CyLFClk.c **** 
1248:Generated_Source\PSoC4/CyLFClk.c ****             if(0u != (counterMask & CY_SYS_WDT_COUNTER2_MASK))
1249:Generated_Source\PSoC4/CyLFClk.c ****             {
1250:Generated_Source\PSoC4/CyLFClk.c ****                 while (0u != CySysWdtGetEnabledStatus(CY_SYS_WDT_COUNTER2))
1251:Generated_Source\PSoC4/CyLFClk.c ****                 {
1252:Generated_Source\PSoC4/CyLFClk.c ****                     /* Wait for changes to come into effect */
1253:Generated_Source\PSoC4/CyLFClk.c ****                 }
1254:Generated_Source\PSoC4/CyLFClk.c ****             }
1255:Generated_Source\PSoC4/CyLFClk.c ****         }
1256:Generated_Source\PSoC4/CyLFClk.c ****     }
1257:Generated_Source\PSoC4/CyLFClk.c **** 
ARM GAS  C:\Users\TIMCHE~1\AppData\Local\Temp\ccPS59ly.s 			page 30


1258:Generated_Source\PSoC4/CyLFClk.c **** 
1259:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1260:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtSetCascade
1261:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1262:Generated_Source\PSoC4/CyLFClk.c ****     * \brief
1263:Generated_Source\PSoC4/CyLFClk.c ****     * Writes the two WDT cascade values based on the combination of mask values
1264:Generated_Source\PSoC4/CyLFClk.c ****     * specified.
1265:Generated_Source\PSoC4/CyLFClk.c ****     *
1266:Generated_Source\PSoC4/CyLFClk.c ****     * \param cascadeMask The mask value used to set or clear the cascade values:
1267:Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_WDT_CASCADE_NONE - Neither <br>
1268:Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_WDT_CASCADE_01 - Cascade 01 <br>
1269:Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_WDT_CASCADE_12 - Cascade 12
1270:Generated_Source\PSoC4/CyLFClk.c ****     *
1271:Generated_Source\PSoC4/CyLFClk.c ****     * If only one cascade mask is specified, the second cascade is disabled.
1272:Generated_Source\PSoC4/CyLFClk.c ****     * To set both cascade modes, two defines should be ORed:
1273:Generated_Source\PSoC4/CyLFClk.c ****     * (CY_SYS_TIMER_CASCADE_01 | CY_SYS_TIMER_CASCADE_12).
1274:Generated_Source\PSoC4/CyLFClk.c ****     * \note If CySysWdtSetCascade() was called with ORed defines it is necessary 
1275:Generated_Source\PSoC4/CyLFClk.c ****     * to call CySysWdtSetClearOnMatch(1,1). It is needed to make sure that 
1276:Generated_Source\PSoC4/CyLFClk.c ****     * Counter 2 will be updated in the expected way.
1277:Generated_Source\PSoC4/CyLFClk.c ****     *
1278:Generated_Source\PSoC4/CyLFClk.c ****     * WDT counters that are part of the specified cascade should be disabled.
1279:Generated_Source\PSoC4/CyLFClk.c ****     * Otherwise this function call has no effect. If the specified
1280:Generated_Source\PSoC4/CyLFClk.c ****     * counter is enabled, call CySysWdtDisable() function with the corresponding
1281:Generated_Source\PSoC4/CyLFClk.c ****     * parameter to disable the specified counter and wait for it to stop. This may
1282:Generated_Source\PSoC4/CyLFClk.c ****     * take up to 3 LFCLK cycles.
1283:Generated_Source\PSoC4/CyLFClk.c ****     *
1284:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1285:Generated_Source\PSoC4/CyLFClk.c ****     void CySysWdtSetCascade(uint32 cascadeMask)
1286:Generated_Source\PSoC4/CyLFClk.c ****     {
1287:Generated_Source\PSoC4/CyLFClk.c ****         uint32 configRegValue;
1288:Generated_Source\PSoC4/CyLFClk.c ****         uint32 countersEnableStatus;
1289:Generated_Source\PSoC4/CyLFClk.c **** 
1290:Generated_Source\PSoC4/CyLFClk.c ****         countersEnableStatus = CySysWdtGetEnabledStatus(CY_SYS_WDT_COUNTER0) |
1291:Generated_Source\PSoC4/CyLFClk.c ****                             CySysWdtGetEnabledStatus(CY_SYS_WDT_COUNTER1) |
1292:Generated_Source\PSoC4/CyLFClk.c ****                             CySysWdtGetEnabledStatus(CY_SYS_WDT_COUNTER2);
1293:Generated_Source\PSoC4/CyLFClk.c **** 
1294:Generated_Source\PSoC4/CyLFClk.c ****         if (0u == countersEnableStatus)
1295:Generated_Source\PSoC4/CyLFClk.c ****         {
1296:Generated_Source\PSoC4/CyLFClk.c ****             configRegValue = CY_SYS_WDT_CONFIG_REG;
1297:Generated_Source\PSoC4/CyLFClk.c ****             configRegValue &= ((uint32)(~(CY_SYS_WDT_CASCADE_01|CY_SYS_WDT_CASCADE_12)));
1298:Generated_Source\PSoC4/CyLFClk.c ****             configRegValue |= cascadeMask;
1299:Generated_Source\PSoC4/CyLFClk.c ****             CY_SYS_WDT_CONFIG_REG = configRegValue;
1300:Generated_Source\PSoC4/CyLFClk.c ****         }
1301:Generated_Source\PSoC4/CyLFClk.c ****     }
1302:Generated_Source\PSoC4/CyLFClk.c **** 
1303:Generated_Source\PSoC4/CyLFClk.c **** 
1304:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1305:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtGetCascade
1306:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1307:Generated_Source\PSoC4/CyLFClk.c ****     *
1308:Generated_Source\PSoC4/CyLFClk.c ****     * \brief Reads the two WDT cascade values returning a mask of the bits set.
1309:Generated_Source\PSoC4/CyLFClk.c ****     *
1310:Generated_Source\PSoC4/CyLFClk.c ****     * \return The mask of the cascade values set.
1311:Generated_Source\PSoC4/CyLFClk.c ****     * \return CY_SYS_WDT_CASCADE_NONE - Neither
1312:Generated_Source\PSoC4/CyLFClk.c ****     * \return CY_SYS_WDT_CASCADE_01 - Cascade 01
1313:Generated_Source\PSoC4/CyLFClk.c ****     * \return CY_SYS_WDT_CASCADE_12 - Cascade 12
1314:Generated_Source\PSoC4/CyLFClk.c ****     *
ARM GAS  C:\Users\TIMCHE~1\AppData\Local\Temp\ccPS59ly.s 			page 31


1315:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1316:Generated_Source\PSoC4/CyLFClk.c ****     uint32 CySysWdtGetCascade(void)
1317:Generated_Source\PSoC4/CyLFClk.c ****     {
1318:Generated_Source\PSoC4/CyLFClk.c ****         return (CY_SYS_WDT_CONFIG_REG & (CY_SYS_WDT_CASCADE_01 | CY_SYS_WDT_CASCADE_12));
1319:Generated_Source\PSoC4/CyLFClk.c ****     }
1320:Generated_Source\PSoC4/CyLFClk.c **** 
1321:Generated_Source\PSoC4/CyLFClk.c **** 
1322:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1323:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtSetMatch
1324:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1325:Generated_Source\PSoC4/CyLFClk.c ****     *
1326:Generated_Source\PSoC4/CyLFClk.c ****     * \brief Configures the WDT counter match comparison value.
1327:Generated_Source\PSoC4/CyLFClk.c ****     *
1328:Generated_Source\PSoC4/CyLFClk.c ****     * \param counterNum
1329:Generated_Source\PSoC4/CyLFClk.c ****     * Valid range [0-1]. The number of the WDT counter. The match values are not
1330:Generated_Source\PSoC4/CyLFClk.c ****     * supported by counter 2.
1331:Generated_Source\PSoC4/CyLFClk.c ****     *
1332:Generated_Source\PSoC4/CyLFClk.c ****     * \param match
1333:Generated_Source\PSoC4/CyLFClk.c ****     * Valid range [0-65535]. The value to be used to match against the counter.
1334:Generated_Source\PSoC4/CyLFClk.c ****     *
1335:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1336:Generated_Source\PSoC4/CyLFClk.c ****     void CySysWdtSetMatch(uint32 counterNum, uint32 match)
1337:Generated_Source\PSoC4/CyLFClk.c ****     {
1338:Generated_Source\PSoC4/CyLFClk.c ****         uint32 regValue;
1339:Generated_Source\PSoC4/CyLFClk.c **** 
1340:Generated_Source\PSoC4/CyLFClk.c ****         CYASSERT((counterNum == CY_SYS_WDT_COUNTER0) ||
1341:Generated_Source\PSoC4/CyLFClk.c ****                  (counterNum == CY_SYS_WDT_COUNTER1));
1342:Generated_Source\PSoC4/CyLFClk.c **** 
1343:Generated_Source\PSoC4/CyLFClk.c ****         /* Wait for previous changes to come into effect */
1344:Generated_Source\PSoC4/CyLFClk.c ****         CyDelayUs(CY_SYS_WDT_3LFCLK_DELAY_US);
1345:Generated_Source\PSoC4/CyLFClk.c **** 
1346:Generated_Source\PSoC4/CyLFClk.c ****         regValue = CY_SYS_WDT_MATCH_REG;
1347:Generated_Source\PSoC4/CyLFClk.c ****         regValue &= (uint32)~((uint32)(CY_SYS_WDT_LOWER_16BITS_MASK << (counterNum * CY_SYS_WDT_CNT
1348:Generated_Source\PSoC4/CyLFClk.c ****         CY_SYS_WDT_MATCH_REG = (regValue | (match << (counterNum * CY_SYS_WDT_CNT_MATCH_SHIFT)));
1349:Generated_Source\PSoC4/CyLFClk.c **** 
1350:Generated_Source\PSoC4/CyLFClk.c ****         /* Make sure match synchronization has started */
1351:Generated_Source\PSoC4/CyLFClk.c ****         CyDelayUs(CY_SYS_WDT_1LFCLK_DELAY_US);
1352:Generated_Source\PSoC4/CyLFClk.c ****     }
1353:Generated_Source\PSoC4/CyLFClk.c **** 
1354:Generated_Source\PSoC4/CyLFClk.c **** 
1355:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1356:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtSetToggleBit
1357:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1358:Generated_Source\PSoC4/CyLFClk.c ****     * \brief
1359:Generated_Source\PSoC4/CyLFClk.c ****     * Configures which bit in WDT counter 2 to monitor for a toggle.
1360:Generated_Source\PSoC4/CyLFClk.c ****     *
1361:Generated_Source\PSoC4/CyLFClk.c ****     * When that bit toggles, an interrupt is generated if the mode for counter 2 has
1362:Generated_Source\PSoC4/CyLFClk.c ****     * enabled interrupts.
1363:Generated_Source\PSoC4/CyLFClk.c ****     *
1364:Generated_Source\PSoC4/CyLFClk.c ****     * \param bits Valid range [0-31].  Counter 2 bit to monitor for a toggle.
1365:Generated_Source\PSoC4/CyLFClk.c ****     *
1366:Generated_Source\PSoC4/CyLFClk.c ****     * \details
1367:Generated_Source\PSoC4/CyLFClk.c ****     * WDT Counter 2 should be disabled. Otherwise this function call has no
1368:Generated_Source\PSoC4/CyLFClk.c ****     * effect.
1369:Generated_Source\PSoC4/CyLFClk.c ****     *
1370:Generated_Source\PSoC4/CyLFClk.c ****     * If the specified counter is enabled, call the CySysWdtDisable() function with
1371:Generated_Source\PSoC4/CyLFClk.c ****     * the corresponding parameter to disable the specified counter and wait for it to
ARM GAS  C:\Users\TIMCHE~1\AppData\Local\Temp\ccPS59ly.s 			page 32


1372:Generated_Source\PSoC4/CyLFClk.c ****     * stop. This may take up to 3 LFCLK cycles.
1373:Generated_Source\PSoC4/CyLFClk.c ****     *
1374:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1375:Generated_Source\PSoC4/CyLFClk.c ****     void CySysWdtSetToggleBit(uint32 bits)
1376:Generated_Source\PSoC4/CyLFClk.c ****     {
1377:Generated_Source\PSoC4/CyLFClk.c ****         uint32 configRegValue;
1378:Generated_Source\PSoC4/CyLFClk.c **** 
1379:Generated_Source\PSoC4/CyLFClk.c ****         if (0u == CySysWdtGetEnabledStatus(CY_SYS_WDT_COUNTER2))
1380:Generated_Source\PSoC4/CyLFClk.c ****         {
1381:Generated_Source\PSoC4/CyLFClk.c ****             configRegValue = CY_SYS_WDT_CONFIG_REG;
1382:Generated_Source\PSoC4/CyLFClk.c ****             configRegValue &= (uint32)(~((uint32)(CY_SYS_WDT_CONFIG_BITS2_MASK << CY_SYS_WDT_CONFIG
1383:Generated_Source\PSoC4/CyLFClk.c ****             configRegValue |= ((bits & CY_SYS_WDT_CONFIG_BITS2_MASK) << CY_SYS_WDT_CONFIG_BITS2_POS
1384:Generated_Source\PSoC4/CyLFClk.c ****             CY_SYS_WDT_CONFIG_REG = configRegValue;
1385:Generated_Source\PSoC4/CyLFClk.c ****         }
1386:Generated_Source\PSoC4/CyLFClk.c ****     }
1387:Generated_Source\PSoC4/CyLFClk.c **** 
1388:Generated_Source\PSoC4/CyLFClk.c **** 
1389:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1390:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtGetToggleBit
1391:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1392:Generated_Source\PSoC4/CyLFClk.c ****     * \brief
1393:Generated_Source\PSoC4/CyLFClk.c ****     * Reads which bit in WDT counter 2 is monitored for a toggle.
1394:Generated_Source\PSoC4/CyLFClk.c ****     *
1395:Generated_Source\PSoC4/CyLFClk.c ****     * \return The bit that is monitored (range of 0 to 31)
1396:Generated_Source\PSoC4/CyLFClk.c ****     *
1397:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1398:Generated_Source\PSoC4/CyLFClk.c ****     uint32 CySysWdtGetToggleBit(void)
1399:Generated_Source\PSoC4/CyLFClk.c ****     {
1400:Generated_Source\PSoC4/CyLFClk.c ****         return ((CY_SYS_WDT_CONFIG_REG >> CY_SYS_WDT_CONFIG_BITS2_POS) & CY_SYS_WDT_CONFIG_BITS2_MA
1401:Generated_Source\PSoC4/CyLFClk.c ****     }
1402:Generated_Source\PSoC4/CyLFClk.c **** 
1403:Generated_Source\PSoC4/CyLFClk.c **** 
1404:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1405:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtGetMatch
1406:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1407:Generated_Source\PSoC4/CyLFClk.c ****     *
1408:Generated_Source\PSoC4/CyLFClk.c ****     * \brief Reads the WDT counter match comparison value.
1409:Generated_Source\PSoC4/CyLFClk.c ****     *
1410:Generated_Source\PSoC4/CyLFClk.c ****     * \param counterNum Valid range [0-1].  The number of the WDT counter. The match
1411:Generated_Source\PSoC4/CyLFClk.c ****     * values are not supported by counter 2.
1412:Generated_Source\PSoC4/CyLFClk.c ****     *
1413:Generated_Source\PSoC4/CyLFClk.c ****     * \return A 16-bit match value.
1414:Generated_Source\PSoC4/CyLFClk.c ****     *
1415:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1416:Generated_Source\PSoC4/CyLFClk.c ****     uint32 CySysWdtGetMatch(uint32 counterNum)
1417:Generated_Source\PSoC4/CyLFClk.c ****     {
1418:Generated_Source\PSoC4/CyLFClk.c ****         CYASSERT((counterNum == CY_SYS_WDT_COUNTER0) ||
1419:Generated_Source\PSoC4/CyLFClk.c ****                  (counterNum == CY_SYS_WDT_COUNTER1));
1420:Generated_Source\PSoC4/CyLFClk.c **** 
1421:Generated_Source\PSoC4/CyLFClk.c ****         return ((uint32)(CY_SYS_WDT_MATCH_REG >> 
1422:Generated_Source\PSoC4/CyLFClk.c ****                                             (counterNum * CY_SYS_WDT_CNT_MATCH_SHIFT)) & CY_SYS_WDT
1423:Generated_Source\PSoC4/CyLFClk.c ****     }
1424:Generated_Source\PSoC4/CyLFClk.c **** 
1425:Generated_Source\PSoC4/CyLFClk.c **** 
1426:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1427:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtGetCount
1428:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
ARM GAS  C:\Users\TIMCHE~1\AppData\Local\Temp\ccPS59ly.s 			page 33


1429:Generated_Source\PSoC4/CyLFClk.c ****     *
1430:Generated_Source\PSoC4/CyLFClk.c ****     * \brief Reads the current WDT counter value.
1431:Generated_Source\PSoC4/CyLFClk.c ****     *
1432:Generated_Source\PSoC4/CyLFClk.c ****     * \param counterNum: Valid range [0-2]. The number of the WDT counter.
1433:Generated_Source\PSoC4/CyLFClk.c ****     *
1434:Generated_Source\PSoC4/CyLFClk.c ****     * \return A live counter value.  Counter 0 and Counter 1 are 16 bit counters 
1435:Generated_Source\PSoC4/CyLFClk.c ****     * and counter 2 is a 32 bit counter.
1436:Generated_Source\PSoC4/CyLFClk.c ****     *
1437:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1438:Generated_Source\PSoC4/CyLFClk.c ****     uint32 CySysWdtGetCount(uint32 counterNum)
1439:Generated_Source\PSoC4/CyLFClk.c ****     {
1440:Generated_Source\PSoC4/CyLFClk.c ****         uint32 regValue = 0u;
1441:Generated_Source\PSoC4/CyLFClk.c **** 
1442:Generated_Source\PSoC4/CyLFClk.c ****         switch(counterNum)
1443:Generated_Source\PSoC4/CyLFClk.c ****         {
1444:Generated_Source\PSoC4/CyLFClk.c ****             /* WDT Counter 0 */
1445:Generated_Source\PSoC4/CyLFClk.c ****             case 0u:
1446:Generated_Source\PSoC4/CyLFClk.c ****                 regValue = CY_SYS_WDT_CTRLOW_REG & CY_SYS_WDT_LOWER_16BITS_MASK;
1447:Generated_Source\PSoC4/CyLFClk.c ****             break;
1448:Generated_Source\PSoC4/CyLFClk.c **** 
1449:Generated_Source\PSoC4/CyLFClk.c ****             /* WDT Counter 1 */
1450:Generated_Source\PSoC4/CyLFClk.c ****             case 1u:
1451:Generated_Source\PSoC4/CyLFClk.c ****                 regValue = (CY_SYS_WDT_CTRLOW_REG >> CY_SYS_WDT_CNT_MATCH_SHIFT) & CY_SYS_WDT_LOWER
1452:Generated_Source\PSoC4/CyLFClk.c ****             break;
1453:Generated_Source\PSoC4/CyLFClk.c **** 
1454:Generated_Source\PSoC4/CyLFClk.c ****             /* WDT Counter 2 */
1455:Generated_Source\PSoC4/CyLFClk.c ****             case 2u:
1456:Generated_Source\PSoC4/CyLFClk.c ****                 regValue = CY_SYS_WDT_CTRHIGH_REG;
1457:Generated_Source\PSoC4/CyLFClk.c ****             break;
1458:Generated_Source\PSoC4/CyLFClk.c **** 
1459:Generated_Source\PSoC4/CyLFClk.c ****             default:
1460:Generated_Source\PSoC4/CyLFClk.c ****                 CYASSERT(0u != 0u);
1461:Generated_Source\PSoC4/CyLFClk.c ****             break;
1462:Generated_Source\PSoC4/CyLFClk.c ****         }
1463:Generated_Source\PSoC4/CyLFClk.c **** 
1464:Generated_Source\PSoC4/CyLFClk.c ****         return (regValue);
1465:Generated_Source\PSoC4/CyLFClk.c ****     }
1466:Generated_Source\PSoC4/CyLFClk.c **** 
1467:Generated_Source\PSoC4/CyLFClk.c **** 
1468:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1469:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtGetInterruptSource
1470:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1471:Generated_Source\PSoC4/CyLFClk.c ****     * \brief
1472:Generated_Source\PSoC4/CyLFClk.c ****     * Reads a mask containing all the WDT counters interrupts that are currently
1473:Generated_Source\PSoC4/CyLFClk.c ****     * set by the hardware, if a corresponding mode is selected.
1474:Generated_Source\PSoC4/CyLFClk.c ****     *
1475:Generated_Source\PSoC4/CyLFClk.c ****     * \return The mask of interrupts set
1476:Generated_Source\PSoC4/CyLFClk.c ****     * \return CY_SYS_WDT_COUNTER0_INT - Counter 0
1477:Generated_Source\PSoC4/CyLFClk.c ****     * \return CY_SYS_WDT_COUNTER1_INT - Counter 1
1478:Generated_Source\PSoC4/CyLFClk.c ****     * \return CY_SYS_WDT_COUNTER2_INT - Counter 2
1479:Generated_Source\PSoC4/CyLFClk.c ****     *
1480:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1481:Generated_Source\PSoC4/CyLFClk.c ****     uint32 CySysWdtGetInterruptSource(void)
1482:Generated_Source\PSoC4/CyLFClk.c ****     {
1483:Generated_Source\PSoC4/CyLFClk.c ****         return (CY_SYS_WDT_CONTROL_REG & (CY_SYS_WDT_COUNTER0_INT | CY_SYS_WDT_COUNTER1_INT | CY_SY
1484:Generated_Source\PSoC4/CyLFClk.c ****     }
1485:Generated_Source\PSoC4/CyLFClk.c **** 
ARM GAS  C:\Users\TIMCHE~1\AppData\Local\Temp\ccPS59ly.s 			page 34


1486:Generated_Source\PSoC4/CyLFClk.c **** 
1487:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1488:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtClearInterrupt
1489:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1490:Generated_Source\PSoC4/CyLFClk.c ****     * \brief
1491:Generated_Source\PSoC4/CyLFClk.c ****     * Clears all the WDT counter interrupts set in the mask.
1492:Generated_Source\PSoC4/CyLFClk.c ****     *
1493:Generated_Source\PSoC4/CyLFClk.c ****     * Calling this function also prevents from Reset when the counter mode is set 
1494:Generated_Source\PSoC4/CyLFClk.c ****     * to generate 3 interrupts and then the device resets.
1495:Generated_Source\PSoC4/CyLFClk.c ****     *
1496:Generated_Source\PSoC4/CyLFClk.c ****     * All the WDT interrupts are to be cleared by the firmware, otherwise
1497:Generated_Source\PSoC4/CyLFClk.c ****     * interrupts are generated continuously.
1498:Generated_Source\PSoC4/CyLFClk.c ****     *
1499:Generated_Source\PSoC4/CyLFClk.c ****     * \param counterMask
1500:Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_WDT_COUNTER0_INT - Clears counter 0 interrupts <br>
1501:Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_WDT_COUNTER1_INT - Clears counter 1 interrupts <br>
1502:Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_WDT_COUNTER2_INT - Clears counter 2 interrupts
1503:Generated_Source\PSoC4/CyLFClk.c ****     *
1504:Generated_Source\PSoC4/CyLFClk.c ****     * \details
1505:Generated_Source\PSoC4/CyLFClk.c ****     * This function temporary removes the watchdog lock, if it was set, and
1506:Generated_Source\PSoC4/CyLFClk.c ****     * restores the lock state after cleaning the WDT interrupts that are set in
1507:Generated_Source\PSoC4/CyLFClk.c ****     * a mask.
1508:Generated_Source\PSoC4/CyLFClk.c ****     *
1509:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1510:Generated_Source\PSoC4/CyLFClk.c ****     void CySysWdtClearInterrupt(uint32 counterMask)
1511:Generated_Source\PSoC4/CyLFClk.c ****     {
1512:Generated_Source\PSoC4/CyLFClk.c ****         uint8 interruptState;
1513:Generated_Source\PSoC4/CyLFClk.c ****         uint32 wdtLockState;
1514:Generated_Source\PSoC4/CyLFClk.c **** 
1515:Generated_Source\PSoC4/CyLFClk.c ****         interruptState = CyEnterCriticalSection();
1516:Generated_Source\PSoC4/CyLFClk.c **** 
1517:Generated_Source\PSoC4/CyLFClk.c ****         if (0u != CySysWdtLocked())
1518:Generated_Source\PSoC4/CyLFClk.c ****         {
1519:Generated_Source\PSoC4/CyLFClk.c ****             wdtLockState = 1u;
1520:Generated_Source\PSoC4/CyLFClk.c ****             CySysWdtUnlock();
1521:Generated_Source\PSoC4/CyLFClk.c ****         }
1522:Generated_Source\PSoC4/CyLFClk.c ****         else
1523:Generated_Source\PSoC4/CyLFClk.c ****         {
1524:Generated_Source\PSoC4/CyLFClk.c ****             wdtLockState = 0u;
1525:Generated_Source\PSoC4/CyLFClk.c ****         }
1526:Generated_Source\PSoC4/CyLFClk.c **** 
1527:Generated_Source\PSoC4/CyLFClk.c ****         /* Set new WDT control register value */
1528:Generated_Source\PSoC4/CyLFClk.c ****         counterMask &= (CY_SYS_WDT_COUNTER0_INT |
1529:Generated_Source\PSoC4/CyLFClk.c ****                         CY_SYS_WDT_COUNTER1_INT |
1530:Generated_Source\PSoC4/CyLFClk.c ****                         CY_SYS_WDT_COUNTER2_INT);
1531:Generated_Source\PSoC4/CyLFClk.c **** 
1532:Generated_Source\PSoC4/CyLFClk.c ****         CY_SYS_WDT_CONTROL_REG = counterMask | (CY_SYS_WDT_CONTROL_REG & ~(CY_SYS_WDT_COUNTER0_INT 
1533:Generated_Source\PSoC4/CyLFClk.c ****                                                                            CY_SYS_WDT_COUNTER1_INT 
1534:Generated_Source\PSoC4/CyLFClk.c ****                                                                            CY_SYS_WDT_COUNTER2_INT)
1535:Generated_Source\PSoC4/CyLFClk.c **** 
1536:Generated_Source\PSoC4/CyLFClk.c ****         /* Read the CY_SYS_WDT_CONTROL_REG to clear the interrupt request.
1537:Generated_Source\PSoC4/CyLFClk.c ****          * Cypress ID #207093, #206231
1538:Generated_Source\PSoC4/CyLFClk.c ****         */
1539:Generated_Source\PSoC4/CyLFClk.c ****         (void)CY_SYS_WDT_CONTROL_REG;
1540:Generated_Source\PSoC4/CyLFClk.c **** 
1541:Generated_Source\PSoC4/CyLFClk.c ****         if (1u == wdtLockState)
1542:Generated_Source\PSoC4/CyLFClk.c ****         {
ARM GAS  C:\Users\TIMCHE~1\AppData\Local\Temp\ccPS59ly.s 			page 35


1543:Generated_Source\PSoC4/CyLFClk.c ****             CySysWdtLock();
1544:Generated_Source\PSoC4/CyLFClk.c ****         }
1545:Generated_Source\PSoC4/CyLFClk.c **** 
1546:Generated_Source\PSoC4/CyLFClk.c ****         CyExitCriticalSection(interruptState);
1547:Generated_Source\PSoC4/CyLFClk.c ****     }
1548:Generated_Source\PSoC4/CyLFClk.c **** 
1549:Generated_Source\PSoC4/CyLFClk.c **** 
1550:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1551:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtResetCounters
1552:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1553:Generated_Source\PSoC4/CyLFClk.c ****     * \brief
1554:Generated_Source\PSoC4/CyLFClk.c ****     * Resets all the WDT counters set in the mask.
1555:Generated_Source\PSoC4/CyLFClk.c ****     *
1556:Generated_Source\PSoC4/CyLFClk.c ****     * \param countersMask
1557:Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_WDT_COUNTER0_RESET - Reset counter 0 <br>
1558:Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_WDT_COUNTER1_RESET - Reset counter 1 <br>
1559:Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_WDT_COUNTER2_RESET - Reset counter 2
1560:Generated_Source\PSoC4/CyLFClk.c ****     *
1561:Generated_Source\PSoC4/CyLFClk.c ****     * \details
1562:Generated_Source\PSoC4/CyLFClk.c ****     * This function does not reset counter values if the Watchdog is locked.
1563:Generated_Source\PSoC4/CyLFClk.c ****     * This function waits while corresponding counters will be reset. This may
1564:Generated_Source\PSoC4/CyLFClk.c ****     * take up to 3 LFCLK cycles.
1565:Generated_Source\PSoC4/CyLFClk.c ****     * The LFCLK source must be enabled. Otherwise, the function will never exit.
1566:Generated_Source\PSoC4/CyLFClk.c ****     *
1567:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1568:Generated_Source\PSoC4/CyLFClk.c ****     void CySysWdtResetCounters(uint32 countersMask)
1569:Generated_Source\PSoC4/CyLFClk.c ****     {
1570:Generated_Source\PSoC4/CyLFClk.c ****         /* Set new WDT reset value */
1571:Generated_Source\PSoC4/CyLFClk.c ****         CY_SYS_WDT_CONTROL_REG |= (countersMask & CY_SYS_WDT_COUNTERS_RESET);
1572:Generated_Source\PSoC4/CyLFClk.c **** 
1573:Generated_Source\PSoC4/CyLFClk.c ****         while (0uL != (CY_SYS_WDT_CONTROL_REG & CY_SYS_WDT_COUNTERS_RESET))
1574:Generated_Source\PSoC4/CyLFClk.c ****         {
1575:Generated_Source\PSoC4/CyLFClk.c ****             /* Wait for reset to come into effect */
1576:Generated_Source\PSoC4/CyLFClk.c ****         }
1577:Generated_Source\PSoC4/CyLFClk.c ****     }
1578:Generated_Source\PSoC4/CyLFClk.c **** 
1579:Generated_Source\PSoC4/CyLFClk.c **** 
1580:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1581:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtSetInterruptCallback
1582:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1583:Generated_Source\PSoC4/CyLFClk.c ****     * \brief
1584:Generated_Source\PSoC4/CyLFClk.c ****     * Sets the ISR callback function for the particular WDT counter.
1585:Generated_Source\PSoC4/CyLFClk.c ****     * These functions are called on the WDT interrupt.
1586:Generated_Source\PSoC4/CyLFClk.c ****     *
1587:Generated_Source\PSoC4/CyLFClk.c ****     * \param counterNum The number of the WDT counter.
1588:Generated_Source\PSoC4/CyLFClk.c ****     * \param function The pointer to the callback function.
1589:Generated_Source\PSoC4/CyLFClk.c ****     *
1590:Generated_Source\PSoC4/CyLFClk.c ****     * \return The pointer to the previous callback function.
1591:Generated_Source\PSoC4/CyLFClk.c ****     * \return NULL is returned if the specified address is not set.
1592:Generated_Source\PSoC4/CyLFClk.c ****     *
1593:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1594:Generated_Source\PSoC4/CyLFClk.c ****     cyWdtCallback CySysWdtSetInterruptCallback(uint32 counterNum, cyWdtCallback function)
1595:Generated_Source\PSoC4/CyLFClk.c ****     {
1596:Generated_Source\PSoC4/CyLFClk.c ****         cyWdtCallback prevCallback = (void *)0;
1597:Generated_Source\PSoC4/CyLFClk.c **** 
1598:Generated_Source\PSoC4/CyLFClk.c ****         if(counterNum < CY_WDT_NUM_OF_WDT)
1599:Generated_Source\PSoC4/CyLFClk.c ****         {
ARM GAS  C:\Users\TIMCHE~1\AppData\Local\Temp\ccPS59ly.s 			page 36


1600:Generated_Source\PSoC4/CyLFClk.c ****             prevCallback = cySysWdtCallback[counterNum];
1601:Generated_Source\PSoC4/CyLFClk.c ****             cySysWdtCallback[counterNum] = function;
1602:Generated_Source\PSoC4/CyLFClk.c ****         }
1603:Generated_Source\PSoC4/CyLFClk.c ****         else
1604:Generated_Source\PSoC4/CyLFClk.c ****         {
1605:Generated_Source\PSoC4/CyLFClk.c ****             CYASSERT(0u != 0u);
1606:Generated_Source\PSoC4/CyLFClk.c ****         }
1607:Generated_Source\PSoC4/CyLFClk.c **** 
1608:Generated_Source\PSoC4/CyLFClk.c ****         return((cyWdtCallback)prevCallback);
1609:Generated_Source\PSoC4/CyLFClk.c ****     }
1610:Generated_Source\PSoC4/CyLFClk.c **** 
1611:Generated_Source\PSoC4/CyLFClk.c **** 
1612:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1613:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtGetInterruptCallback
1614:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1615:Generated_Source\PSoC4/CyLFClk.c ****     * \brief
1616:Generated_Source\PSoC4/CyLFClk.c ****     * Gets the ISR callback function for the particular WDT counter.
1617:Generated_Source\PSoC4/CyLFClk.c ****     *
1618:Generated_Source\PSoC4/CyLFClk.c ****     * \param counterNum The number of the WDT counter.
1619:Generated_Source\PSoC4/CyLFClk.c ****     *
1620:Generated_Source\PSoC4/CyLFClk.c ****     * \return The pointer to the callback function registered for a particular WDT by
1621:Generated_Source\PSoC4/CyLFClk.c ****     * a particular address that are passed through arguments.
1622:Generated_Source\PSoC4/CyLFClk.c ****     *
1623:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1624:Generated_Source\PSoC4/CyLFClk.c ****     cyWdtCallback CySysWdtGetInterruptCallback(uint32 counterNum)
1625:Generated_Source\PSoC4/CyLFClk.c ****     {
1626:Generated_Source\PSoC4/CyLFClk.c ****         cyWdtCallback retCallback = (void *)0;
1627:Generated_Source\PSoC4/CyLFClk.c **** 
1628:Generated_Source\PSoC4/CyLFClk.c ****         if(counterNum < CY_WDT_NUM_OF_WDT)
1629:Generated_Source\PSoC4/CyLFClk.c ****         {
1630:Generated_Source\PSoC4/CyLFClk.c ****             retCallback = (cyWdtCallback)cySysWdtCallback[counterNum];
1631:Generated_Source\PSoC4/CyLFClk.c ****         }
1632:Generated_Source\PSoC4/CyLFClk.c ****         else
1633:Generated_Source\PSoC4/CyLFClk.c ****         {
1634:Generated_Source\PSoC4/CyLFClk.c ****             CYASSERT(0u != 0u);
1635:Generated_Source\PSoC4/CyLFClk.c ****         }
1636:Generated_Source\PSoC4/CyLFClk.c **** 
1637:Generated_Source\PSoC4/CyLFClk.c ****         return(retCallback);
1638:Generated_Source\PSoC4/CyLFClk.c ****     }
1639:Generated_Source\PSoC4/CyLFClk.c **** 
1640:Generated_Source\PSoC4/CyLFClk.c **** 
1641:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1642:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtEnableCounterIsr
1643:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1644:Generated_Source\PSoC4/CyLFClk.c ****     * \brief
1645:Generated_Source\PSoC4/CyLFClk.c ****     * Enables the ISR callback servicing for the particular WDT counter
1646:Generated_Source\PSoC4/CyLFClk.c ****     *
1647:Generated_Source\PSoC4/CyLFClk.c ****     * \param counterNum Valid range [0-2]. The number of the WDT counter.
1648:Generated_Source\PSoC4/CyLFClk.c ****     *
1649:Generated_Source\PSoC4/CyLFClk.c ****     * Value corresponds to appropriate WDT counter. For example value 1 
1650:Generated_Source\PSoC4/CyLFClk.c ****     * corresponds to second WDT counter.
1651:Generated_Source\PSoC4/CyLFClk.c ****     *
1652:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1653:Generated_Source\PSoC4/CyLFClk.c ****     void CySysWdtEnableCounterIsr(uint32 counterNum)
1654:Generated_Source\PSoC4/CyLFClk.c ****     {
1655:Generated_Source\PSoC4/CyLFClk.c ****         if(counterNum <= CY_SYS_WDT_COUNTER2)
1656:Generated_Source\PSoC4/CyLFClk.c ****         {
ARM GAS  C:\Users\TIMCHE~1\AppData\Local\Temp\ccPS59ly.s 			page 37


1657:Generated_Source\PSoC4/CyLFClk.c ****             disableServicedIsr &= ~counterIntMaskTbl[counterNum];
1658:Generated_Source\PSoC4/CyLFClk.c ****             wdtIsrMask |= counterIntMaskTbl[counterNum];
1659:Generated_Source\PSoC4/CyLFClk.c ****         }
1660:Generated_Source\PSoC4/CyLFClk.c ****         else
1661:Generated_Source\PSoC4/CyLFClk.c ****         {
1662:Generated_Source\PSoC4/CyLFClk.c ****             CYASSERT(0u != 0u);
1663:Generated_Source\PSoC4/CyLFClk.c ****         }
1664:Generated_Source\PSoC4/CyLFClk.c ****     }
1665:Generated_Source\PSoC4/CyLFClk.c **** 
1666:Generated_Source\PSoC4/CyLFClk.c **** 
1667:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1668:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtDisableCounterIsr
1669:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1670:Generated_Source\PSoC4/CyLFClk.c ****     * \brief
1671:Generated_Source\PSoC4/CyLFClk.c ****     * Disables the ISR callback servicing for the particular WDT counter
1672:Generated_Source\PSoC4/CyLFClk.c ****     *
1673:Generated_Source\PSoC4/CyLFClk.c ****     * \param counterNum Valid range [0-2]. The number of the WDT counter.
1674:Generated_Source\PSoC4/CyLFClk.c ****     *
1675:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1676:Generated_Source\PSoC4/CyLFClk.c ****     void CySysWdtDisableCounterIsr(uint32 counterNum)
1677:Generated_Source\PSoC4/CyLFClk.c ****     {
1678:Generated_Source\PSoC4/CyLFClk.c ****         if(counterNum <= CY_SYS_WDT_COUNTER2)
1679:Generated_Source\PSoC4/CyLFClk.c ****         {
1680:Generated_Source\PSoC4/CyLFClk.c ****             wdtIsrMask &= ~counterIntMaskTbl[counterNum];
1681:Generated_Source\PSoC4/CyLFClk.c ****         }
1682:Generated_Source\PSoC4/CyLFClk.c ****         else
1683:Generated_Source\PSoC4/CyLFClk.c ****         {
1684:Generated_Source\PSoC4/CyLFClk.c ****             CYASSERT(0u != 0u);
1685:Generated_Source\PSoC4/CyLFClk.c ****         }
1686:Generated_Source\PSoC4/CyLFClk.c ****     }
1687:Generated_Source\PSoC4/CyLFClk.c **** 
1688:Generated_Source\PSoC4/CyLFClk.c **** 
1689:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1690:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtIsr
1691:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1692:Generated_Source\PSoC4/CyLFClk.c ****     * \brief
1693:Generated_Source\PSoC4/CyLFClk.c ****     * This is the handler of the WDT interrupt in CPU NVIC.
1694:Generated_Source\PSoC4/CyLFClk.c ****     *
1695:Generated_Source\PSoC4/CyLFClk.c ****     * The handler checks which WDT triggered in the interrupt and calls the 
1696:Generated_Source\PSoC4/CyLFClk.c ****     * respective callback functions configured by the user by using 
1697:Generated_Source\PSoC4/CyLFClk.c ****     * CySysWdtSetIsrCallback() API.
1698:Generated_Source\PSoC4/CyLFClk.c ****     *
1699:Generated_Source\PSoC4/CyLFClk.c ****     * The order of the callback execution is incremental. Callback-0 is
1700:Generated_Source\PSoC4/CyLFClk.c ****     * run as the first one and callback-2 is called as the last one.
1701:Generated_Source\PSoC4/CyLFClk.c ****     *
1702:Generated_Source\PSoC4/CyLFClk.c ****     * \details
1703:Generated_Source\PSoC4/CyLFClk.c ****     * This function clears the WDT interrupt every time when it is called.
1704:Generated_Source\PSoC4/CyLFClk.c ****     * Reset after the 3rd interrupt does not happen if this function is registered
1705:Generated_Source\PSoC4/CyLFClk.c ****     * as the interrupt handler even if the "Watchdog with Interrupt" mode is
1706:Generated_Source\PSoC4/CyLFClk.c ****     * selected on the "Low Frequency Clocks" tab.
1707:Generated_Source\PSoC4/CyLFClk.c ****     *
1708:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1709:Generated_Source\PSoC4/CyLFClk.c ****     void CySysWdtIsr(void)
1710:Generated_Source\PSoC4/CyLFClk.c ****     {
1711:Generated_Source\PSoC4/CyLFClk.c ****         if(0u != (CY_SYS_WDT_COUNTER0_INT & CY_SYS_WDT_CONTROL_REG))
1712:Generated_Source\PSoC4/CyLFClk.c ****         {
1713:Generated_Source\PSoC4/CyLFClk.c ****             if(0u != (CY_SYS_WDT_COUNTER0_INT & wdtIsrMask))
ARM GAS  C:\Users\TIMCHE~1\AppData\Local\Temp\ccPS59ly.s 			page 38


1714:Generated_Source\PSoC4/CyLFClk.c ****             {
1715:Generated_Source\PSoC4/CyLFClk.c ****                 wdtIsrMask &= ~(disableServicedIsr & CY_SYS_WDT_COUNTER0_INT);
1716:Generated_Source\PSoC4/CyLFClk.c ****                 disableServicedIsr  &= ~CY_SYS_WDT_COUNTER0_INT;
1717:Generated_Source\PSoC4/CyLFClk.c ****                 if(cySysWdtCallback[CY_SYS_WDT_COUNTER0] != (void *) 0)
1718:Generated_Source\PSoC4/CyLFClk.c ****                 {
1719:Generated_Source\PSoC4/CyLFClk.c ****                     (void)(cySysWdtCallback[CY_SYS_WDT_COUNTER0])();
1720:Generated_Source\PSoC4/CyLFClk.c ****                 }
1721:Generated_Source\PSoC4/CyLFClk.c ****             }
1722:Generated_Source\PSoC4/CyLFClk.c ****             CySysWdtClearInterrupt(CY_SYS_WDT_COUNTER0_INT);
1723:Generated_Source\PSoC4/CyLFClk.c ****         }
1724:Generated_Source\PSoC4/CyLFClk.c **** 
1725:Generated_Source\PSoC4/CyLFClk.c ****         if(0u != (CY_SYS_WDT_COUNTER1_INT & CY_SYS_WDT_CONTROL_REG))
1726:Generated_Source\PSoC4/CyLFClk.c ****         {
1727:Generated_Source\PSoC4/CyLFClk.c ****             if(0u != (CY_SYS_WDT_COUNTER1_INT & wdtIsrMask))
1728:Generated_Source\PSoC4/CyLFClk.c ****             {
1729:Generated_Source\PSoC4/CyLFClk.c ****                 wdtIsrMask &= ~(disableServicedIsr & CY_SYS_WDT_COUNTER1_INT);
1730:Generated_Source\PSoC4/CyLFClk.c ****                 disableServicedIsr  &= ~CY_SYS_WDT_COUNTER1_INT;
1731:Generated_Source\PSoC4/CyLFClk.c ****                 if(cySysWdtCallback[CY_SYS_WDT_COUNTER1] != (void *) 0)
1732:Generated_Source\PSoC4/CyLFClk.c ****                 {
1733:Generated_Source\PSoC4/CyLFClk.c ****                     (void)(cySysWdtCallback[CY_SYS_WDT_COUNTER1])();
1734:Generated_Source\PSoC4/CyLFClk.c ****                 }
1735:Generated_Source\PSoC4/CyLFClk.c ****             }
1736:Generated_Source\PSoC4/CyLFClk.c ****             CySysWdtClearInterrupt(CY_SYS_WDT_COUNTER1_INT);
1737:Generated_Source\PSoC4/CyLFClk.c ****         }
1738:Generated_Source\PSoC4/CyLFClk.c **** 
1739:Generated_Source\PSoC4/CyLFClk.c ****         if(0u != (CY_SYS_WDT_COUNTER2_INT & CY_SYS_WDT_CONTROL_REG))
1740:Generated_Source\PSoC4/CyLFClk.c ****         {
1741:Generated_Source\PSoC4/CyLFClk.c ****             if(0u != (CY_SYS_WDT_COUNTER2_INT & wdtIsrMask))
1742:Generated_Source\PSoC4/CyLFClk.c ****             {
1743:Generated_Source\PSoC4/CyLFClk.c ****                 if(cySysWdtCallback[CY_SYS_WDT_COUNTER2] != (void *) 0)
1744:Generated_Source\PSoC4/CyLFClk.c ****                 {
1745:Generated_Source\PSoC4/CyLFClk.c ****                     (void)(cySysWdtCallback[CY_SYS_WDT_COUNTER2])();
1746:Generated_Source\PSoC4/CyLFClk.c ****                 }
1747:Generated_Source\PSoC4/CyLFClk.c ****             }
1748:Generated_Source\PSoC4/CyLFClk.c ****             CySysWdtClearInterrupt(CY_SYS_WDT_COUNTER2_INT);
1749:Generated_Source\PSoC4/CyLFClk.c ****         }
1750:Generated_Source\PSoC4/CyLFClk.c ****     }
1751:Generated_Source\PSoC4/CyLFClk.c **** 
1752:Generated_Source\PSoC4/CyLFClk.c **** 
1753:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1754:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWatchdogFeed
1755:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1756:Generated_Source\PSoC4/CyLFClk.c ****     * \brief
1757:Generated_Source\PSoC4/CyLFClk.c ****     * Feeds the corresponded Watchdog Counter before it causes the device reset.
1758:Generated_Source\PSoC4/CyLFClk.c ****     *
1759:Generated_Source\PSoC4/CyLFClk.c ****     * Supported only for first WDT0 and second WDT1 counters in the "Watchdog" or 
1760:Generated_Source\PSoC4/CyLFClk.c ****     * "Watchdog w/ Interrupts" modes.
1761:Generated_Source\PSoC4/CyLFClk.c ****     *
1762:Generated_Source\PSoC4/CyLFClk.c ****     * \param counterNum
1763:Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_WDT_COUNTER0 - Feeds the Counter 0 <br>
1764:Generated_Source\PSoC4/CyLFClk.c ****     * CY_SYS_WDT_COUNTER1 - Feeds the Counter 1
1765:Generated_Source\PSoC4/CyLFClk.c ****     *
1766:Generated_Source\PSoC4/CyLFClk.c ****     * Value of counterNum corresponds to appropriate counter. For example value 1 
1767:Generated_Source\PSoC4/CyLFClk.c ****     * corresponds to second WDT1 Counter.
1768:Generated_Source\PSoC4/CyLFClk.c ****     *
1769:Generated_Source\PSoC4/CyLFClk.c ****     * \details
1770:Generated_Source\PSoC4/CyLFClk.c ****     * Clears the WDT counter in the "Watchdog" mode or clears the WDT interrupt in
ARM GAS  C:\Users\TIMCHE~1\AppData\Local\Temp\ccPS59ly.s 			page 39


1771:Generated_Source\PSoC4/CyLFClk.c ****     * "Watchdog w/ Interrupts" mode. Does nothing in other modes.
1772:Generated_Source\PSoC4/CyLFClk.c ****     *
1773:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1774:Generated_Source\PSoC4/CyLFClk.c ****     void CySysWatchdogFeed(uint32 counterNum)
1775:Generated_Source\PSoC4/CyLFClk.c ****     {
1776:Generated_Source\PSoC4/CyLFClk.c ****         if(counterNum == CY_SYS_WDT_COUNTER0)
1777:Generated_Source\PSoC4/CyLFClk.c ****         {
1778:Generated_Source\PSoC4/CyLFClk.c ****             if(CY_SYS_WDT_MODE_INT_RESET == CySysWdtGetMode(counterNum))
1779:Generated_Source\PSoC4/CyLFClk.c ****             {
1780:Generated_Source\PSoC4/CyLFClk.c ****                 CySysWdtClearInterrupt(CY_SYS_WDT_COUNTER0_INT);
1781:Generated_Source\PSoC4/CyLFClk.c ****             }
1782:Generated_Source\PSoC4/CyLFClk.c ****             else if(CY_SYS_WDT_MODE_RESET == CySysWdtGetMode(counterNum))
1783:Generated_Source\PSoC4/CyLFClk.c ****             {
1784:Generated_Source\PSoC4/CyLFClk.c ****                 CySysWdtResetCounters(CY_SYS_WDT_COUNTER0_RESET);
1785:Generated_Source\PSoC4/CyLFClk.c ****                 CySysWdtClearInterrupt(CY_SYS_WDT_COUNTER0_INT);
1786:Generated_Source\PSoC4/CyLFClk.c ****             }
1787:Generated_Source\PSoC4/CyLFClk.c ****             else
1788:Generated_Source\PSoC4/CyLFClk.c ****             {
1789:Generated_Source\PSoC4/CyLFClk.c ****                 /* Do nothing. */
1790:Generated_Source\PSoC4/CyLFClk.c ****             }
1791:Generated_Source\PSoC4/CyLFClk.c ****         }
1792:Generated_Source\PSoC4/CyLFClk.c ****         else if(counterNum == CY_SYS_WDT_COUNTER1)
1793:Generated_Source\PSoC4/CyLFClk.c ****         {
1794:Generated_Source\PSoC4/CyLFClk.c ****             if(CY_SYS_WDT_MODE_INT_RESET == CySysWdtGetMode(counterNum))
1795:Generated_Source\PSoC4/CyLFClk.c ****             {
1796:Generated_Source\PSoC4/CyLFClk.c ****                 CySysWdtClearInterrupt(CY_SYS_WDT_COUNTER1_INT);
1797:Generated_Source\PSoC4/CyLFClk.c ****             }
1798:Generated_Source\PSoC4/CyLFClk.c ****             else if(CY_SYS_WDT_MODE_RESET == CySysWdtGetMode(counterNum))
1799:Generated_Source\PSoC4/CyLFClk.c ****             {
1800:Generated_Source\PSoC4/CyLFClk.c ****                 CySysWdtResetCounters(CY_SYS_WDT_COUNTER1_RESET);
1801:Generated_Source\PSoC4/CyLFClk.c ****                 CySysWdtClearInterrupt(CY_SYS_WDT_COUNTER1_INT);
1802:Generated_Source\PSoC4/CyLFClk.c ****             }
1803:Generated_Source\PSoC4/CyLFClk.c ****             else
1804:Generated_Source\PSoC4/CyLFClk.c ****             {
1805:Generated_Source\PSoC4/CyLFClk.c ****                 /* Do nothing. */
1806:Generated_Source\PSoC4/CyLFClk.c ****             }
1807:Generated_Source\PSoC4/CyLFClk.c ****         }
1808:Generated_Source\PSoC4/CyLFClk.c ****         else
1809:Generated_Source\PSoC4/CyLFClk.c ****         {
1810:Generated_Source\PSoC4/CyLFClk.c ****             /* Do nothing. */
1811:Generated_Source\PSoC4/CyLFClk.c ****         }
1812:Generated_Source\PSoC4/CyLFClk.c ****     }
1813:Generated_Source\PSoC4/CyLFClk.c **** 
1814:Generated_Source\PSoC4/CyLFClk.c **** 
1815:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1816:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysClkLfclkPosedgeCatch
1817:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1818:Generated_Source\PSoC4/CyLFClk.c ****     * \internal
1819:Generated_Source\PSoC4/CyLFClk.c ****     * Returns once the LFCLK positive edge occurred.
1820:Generated_Source\PSoC4/CyLFClk.c ****     *
1821:Generated_Source\PSoC4/CyLFClk.c ****     * CySysClkLfclkPosedgeRestore() should be called after this function
1822:Generated_Source\PSoC4/CyLFClk.c ****     * to restore the WDT configuration.
1823:Generated_Source\PSoC4/CyLFClk.c ****     *
1824:Generated_Source\PSoC4/CyLFClk.c ****     * A pair of the CySysClkLfclkPosedgeCatch() and CySysClkLfclkPosedgeRestore()
1825:Generated_Source\PSoC4/CyLFClk.c ****     * functions is expected to be called inside a critical section.
1826:Generated_Source\PSoC4/CyLFClk.c ****     *
1827:Generated_Source\PSoC4/CyLFClk.c ****     * To ensure that the WDT counter value is read until it changes, the enabled
ARM GAS  C:\Users\TIMCHE~1\AppData\Local\Temp\ccPS59ly.s 			page 40


1828:Generated_Source\PSoC4/CyLFClk.c ****     * WDT counter is used. If no counter is enabled, counter 0 is enabled.
1829:Generated_Source\PSoC4/CyLFClk.c ****     * And after the LFCLK source is switched, the counter 0 configuration
1830:Generated_Source\PSoC4/CyLFClk.c ****     * is restored.
1831:Generated_Source\PSoC4/CyLFClk.c ****     *
1832:Generated_Source\PSoC4/CyLFClk.c ****     * Not applicable for the PSoC 4000 / PSoC 4000S / PSoC 4100S / PSoC Analog 
1833:Generated_Source\PSoC4/CyLFClk.c ****     * Coprocessor devices.
1834:Generated_Source\PSoC4/CyLFClk.c ****     *
1835:Generated_Source\PSoC4/CyLFClk.c ****     * \details
1836:Generated_Source\PSoC4/CyLFClk.c ****     * This function has no effect if WDT is locked (CySysWdtLock() is
1837:Generated_Source\PSoC4/CyLFClk.c ****     * called). Call CySysWdtUnlock() to unlock WDT.
1838:Generated_Source\PSoC4/CyLFClk.c ****     * \endinternal
1839:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1840:Generated_Source\PSoC4/CyLFClk.c ****     static void CySysClkLfclkPosedgeCatch(void)
1841:Generated_Source\PSoC4/CyLFClk.c ****     {
1842:Generated_Source\PSoC4/CyLFClk.c ****         uint32 firstCount;
1843:Generated_Source\PSoC4/CyLFClk.c ****         static uint32 lfclkPosedgeEnabledWdtCounter = 0u;
1844:Generated_Source\PSoC4/CyLFClk.c **** 
1845:Generated_Source\PSoC4/CyLFClk.c ****         if (0u != CySysWdtGetEnabledStatus(CY_SYS_WDT_COUNTER0))
1846:Generated_Source\PSoC4/CyLFClk.c ****         {
1847:Generated_Source\PSoC4/CyLFClk.c ****             lfclkPosedgeEnabledWdtCounter = CY_SYS_WDT_COUNTER0;
1848:Generated_Source\PSoC4/CyLFClk.c ****         }
1849:Generated_Source\PSoC4/CyLFClk.c ****         else if (0u != CySysWdtGetEnabledStatus(CY_SYS_WDT_COUNTER1))
1850:Generated_Source\PSoC4/CyLFClk.c ****         {
1851:Generated_Source\PSoC4/CyLFClk.c ****             lfclkPosedgeEnabledWdtCounter = CY_SYS_WDT_COUNTER1;
1852:Generated_Source\PSoC4/CyLFClk.c ****         }
1853:Generated_Source\PSoC4/CyLFClk.c ****         else if (0u != CySysWdtGetEnabledStatus(CY_SYS_WDT_COUNTER2))
1854:Generated_Source\PSoC4/CyLFClk.c ****         {
1855:Generated_Source\PSoC4/CyLFClk.c ****             lfclkPosedgeEnabledWdtCounter = CY_SYS_WDT_COUNTER2;
1856:Generated_Source\PSoC4/CyLFClk.c ****         }
1857:Generated_Source\PSoC4/CyLFClk.c ****         else /* All WDT counters are disabled */
1858:Generated_Source\PSoC4/CyLFClk.c ****         {
1859:Generated_Source\PSoC4/CyLFClk.c ****             /* Configure WDT counter # 0 */
1860:Generated_Source\PSoC4/CyLFClk.c ****             lfclkPosedgeWdtCounter0Enabled = 1u;
1861:Generated_Source\PSoC4/CyLFClk.c ****             lfclkPosedgeEnabledWdtCounter = CY_SYS_WDT_COUNTER0;
1862:Generated_Source\PSoC4/CyLFClk.c **** 
1863:Generated_Source\PSoC4/CyLFClk.c ****             lfclkPosedgeWdtCounter0Mode = CySysWdtGetMode(CY_SYS_WDT_COUNTER0);
1864:Generated_Source\PSoC4/CyLFClk.c ****             CySysWdtSetMode(CY_SYS_WDT_COUNTER0, CY_SYS_WDT_MODE_NONE);
1865:Generated_Source\PSoC4/CyLFClk.c ****             CySysWdtEnable(CY_SYS_WDT_COUNTER0_MASK);
1866:Generated_Source\PSoC4/CyLFClk.c ****         }
1867:Generated_Source\PSoC4/CyLFClk.c **** 
1868:Generated_Source\PSoC4/CyLFClk.c ****         firstCount = CySysWdtGetCount(lfclkPosedgeEnabledWdtCounter);
1869:Generated_Source\PSoC4/CyLFClk.c ****         while (CySysWdtGetCount(lfclkPosedgeEnabledWdtCounter) == firstCount)
1870:Generated_Source\PSoC4/CyLFClk.c ****         {
1871:Generated_Source\PSoC4/CyLFClk.c ****             /* Wait for counter to increment */
1872:Generated_Source\PSoC4/CyLFClk.c ****         }
1873:Generated_Source\PSoC4/CyLFClk.c ****     }
1874:Generated_Source\PSoC4/CyLFClk.c **** 
1875:Generated_Source\PSoC4/CyLFClk.c **** 
1876:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1877:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysClkLfclkPosedgeRestore
1878:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1879:Generated_Source\PSoC4/CyLFClk.c ****     * \internal
1880:Generated_Source\PSoC4/CyLFClk.c ****     *  Restores the WDT configuration after a CySysClkLfclkPosedgeCatch() call.
1881:Generated_Source\PSoC4/CyLFClk.c ****     *
1882:Generated_Source\PSoC4/CyLFClk.c ****     *  A pair of the CySysClkLfclkPosedgeCatch() and CySysClkLfclkPosedgeRestore()
1883:Generated_Source\PSoC4/CyLFClk.c ****     *  functions is expected to be called inside a critical section.
1884:Generated_Source\PSoC4/CyLFClk.c ****     *
ARM GAS  C:\Users\TIMCHE~1\AppData\Local\Temp\ccPS59ly.s 			page 41


1885:Generated_Source\PSoC4/CyLFClk.c ****     * Not applicable for the PSoC 4000/PSoC 4000S / PSoC 4100S / PSoC Analog 
1886:Generated_Source\PSoC4/CyLFClk.c ****     * Coprocessor devices.
1887:Generated_Source\PSoC4/CyLFClk.c ****     *
1888:Generated_Source\PSoC4/CyLFClk.c ****     * \details
1889:Generated_Source\PSoC4/CyLFClk.c ****     *  This function has no effect if WDT is locked (CySysWdtLock() is
1890:Generated_Source\PSoC4/CyLFClk.c ****     *  called). Call CySysWdtUnlock() to unlock WDT.
1891:Generated_Source\PSoC4/CyLFClk.c ****     *
1892:Generated_Source\PSoC4/CyLFClk.c ****     * \endinternal
1893:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1894:Generated_Source\PSoC4/CyLFClk.c ****     static void CySysClkLfclkPosedgeRestore(void)
1895:Generated_Source\PSoC4/CyLFClk.c ****     {
1896:Generated_Source\PSoC4/CyLFClk.c ****         if (lfclkPosedgeWdtCounter0Enabled != 0u)
1897:Generated_Source\PSoC4/CyLFClk.c ****         {
1898:Generated_Source\PSoC4/CyLFClk.c ****             /* Restore counter # 0 configuration and force its shutdown */
1899:Generated_Source\PSoC4/CyLFClk.c ****             CY_SYS_WDT_CONTROL_REG &= (uint32)(~CY_SYS_WDT_COUNTER0_MASK);
1900:Generated_Source\PSoC4/CyLFClk.c ****             CySysWdtSetMode(CY_SYS_WDT_COUNTER0, lfclkPosedgeWdtCounter0Mode);
1901:Generated_Source\PSoC4/CyLFClk.c ****             lfclkPosedgeWdtCounter0Enabled = 0u;
1902:Generated_Source\PSoC4/CyLFClk.c ****         }
1903:Generated_Source\PSoC4/CyLFClk.c ****     }
1904:Generated_Source\PSoC4/CyLFClk.c **** 
1905:Generated_Source\PSoC4/CyLFClk.c **** #else
1906:Generated_Source\PSoC4/CyLFClk.c **** 
1907:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1908:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtGetEnabledStatus
1909:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1910:Generated_Source\PSoC4/CyLFClk.c ****     *
1911:Generated_Source\PSoC4/CyLFClk.c ****     * \brief Reads the enabled status of the WDT counter.
1912:Generated_Source\PSoC4/CyLFClk.c ****     *
1913:Generated_Source\PSoC4/CyLFClk.c ****     * \return The status of the WDT counter:
1914:Generated_Source\PSoC4/CyLFClk.c ****     * \return 0 - Counter is disabled
1915:Generated_Source\PSoC4/CyLFClk.c ****     * \return 1 - Counter is enabled
1916:Generated_Source\PSoC4/CyLFClk.c ****     *
1917:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1918:Generated_Source\PSoC4/CyLFClk.c ****     uint32 CySysWdtGetEnabledStatus(void)
1919:Generated_Source\PSoC4/CyLFClk.c ****     {
 355              		.loc 1 1919 0
 356              		.cfi_startproc
1920:Generated_Source\PSoC4/CyLFClk.c ****         return ((CY_SYS_WDT_DISABLE_KEY_REG == CY_SYS_WDT_KEY) ? (uint32) 0u : (uint32) 1u);
 357              		.loc 1 1920 0
 358 0000 034B     		ldr	r3, .L29
1921:Generated_Source\PSoC4/CyLFClk.c ****     }
 359              		.loc 1 1921 0
 360              		@ sp needed
1920:Generated_Source\PSoC4/CyLFClk.c ****         return ((CY_SYS_WDT_DISABLE_KEY_REG == CY_SYS_WDT_KEY) ? (uint32) 0u : (uint32) 1u);
 361              		.loc 1 1920 0
 362 0002 1868     		ldr	r0, [r3]
 363 0004 034B     		ldr	r3, .L29+4
 364 0006 C018     		add	r0, r0, r3
 365 0008 431E     		sub	r3, r0, #1
 366 000a 9841     		sbc	r0, r0, r3
 367              		.loc 1 1921 0
 368 000c 7047     		bx	lr
 369              	.L30:
 370 000e C046     		.align	2
 371              	.L29:
 372 0010 38000340 		.word	1073938488
 373 0014 9B771253 		.word	1393719195
ARM GAS  C:\Users\TIMCHE~1\AppData\Local\Temp\ccPS59ly.s 			page 42


 374              		.cfi_endproc
 375              	.LFE5:
 376              		.size	CySysWdtGetEnabledStatus, .-CySysWdtGetEnabledStatus
 377              		.section	.text.CySysWdtEnable,"ax",%progbits
 378              		.align	1
 379              		.global	CySysWdtEnable
 380              		.code	16
 381              		.thumb_func
 382              		.type	CySysWdtEnable, %function
 383              	CySysWdtEnable:
 384              	.LFB6:
1922:Generated_Source\PSoC4/CyLFClk.c **** 
1923:Generated_Source\PSoC4/CyLFClk.c **** 
1924:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1925:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtEnable
1926:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1927:Generated_Source\PSoC4/CyLFClk.c ****     *
1928:Generated_Source\PSoC4/CyLFClk.c ****     * \brief
1929:Generated_Source\PSoC4/CyLFClk.c ****     * Enables watchdog timer reset generation.
1930:Generated_Source\PSoC4/CyLFClk.c ****     *
1931:Generated_Source\PSoC4/CyLFClk.c ****     * CySysWdtClearInterrupt() feeds the watchdog. Two unserviced interrupts lead 
1932:Generated_Source\PSoC4/CyLFClk.c ****     * to a system reset (i.e. at the third match).
1933:Generated_Source\PSoC4/CyLFClk.c ****     *
1934:Generated_Source\PSoC4/CyLFClk.c ****     * ILO is enabled by the hardware once WDT is started.
1935:Generated_Source\PSoC4/CyLFClk.c ****     *
1936:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1937:Generated_Source\PSoC4/CyLFClk.c ****     void CySysWdtEnable(void)
1938:Generated_Source\PSoC4/CyLFClk.c ****     {
 385              		.loc 1 1938 0
 386              		.cfi_startproc
1939:Generated_Source\PSoC4/CyLFClk.c ****         CY_SYS_WDT_DISABLE_KEY_REG = 0u;
 387              		.loc 1 1939 0
 388 0000 0022     		mov	r2, #0
 389 0002 014B     		ldr	r3, .L32
1940:Generated_Source\PSoC4/CyLFClk.c ****     }
 390              		.loc 1 1940 0
 391              		@ sp needed
1939:Generated_Source\PSoC4/CyLFClk.c ****         CY_SYS_WDT_DISABLE_KEY_REG = 0u;
 392              		.loc 1 1939 0
 393 0004 1A60     		str	r2, [r3]
 394              		.loc 1 1940 0
 395 0006 7047     		bx	lr
 396              	.L33:
 397              		.align	2
 398              	.L32:
 399 0008 38000340 		.word	1073938488
 400              		.cfi_endproc
 401              	.LFE6:
 402              		.size	CySysWdtEnable, .-CySysWdtEnable
 403              		.section	.text.CySysWdtDisable,"ax",%progbits
 404              		.align	1
 405              		.global	CySysWdtDisable
 406              		.code	16
 407              		.thumb_func
 408              		.type	CySysWdtDisable, %function
 409              	CySysWdtDisable:
 410              	.LFB7:
ARM GAS  C:\Users\TIMCHE~1\AppData\Local\Temp\ccPS59ly.s 			page 43


1941:Generated_Source\PSoC4/CyLFClk.c **** 
1942:Generated_Source\PSoC4/CyLFClk.c **** 
1943:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1944:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtDisable
1945:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1946:Generated_Source\PSoC4/CyLFClk.c ****     *
1947:Generated_Source\PSoC4/CyLFClk.c ****     * \brief Disables the WDT reset generation.
1948:Generated_Source\PSoC4/CyLFClk.c ****     *
1949:Generated_Source\PSoC4/CyLFClk.c ****     * This function unlocks the ENABLE bit in the CLK_ILO_CONFIG registers and
1950:Generated_Source\PSoC4/CyLFClk.c ****     * enables the user to disable ILO.
1951:Generated_Source\PSoC4/CyLFClk.c ****     *
1952:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1953:Generated_Source\PSoC4/CyLFClk.c ****     void CySysWdtDisable(void)
1954:Generated_Source\PSoC4/CyLFClk.c ****     {
 411              		.loc 1 1954 0
 412              		.cfi_startproc
1955:Generated_Source\PSoC4/CyLFClk.c ****         CY_SYS_WDT_DISABLE_KEY_REG = CY_SYS_WDT_KEY;
 413              		.loc 1 1955 0
 414 0000 014A     		ldr	r2, .L35
 415 0002 024B     		ldr	r3, .L35+4
1956:Generated_Source\PSoC4/CyLFClk.c ****     }
 416              		.loc 1 1956 0
 417              		@ sp needed
1955:Generated_Source\PSoC4/CyLFClk.c ****         CY_SYS_WDT_DISABLE_KEY_REG = CY_SYS_WDT_KEY;
 418              		.loc 1 1955 0
 419 0004 1A60     		str	r2, [r3]
 420              		.loc 1 1956 0
 421 0006 7047     		bx	lr
 422              	.L36:
 423              		.align	2
 424              	.L35:
 425 0008 6588EDAC 		.word	-1393719195
 426 000c 38000340 		.word	1073938488
 427              		.cfi_endproc
 428              	.LFE7:
 429              		.size	CySysWdtDisable, .-CySysWdtDisable
 430              		.section	.text.CySysWdtSetMatch,"ax",%progbits
 431              		.align	1
 432              		.global	CySysWdtSetMatch
 433              		.code	16
 434              		.thumb_func
 435              		.type	CySysWdtSetMatch, %function
 436              	CySysWdtSetMatch:
 437              	.LFB8:
1957:Generated_Source\PSoC4/CyLFClk.c **** 
1958:Generated_Source\PSoC4/CyLFClk.c **** 
1959:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1960:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtSetMatch
1961:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1962:Generated_Source\PSoC4/CyLFClk.c ****     *
1963:Generated_Source\PSoC4/CyLFClk.c ****     * \brief Configures the WDT counter match comparison value.
1964:Generated_Source\PSoC4/CyLFClk.c ****     *
1965:Generated_Source\PSoC4/CyLFClk.c ****     * \param match Valid range [0-65535]. The value to be used to match against 
1966:Generated_Source\PSoC4/CyLFClk.c ****     * the counter.
1967:Generated_Source\PSoC4/CyLFClk.c ****     *
1968:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1969:Generated_Source\PSoC4/CyLFClk.c ****     void CySysWdtSetMatch(uint32 match)
ARM GAS  C:\Users\TIMCHE~1\AppData\Local\Temp\ccPS59ly.s 			page 44


1970:Generated_Source\PSoC4/CyLFClk.c ****     {
 438              		.loc 1 1970 0
 439              		.cfi_startproc
 440              	.LVL22:
1971:Generated_Source\PSoC4/CyLFClk.c ****         match &= CY_SYS_WDT_MATCH_MASK;
1972:Generated_Source\PSoC4/CyLFClk.c ****         CY_SYS_WDT_MATCH_REG = (CY_SYS_WDT_MATCH_REG & (uint32)(~CY_SYS_WDT_MATCH_MASK)) | match;
 441              		.loc 1 1972 0
 442 0000 034A     		ldr	r2, .L38
1971:Generated_Source\PSoC4/CyLFClk.c ****         match &= CY_SYS_WDT_MATCH_MASK;
 443              		.loc 1 1971 0
 444 0002 80B2     		uxth	r0, r0
 445              	.LVL23:
 446              		.loc 1 1972 0
 447 0004 1368     		ldr	r3, [r2]
1973:Generated_Source\PSoC4/CyLFClk.c ****     }
 448              		.loc 1 1973 0
 449              		@ sp needed
1972:Generated_Source\PSoC4/CyLFClk.c ****     }
 450              		.loc 1 1972 0
 451 0006 1B0C     		lsr	r3, r3, #16
 452 0008 1B04     		lsl	r3, r3, #16
 453 000a 1843     		orr	r0, r3
 454 000c 1060     		str	r0, [r2]
 455              		.loc 1 1973 0
 456 000e 7047     		bx	lr
 457              	.L39:
 458              		.align	2
 459              	.L38:
 460 0010 40000340 		.word	1073938496
 461              		.cfi_endproc
 462              	.LFE8:
 463              		.size	CySysWdtSetMatch, .-CySysWdtSetMatch
 464              		.section	.text.CySysWdtGetMatch,"ax",%progbits
 465              		.align	1
 466              		.global	CySysWdtGetMatch
 467              		.code	16
 468              		.thumb_func
 469              		.type	CySysWdtGetMatch, %function
 470              	CySysWdtGetMatch:
 471              	.LFB9:
1974:Generated_Source\PSoC4/CyLFClk.c **** 
1975:Generated_Source\PSoC4/CyLFClk.c **** 
1976:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1977:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtGetMatch
1978:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1979:Generated_Source\PSoC4/CyLFClk.c ****     *
1980:Generated_Source\PSoC4/CyLFClk.c ****     * \brief Reads the WDT counter match comparison value.
1981:Generated_Source\PSoC4/CyLFClk.c ****     *
1982:Generated_Source\PSoC4/CyLFClk.c ****     * \return The counter match value.
1983:Generated_Source\PSoC4/CyLFClk.c ****     *
1984:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
1985:Generated_Source\PSoC4/CyLFClk.c ****     uint32 CySysWdtGetMatch(void)
1986:Generated_Source\PSoC4/CyLFClk.c ****     {
 472              		.loc 1 1986 0
 473              		.cfi_startproc
1987:Generated_Source\PSoC4/CyLFClk.c ****         return (CY_SYS_WDT_MATCH_REG & CY_SYS_WDT_MATCH_MASK);
 474              		.loc 1 1987 0
ARM GAS  C:\Users\TIMCHE~1\AppData\Local\Temp\ccPS59ly.s 			page 45


 475 0000 014B     		ldr	r3, .L41
1988:Generated_Source\PSoC4/CyLFClk.c ****     }
 476              		.loc 1 1988 0
 477              		@ sp needed
1987:Generated_Source\PSoC4/CyLFClk.c ****         return (CY_SYS_WDT_MATCH_REG & CY_SYS_WDT_MATCH_MASK);
 478              		.loc 1 1987 0
 479 0002 1868     		ldr	r0, [r3]
 480 0004 80B2     		uxth	r0, r0
 481              		.loc 1 1988 0
 482 0006 7047     		bx	lr
 483              	.L42:
 484              		.align	2
 485              	.L41:
 486 0008 40000340 		.word	1073938496
 487              		.cfi_endproc
 488              	.LFE9:
 489              		.size	CySysWdtGetMatch, .-CySysWdtGetMatch
 490              		.section	.text.CySysWdtGetCount,"ax",%progbits
 491              		.align	1
 492              		.global	CySysWdtGetCount
 493              		.code	16
 494              		.thumb_func
 495              		.type	CySysWdtGetCount, %function
 496              	CySysWdtGetCount:
 497              	.LFB10:
1989:Generated_Source\PSoC4/CyLFClk.c **** 
1990:Generated_Source\PSoC4/CyLFClk.c **** 
1991:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
1992:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtGetCount
1993:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
1994:Generated_Source\PSoC4/CyLFClk.c ****     *
1995:Generated_Source\PSoC4/CyLFClk.c ****     * \brief Reads the current WDT counter value.
1996:Generated_Source\PSoC4/CyLFClk.c ****     *
1997:Generated_Source\PSoC4/CyLFClk.c ****     * \return A live counter value.
1998:Generated_Source\PSoC4/CyLFClk.c ****     *
1999:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
2000:Generated_Source\PSoC4/CyLFClk.c ****     uint32 CySysWdtGetCount(void)
2001:Generated_Source\PSoC4/CyLFClk.c ****     {
 498              		.loc 1 2001 0
 499              		.cfi_startproc
2002:Generated_Source\PSoC4/CyLFClk.c ****         return ((uint32)CY_SYS_WDT_COUNTER_REG);
 500              		.loc 1 2002 0
 501 0000 014B     		ldr	r3, .L44
2003:Generated_Source\PSoC4/CyLFClk.c ****     }
 502              		.loc 1 2003 0
 503              		@ sp needed
2002:Generated_Source\PSoC4/CyLFClk.c ****         return ((uint32)CY_SYS_WDT_COUNTER_REG);
 504              		.loc 1 2002 0
 505 0002 1868     		ldr	r0, [r3]
 506              		.loc 1 2003 0
 507 0004 7047     		bx	lr
 508              	.L45:
 509 0006 C046     		.align	2
 510              	.L44:
 511 0008 3C000340 		.word	1073938492
 512              		.cfi_endproc
 513              	.LFE10:
ARM GAS  C:\Users\TIMCHE~1\AppData\Local\Temp\ccPS59ly.s 			page 46


 514              		.size	CySysWdtGetCount, .-CySysWdtGetCount
 515              		.section	.text.CySysWdtSetIgnoreBits,"ax",%progbits
 516              		.align	1
 517              		.global	CySysWdtSetIgnoreBits
 518              		.code	16
 519              		.thumb_func
 520              		.type	CySysWdtSetIgnoreBits, %function
 521              	CySysWdtSetIgnoreBits:
 522              	.LFB11:
2004:Generated_Source\PSoC4/CyLFClk.c **** 
2005:Generated_Source\PSoC4/CyLFClk.c **** 
2006:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
2007:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtSetIgnoreBits
2008:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
2009:Generated_Source\PSoC4/CyLFClk.c ****     *
2010:Generated_Source\PSoC4/CyLFClk.c ****     * \brief
2011:Generated_Source\PSoC4/CyLFClk.c ****     * Configures the number of the MSB bits of the watchdog timer that are not
2012:Generated_Source\PSoC4/CyLFClk.c ****     * checked against the match.
2013:Generated_Source\PSoC4/CyLFClk.c ****     *
2014:Generated_Source\PSoC4/CyLFClk.c ****     * \param bitsNum Valid range [0-15]. The number of the MSB bits.
2015:Generated_Source\PSoC4/CyLFClk.c ****     *
2016:Generated_Source\PSoC4/CyLFClk.c ****     * \details The value of bitsNum controls the time-to-reset of the watchdog
2017:Generated_Source\PSoC4/CyLFClk.c ****     * (which happens after 3 successive matches).
2018:Generated_Source\PSoC4/CyLFClk.c ****     *
2019:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
2020:Generated_Source\PSoC4/CyLFClk.c ****     void CySysWdtSetIgnoreBits(uint32 bitsNum)
2021:Generated_Source\PSoC4/CyLFClk.c ****     {
 523              		.loc 1 2021 0
 524              		.cfi_startproc
 525              	.LVL24:
2022:Generated_Source\PSoC4/CyLFClk.c ****         bitsNum = ((uint32)(bitsNum << CY_SYS_WDT_IGNORE_BITS_SHIFT) & CY_SYS_WDT_IGNORE_BITS_MASK)
 526              		.loc 1 2022 0
 527 0000 F021     		mov	r1, #240
2021:Generated_Source\PSoC4/CyLFClk.c ****         bitsNum = ((uint32)(bitsNum << CY_SYS_WDT_IGNORE_BITS_SHIFT) & CY_SYS_WDT_IGNORE_BITS_MASK)
 528              		.loc 1 2021 0
 529 0002 10B5     		push	{r4, lr}
 530              		.cfi_def_cfa_offset 8
 531              		.cfi_offset 4, -8
 532              		.cfi_offset 14, -4
2023:Generated_Source\PSoC4/CyLFClk.c ****         CY_SYS_WDT_MATCH_REG = (CY_SYS_WDT_MATCH_REG & (uint32)(~CY_SYS_WDT_IGNORE_BITS_MASK)) | bi
 533              		.loc 1 2023 0
 534 0004 044C     		ldr	r4, .L47
2022:Generated_Source\PSoC4/CyLFClk.c ****         bitsNum = ((uint32)(bitsNum << CY_SYS_WDT_IGNORE_BITS_SHIFT) & CY_SYS_WDT_IGNORE_BITS_MASK)
 535              		.loc 1 2022 0
 536 0006 0204     		lsl	r2, r0, #16
 537              	.LVL25:
 538              		.loc 1 2023 0
 539 0008 044B     		ldr	r3, .L47+4
 540 000a 2068     		ldr	r0, [r4]
2022:Generated_Source\PSoC4/CyLFClk.c ****         bitsNum = ((uint32)(bitsNum << CY_SYS_WDT_IGNORE_BITS_SHIFT) & CY_SYS_WDT_IGNORE_BITS_MASK)
 541              		.loc 1 2022 0
 542 000c 0903     		lsl	r1, r1, #12
 543 000e 0A40     		and	r2, r1
 544              	.LVL26:
 545              		.loc 1 2023 0
 546 0010 0340     		and	r3, r0
 547 0012 1A43     		orr	r2, r3
ARM GAS  C:\Users\TIMCHE~1\AppData\Local\Temp\ccPS59ly.s 			page 47


 548 0014 2260     		str	r2, [r4]
2024:Generated_Source\PSoC4/CyLFClk.c ****     }
 549              		.loc 1 2024 0
 550              		@ sp needed
 551 0016 10BD     		pop	{r4, pc}
 552              	.L48:
 553              		.align	2
 554              	.L47:
 555 0018 40000340 		.word	1073938496
 556 001c FFFFF0FF 		.word	-983041
 557              		.cfi_endproc
 558              	.LFE11:
 559              		.size	CySysWdtSetIgnoreBits, .-CySysWdtSetIgnoreBits
 560              		.section	.text.CySysWdtGetIgnoreBits,"ax",%progbits
 561              		.align	1
 562              		.global	CySysWdtGetIgnoreBits
 563              		.code	16
 564              		.thumb_func
 565              		.type	CySysWdtGetIgnoreBits, %function
 566              	CySysWdtGetIgnoreBits:
 567              	.LFB12:
2025:Generated_Source\PSoC4/CyLFClk.c **** 
2026:Generated_Source\PSoC4/CyLFClk.c **** 
2027:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
2028:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtGetIgnoreBits
2029:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
2030:Generated_Source\PSoC4/CyLFClk.c ****     *
2031:Generated_Source\PSoC4/CyLFClk.c ****     * \brief
2032:Generated_Source\PSoC4/CyLFClk.c ****     * Reads the number of the  MSB bits of the watchdog timer that are not
2033:Generated_Source\PSoC4/CyLFClk.c ****     * checked against the match.
2034:Generated_Source\PSoC4/CyLFClk.c ****     *
2035:Generated_Source\PSoC4/CyLFClk.c ****     * \return The number of the MSB bits.
2036:Generated_Source\PSoC4/CyLFClk.c ****     *
2037:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
2038:Generated_Source\PSoC4/CyLFClk.c ****     uint32 CySysWdtGetIgnoreBits(void)
2039:Generated_Source\PSoC4/CyLFClk.c ****     {
 568              		.loc 1 2039 0
 569              		.cfi_startproc
2040:Generated_Source\PSoC4/CyLFClk.c ****         return((uint32)((CY_SYS_WDT_MATCH_REG & CY_SYS_WDT_IGNORE_BITS_MASK) >> CY_SYS_WDT_IGNORE_B
 570              		.loc 1 2040 0
 571 0000 024B     		ldr	r3, .L50
2041:Generated_Source\PSoC4/CyLFClk.c ****     }
 572              		.loc 1 2041 0
 573              		@ sp needed
2040:Generated_Source\PSoC4/CyLFClk.c ****         return((uint32)((CY_SYS_WDT_MATCH_REG & CY_SYS_WDT_IGNORE_BITS_MASK) >> CY_SYS_WDT_IGNORE_B
 574              		.loc 1 2040 0
 575 0002 1868     		ldr	r0, [r3]
 576 0004 0003     		lsl	r0, r0, #12
 577 0006 000F     		lsr	r0, r0, #28
 578              		.loc 1 2041 0
 579 0008 7047     		bx	lr
 580              	.L51:
 581 000a C046     		.align	2
 582              	.L50:
 583 000c 40000340 		.word	1073938496
 584              		.cfi_endproc
 585              	.LFE12:
ARM GAS  C:\Users\TIMCHE~1\AppData\Local\Temp\ccPS59ly.s 			page 48


 586              		.size	CySysWdtGetIgnoreBits, .-CySysWdtGetIgnoreBits
 587              		.section	.text.CySysWdtClearInterrupt,"ax",%progbits
 588              		.align	1
 589              		.global	CySysWdtClearInterrupt
 590              		.code	16
 591              		.thumb_func
 592              		.type	CySysWdtClearInterrupt, %function
 593              	CySysWdtClearInterrupt:
 594              	.LFB13:
2042:Generated_Source\PSoC4/CyLFClk.c **** 
2043:Generated_Source\PSoC4/CyLFClk.c **** 
2044:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
2045:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtClearInterrupt
2046:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
2047:Generated_Source\PSoC4/CyLFClk.c ****     *
2048:Generated_Source\PSoC4/CyLFClk.c ****     * \brief
2049:Generated_Source\PSoC4/CyLFClk.c ****     * Feeds the watchdog.
2050:Generated_Source\PSoC4/CyLFClk.c ****     * Cleans the WDT match flag which is set every time the WDT counter reaches a 
2051:Generated_Source\PSoC4/CyLFClk.c ****     * WDT match value. Two unserviced interrupts lead to a system reset 
2052:Generated_Source\PSoC4/CyLFClk.c ****     * (i.e. at the third match).
2053:Generated_Source\PSoC4/CyLFClk.c ****     *
2054:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
2055:Generated_Source\PSoC4/CyLFClk.c ****     void CySysWdtClearInterrupt(void)
2056:Generated_Source\PSoC4/CyLFClk.c ****     {
 595              		.loc 1 2056 0
 596              		.cfi_startproc
2057:Generated_Source\PSoC4/CyLFClk.c ****         CY_SYS_SRSS_INTR_REG |= CY_SYS_WDT_LOWER_BIT_MASK;
 597              		.loc 1 2057 0
 598 0000 0121     		mov	r1, #1
 599 0002 024A     		ldr	r2, .L53
2058:Generated_Source\PSoC4/CyLFClk.c ****     }
 600              		.loc 1 2058 0
 601              		@ sp needed
2057:Generated_Source\PSoC4/CyLFClk.c ****         CY_SYS_SRSS_INTR_REG |= CY_SYS_WDT_LOWER_BIT_MASK;
 602              		.loc 1 2057 0
 603 0004 1368     		ldr	r3, [r2]
 604 0006 0B43     		orr	r3, r1
 605 0008 1360     		str	r3, [r2]
 606              		.loc 1 2058 0
 607 000a 7047     		bx	lr
 608              	.L54:
 609              		.align	2
 610              	.L53:
 611 000c 44000340 		.word	1073938500
 612              		.cfi_endproc
 613              	.LFE13:
 614              		.size	CySysWdtClearInterrupt, .-CySysWdtClearInterrupt
 615              		.section	.text.CySysWdtMaskInterrupt,"ax",%progbits
 616              		.align	1
 617              		.global	CySysWdtMaskInterrupt
 618              		.code	16
 619              		.thumb_func
 620              		.type	CySysWdtMaskInterrupt, %function
 621              	CySysWdtMaskInterrupt:
 622              	.LFB14:
2059:Generated_Source\PSoC4/CyLFClk.c **** 
2060:Generated_Source\PSoC4/CyLFClk.c **** 
ARM GAS  C:\Users\TIMCHE~1\AppData\Local\Temp\ccPS59ly.s 			page 49


2061:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
2062:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtMaskInterrupt
2063:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
2064:Generated_Source\PSoC4/CyLFClk.c ****     *
2065:Generated_Source\PSoC4/CyLFClk.c ****     * \brief
2066:Generated_Source\PSoC4/CyLFClk.c ****     * After masking interrupts from WDT, they are not passed to CPU.
2067:Generated_Source\PSoC4/CyLFClk.c ****     * This function does not disable WDT reset generation.
2068:Generated_Source\PSoC4/CyLFClk.c ****     *
2069:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
2070:Generated_Source\PSoC4/CyLFClk.c ****     void CySysWdtMaskInterrupt(void)
2071:Generated_Source\PSoC4/CyLFClk.c ****     {
 623              		.loc 1 2071 0
 624              		.cfi_startproc
2072:Generated_Source\PSoC4/CyLFClk.c ****         CY_SYS_SRSS_INTR_MASK_REG &= (uint32)(~ (uint32)CY_SYS_WDT_LOWER_BIT_MASK);
 625              		.loc 1 2072 0
 626 0000 0121     		mov	r1, #1
 627 0002 024A     		ldr	r2, .L56
2073:Generated_Source\PSoC4/CyLFClk.c ****     }
 628              		.loc 1 2073 0
 629              		@ sp needed
2072:Generated_Source\PSoC4/CyLFClk.c ****         CY_SYS_SRSS_INTR_MASK_REG &= (uint32)(~ (uint32)CY_SYS_WDT_LOWER_BIT_MASK);
 630              		.loc 1 2072 0
 631 0004 1368     		ldr	r3, [r2]
 632 0006 8B43     		bic	r3, r1
 633 0008 1360     		str	r3, [r2]
 634              		.loc 1 2073 0
 635 000a 7047     		bx	lr
 636              	.L57:
 637              		.align	2
 638              	.L56:
 639 000c 4C000340 		.word	1073938508
 640              		.cfi_endproc
 641              	.LFE14:
 642              		.size	CySysWdtMaskInterrupt, .-CySysWdtMaskInterrupt
 643              		.section	.text.CySysWdtUnmaskInterrupt,"ax",%progbits
 644              		.align	1
 645              		.global	CySysWdtUnmaskInterrupt
 646              		.code	16
 647              		.thumb_func
 648              		.type	CySysWdtUnmaskInterrupt, %function
 649              	CySysWdtUnmaskInterrupt:
 650              	.LFB15:
2074:Generated_Source\PSoC4/CyLFClk.c **** 
2075:Generated_Source\PSoC4/CyLFClk.c **** 
2076:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
2077:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtUnmaskInterrupt
2078:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
2079:Generated_Source\PSoC4/CyLFClk.c ****     *
2080:Generated_Source\PSoC4/CyLFClk.c ****     * \brief
2081:Generated_Source\PSoC4/CyLFClk.c ****     * After unmasking interrupts from WDT, they are passed to CPU.
2082:Generated_Source\PSoC4/CyLFClk.c ****     * This function does not impact the reset generation.
2083:Generated_Source\PSoC4/CyLFClk.c ****     *
2084:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
2085:Generated_Source\PSoC4/CyLFClk.c ****     void CySysWdtUnmaskInterrupt(void)
2086:Generated_Source\PSoC4/CyLFClk.c ****     {
 651              		.loc 1 2086 0
 652              		.cfi_startproc
ARM GAS  C:\Users\TIMCHE~1\AppData\Local\Temp\ccPS59ly.s 			page 50


2087:Generated_Source\PSoC4/CyLFClk.c ****         CY_SYS_SRSS_INTR_MASK_REG |= CY_SYS_WDT_LOWER_BIT_MASK;
 653              		.loc 1 2087 0
 654 0000 0121     		mov	r1, #1
 655 0002 024A     		ldr	r2, .L59
2088:Generated_Source\PSoC4/CyLFClk.c ****     }
 656              		.loc 1 2088 0
 657              		@ sp needed
2087:Generated_Source\PSoC4/CyLFClk.c ****         CY_SYS_SRSS_INTR_MASK_REG |= CY_SYS_WDT_LOWER_BIT_MASK;
 658              		.loc 1 2087 0
 659 0004 1368     		ldr	r3, [r2]
 660 0006 0B43     		orr	r3, r1
 661 0008 1360     		str	r3, [r2]
 662              		.loc 1 2088 0
 663 000a 7047     		bx	lr
 664              	.L60:
 665              		.align	2
 666              	.L59:
 667 000c 4C000340 		.word	1073938508
 668              		.cfi_endproc
 669              	.LFE15:
 670              		.size	CySysWdtUnmaskInterrupt, .-CySysWdtUnmaskInterrupt
 671              		.section	.text.CySysWdtSetInterruptCallback,"ax",%progbits
 672              		.align	1
 673              		.global	CySysWdtSetInterruptCallback
 674              		.code	16
 675              		.thumb_func
 676              		.type	CySysWdtSetInterruptCallback, %function
 677              	CySysWdtSetInterruptCallback:
 678              	.LFB16:
2089:Generated_Source\PSoC4/CyLFClk.c **** 
2090:Generated_Source\PSoC4/CyLFClk.c **** 
2091:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
2092:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtSetIsrCallback
2093:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
2094:Generated_Source\PSoC4/CyLFClk.c ****     *
2095:Generated_Source\PSoC4/CyLFClk.c ****     * \brief
2096:Generated_Source\PSoC4/CyLFClk.c ****     * Sets the ISR callback function for the WDT counter
2097:Generated_Source\PSoC4/CyLFClk.c ****     *
2098:Generated_Source\PSoC4/CyLFClk.c ****     * \param function The pointer to the callback function.
2099:Generated_Source\PSoC4/CyLFClk.c ****     *
2100:Generated_Source\PSoC4/CyLFClk.c ****     * \return The pointer to a previous callback function.
2101:Generated_Source\PSoC4/CyLFClk.c ****     *
2102:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
2103:Generated_Source\PSoC4/CyLFClk.c ****     cyWdtCallback CySysWdtSetInterruptCallback(cyWdtCallback function)
2104:Generated_Source\PSoC4/CyLFClk.c ****     {
 679              		.loc 1 2104 0
 680              		.cfi_startproc
 681              	.LVL27:
2105:Generated_Source\PSoC4/CyLFClk.c ****         cyWdtCallback prevCallback = (void *)0;
2106:Generated_Source\PSoC4/CyLFClk.c **** 
2107:Generated_Source\PSoC4/CyLFClk.c ****         prevCallback = cySysWdtCallback;
 682              		.loc 1 2107 0
 683 0000 024B     		ldr	r3, .L62
2108:Generated_Source\PSoC4/CyLFClk.c ****         cySysWdtCallback = function;
2109:Generated_Source\PSoC4/CyLFClk.c **** 
2110:Generated_Source\PSoC4/CyLFClk.c ****         return(prevCallback);
2111:Generated_Source\PSoC4/CyLFClk.c ****     }
ARM GAS  C:\Users\TIMCHE~1\AppData\Local\Temp\ccPS59ly.s 			page 51


 684              		.loc 1 2111 0
 685              		@ sp needed
2107:Generated_Source\PSoC4/CyLFClk.c ****         cySysWdtCallback = function;
 686              		.loc 1 2107 0
 687 0002 5A68     		ldr	r2, [r3, #4]
 688              	.LVL28:
2108:Generated_Source\PSoC4/CyLFClk.c ****         cySysWdtCallback = function;
 689              		.loc 1 2108 0
 690 0004 5860     		str	r0, [r3, #4]
 691              		.loc 1 2111 0
 692 0006 101C     		mov	r0, r2
 693              	.LVL29:
 694 0008 7047     		bx	lr
 695              	.L63:
 696 000a C046     		.align	2
 697              	.L62:
 698 000c 00000000 		.word	.LANCHOR0
 699              		.cfi_endproc
 700              	.LFE16:
 701              		.size	CySysWdtSetInterruptCallback, .-CySysWdtSetInterruptCallback
 702              		.section	.text.CySysWdtGetInterruptCallback,"ax",%progbits
 703              		.align	1
 704              		.global	CySysWdtGetInterruptCallback
 705              		.code	16
 706              		.thumb_func
 707              		.type	CySysWdtGetInterruptCallback, %function
 708              	CySysWdtGetInterruptCallback:
 709              	.LFB17:
2112:Generated_Source\PSoC4/CyLFClk.c **** 
2113:Generated_Source\PSoC4/CyLFClk.c **** 
2114:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
2115:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtGetIsrCallback
2116:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
2117:Generated_Source\PSoC4/CyLFClk.c ****     *
2118:Generated_Source\PSoC4/CyLFClk.c ****     * \brief
2119:Generated_Source\PSoC4/CyLFClk.c ****     * Gets the ISR callback function for the WDT counter
2120:Generated_Source\PSoC4/CyLFClk.c ****     *
2121:Generated_Source\PSoC4/CyLFClk.c ****     * \return The pointer to the callback function registered for WDT.
2122:Generated_Source\PSoC4/CyLFClk.c ****     *
2123:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
2124:Generated_Source\PSoC4/CyLFClk.c ****     cyWdtCallback CySysWdtGetInterruptCallback(void)
2125:Generated_Source\PSoC4/CyLFClk.c ****     {
 710              		.loc 1 2125 0
 711              		.cfi_startproc
2126:Generated_Source\PSoC4/CyLFClk.c ****         return(cySysWdtCallback);
 712              		.loc 1 2126 0
 713 0000 014B     		ldr	r3, .L65
2127:Generated_Source\PSoC4/CyLFClk.c ****     }
 714              		.loc 1 2127 0
 715              		@ sp needed
2126:Generated_Source\PSoC4/CyLFClk.c ****         return(cySysWdtCallback);
 716              		.loc 1 2126 0
 717 0002 5868     		ldr	r0, [r3, #4]
 718              		.loc 1 2127 0
 719 0004 7047     		bx	lr
 720              	.L66:
 721 0006 C046     		.align	2
ARM GAS  C:\Users\TIMCHE~1\AppData\Local\Temp\ccPS59ly.s 			page 52


 722              	.L65:
 723 0008 00000000 		.word	.LANCHOR0
 724              		.cfi_endproc
 725              	.LFE17:
 726              		.size	CySysWdtGetInterruptCallback, .-CySysWdtGetInterruptCallback
 727              		.section	.text.CySysWdtIsr,"ax",%progbits
 728              		.align	1
 729              		.global	CySysWdtIsr
 730              		.code	16
 731              		.thumb_func
 732              		.type	CySysWdtIsr, %function
 733              	CySysWdtIsr:
 734              	.LFB18:
2128:Generated_Source\PSoC4/CyLFClk.c **** 
2129:Generated_Source\PSoC4/CyLFClk.c **** 
2130:Generated_Source\PSoC4/CyLFClk.c ****     /*******************************************************************************
2131:Generated_Source\PSoC4/CyLFClk.c ****     * Function Name: CySysWdtIsr
2132:Generated_Source\PSoC4/CyLFClk.c ****     ****************************************************************************//**
2133:Generated_Source\PSoC4/CyLFClk.c ****     *
2134:Generated_Source\PSoC4/CyLFClk.c ****     * \brief
2135:Generated_Source\PSoC4/CyLFClk.c ****     * This is the handler of the WDT interrupt in CPU NVIC.
2136:Generated_Source\PSoC4/CyLFClk.c ****     *
2137:Generated_Source\PSoC4/CyLFClk.c ****     * The handler calls the respective callback functions configured by the user 
2138:Generated_Source\PSoC4/CyLFClk.c ****     * by using CySysWdtSetIsrCallback() API.
2139:Generated_Source\PSoC4/CyLFClk.c ****     *
2140:Generated_Source\PSoC4/CyLFClk.c ****     *
2141:Generated_Source\PSoC4/CyLFClk.c ****     * \details
2142:Generated_Source\PSoC4/CyLFClk.c ****     * This function clears the WDT interrupt every time when it is called.
2143:Generated_Source\PSoC4/CyLFClk.c ****     * Reset after the 3rd interrupt does not happen if this function is registered
2144:Generated_Source\PSoC4/CyLFClk.c ****     * as the interrupt handler even if the "Watchdog with Interrupt" mode is
2145:Generated_Source\PSoC4/CyLFClk.c ****     * selected on the "Low Frequency Clocks" tab.
2146:Generated_Source\PSoC4/CyLFClk.c ****     *
2147:Generated_Source\PSoC4/CyLFClk.c ****     *******************************************************************************/
2148:Generated_Source\PSoC4/CyLFClk.c ****     void CySysWdtIsr(void)
2149:Generated_Source\PSoC4/CyLFClk.c ****     {
 735              		.loc 1 2149 0
 736              		.cfi_startproc
 737 0000 08B5     		push	{r3, lr}
 738              		.cfi_def_cfa_offset 8
 739              		.cfi_offset 3, -8
 740              		.cfi_offset 14, -4
2150:Generated_Source\PSoC4/CyLFClk.c ****         if(cySysWdtCallback != (void *) 0)
 741              		.loc 1 2150 0
 742 0002 044B     		ldr	r3, .L72
 743 0004 5B68     		ldr	r3, [r3, #4]
 744 0006 002B     		cmp	r3, #0
 745 0008 00D0     		beq	.L68
2151:Generated_Source\PSoC4/CyLFClk.c ****         {
2152:Generated_Source\PSoC4/CyLFClk.c ****             (void)(cySysWdtCallback)();
 746              		.loc 1 2152 0
 747 000a 9847     		blx	r3
 748              	.LVL30:
 749              	.L68:
2153:Generated_Source\PSoC4/CyLFClk.c ****         }
2154:Generated_Source\PSoC4/CyLFClk.c **** 
2155:Generated_Source\PSoC4/CyLFClk.c ****         CySysWdtClearInterrupt();
 750              		.loc 1 2155 0
ARM GAS  C:\Users\TIMCHE~1\AppData\Local\Temp\ccPS59ly.s 			page 53


 751 000c FFF7FEFF 		bl	CySysWdtClearInterrupt
 752              	.LVL31:
2156:Generated_Source\PSoC4/CyLFClk.c ****     }
 753              		.loc 1 2156 0
 754              		@ sp needed
 755 0010 08BD     		pop	{r3, pc}
 756              	.L73:
 757 0012 C046     		.align	2
 758              	.L72:
 759 0014 00000000 		.word	.LANCHOR0
 760              		.cfi_endproc
 761              	.LFE18:
 762              		.size	CySysWdtIsr, .-CySysWdtIsr
 763              		.bss
 764              		.align	2
 765              		.set	.LANCHOR0,. + 0
 766              		.type	compensateRunningStatus.4659, %object
 767              		.size	compensateRunningStatus.4659, 4
 768              	compensateRunningStatus.4659:
 769 0000 00000000 		.space	4
 770              		.type	cySysWdtCallback, %object
 771              		.size	cySysWdtCallback, 4
 772              	cySysWdtCallback:
 773 0004 00000000 		.space	4
 774              		.text
 775              	.Letext0:
 776              		.file 2 "Generated_Source\\PSoC4\\cytypes.h"
 777              		.file 3 "Generated_Source\\PSoC4\\CyLFClk.h"
 778              		.file 4 "Generated_Source\\PSoC4\\CyLib.h"
 779              		.section	.debug_info,"",%progbits
 780              	.Ldebug_info0:
 781 0000 23030000 		.4byte	0x323
 782 0004 0400     		.2byte	0x4
 783 0006 00000000 		.4byte	.Ldebug_abbrev0
 784 000a 04       		.byte	0x4
 785 000b 01       		.uleb128 0x1
 786 000c 39000000 		.4byte	.LASF48
 787 0010 01       		.byte	0x1
 788 0011 42010000 		.4byte	.LASF49
 789 0015 61030000 		.4byte	.LASF50
 790 0019 00000000 		.4byte	.Ldebug_ranges0+0
 791 001d 00000000 		.4byte	0
 792 0021 00000000 		.4byte	.Ldebug_line0
 793 0025 02       		.uleb128 0x2
 794 0026 01       		.byte	0x1
 795 0027 06       		.byte	0x6
 796 0028 14040000 		.4byte	.LASF0
 797 002c 02       		.uleb128 0x2
 798 002d 01       		.byte	0x1
 799 002e 08       		.byte	0x8
 800 002f 63010000 		.4byte	.LASF1
 801 0033 02       		.uleb128 0x2
 802 0034 02       		.byte	0x2
 803 0035 05       		.byte	0x5
 804 0036 57030000 		.4byte	.LASF2
 805 003a 02       		.uleb128 0x2
 806 003b 02       		.byte	0x2
ARM GAS  C:\Users\TIMCHE~1\AppData\Local\Temp\ccPS59ly.s 			page 54


 807 003c 07       		.byte	0x7
 808 003d AF010000 		.4byte	.LASF3
 809 0041 02       		.uleb128 0x2
 810 0042 04       		.byte	0x4
 811 0043 05       		.byte	0x5
 812 0044 FE030000 		.4byte	.LASF4
 813 0048 02       		.uleb128 0x2
 814 0049 04       		.byte	0x4
 815 004a 07       		.byte	0x7
 816 004b 95010000 		.4byte	.LASF5
 817 004f 02       		.uleb128 0x2
 818 0050 08       		.byte	0x8
 819 0051 05       		.byte	0x5
 820 0052 10030000 		.4byte	.LASF6
 821 0056 02       		.uleb128 0x2
 822 0057 08       		.byte	0x8
 823 0058 07       		.byte	0x7
 824 0059 71020000 		.4byte	.LASF7
 825 005d 03       		.uleb128 0x3
 826 005e 04       		.byte	0x4
 827 005f 05       		.byte	0x5
 828 0060 696E7400 		.ascii	"int\000"
 829 0064 02       		.uleb128 0x2
 830 0065 04       		.byte	0x4
 831 0066 07       		.byte	0x7
 832 0067 4F020000 		.4byte	.LASF8
 833 006b 04       		.uleb128 0x4
 834 006c 30020000 		.4byte	.LASF12
 835 0070 02       		.byte	0x2
 836 0071 BB01     		.2byte	0x1bb
 837 0073 48000000 		.4byte	0x48
 838 0077 02       		.uleb128 0x2
 839 0078 04       		.byte	0x4
 840 0079 04       		.byte	0x4
 841 007a 3C010000 		.4byte	.LASF9
 842 007e 02       		.uleb128 0x2
 843 007f 08       		.byte	0x8
 844 0080 04       		.byte	0x4
 845 0081 DD010000 		.4byte	.LASF10
 846 0085 02       		.uleb128 0x2
 847 0086 01       		.byte	0x1
 848 0087 08       		.byte	0x8
 849 0088 2B030000 		.4byte	.LASF11
 850 008c 04       		.uleb128 0x4
 851 008d 19000000 		.4byte	.LASF13
 852 0091 02       		.byte	0x2
 853 0092 5B02     		.2byte	0x25b
 854 0094 48000000 		.4byte	0x48
 855 0098 04       		.uleb128 0x4
 856 0099 22000000 		.4byte	.LASF14
 857 009d 02       		.byte	0x2
 858 009e 6502     		.2byte	0x265
 859 00a0 A4000000 		.4byte	0xa4
 860 00a4 05       		.uleb128 0x5
 861 00a5 6B000000 		.4byte	0x6b
 862 00a9 06       		.uleb128 0x6
 863 00aa 04       		.byte	0x4
ARM GAS  C:\Users\TIMCHE~1\AppData\Local\Temp\ccPS59ly.s 			page 55


 864 00ab AF000000 		.4byte	0xaf
 865 00af 07       		.uleb128 0x7
 866 00b0 08       		.uleb128 0x8
 867 00b1 77010000 		.4byte	.LASF15
 868 00b5 03       		.byte	0x3
 869 00b6 58       		.byte	0x58
 870 00b7 A9000000 		.4byte	0xa9
 871 00bb 02       		.uleb128 0x2
 872 00bc 04       		.byte	0x4
 873 00bd 07       		.byte	0x7
 874 00be E5020000 		.4byte	.LASF16
 875 00c2 09       		.uleb128 0x9
 876 00c3 EA000000 		.4byte	.LASF17
 877 00c7 01       		.byte	0x1
 878 00c8 53       		.byte	0x53
 879 00c9 00000000 		.4byte	.LFB0
 880 00cd 14000000 		.4byte	.LFE0-.LFB0
 881 00d1 01       		.uleb128 0x1
 882 00d2 9C       		.byte	0x9c
 883 00d3 09       		.uleb128 0x9
 884 00d4 85010000 		.4byte	.LASF18
 885 00d8 01       		.byte	0x1
 886 00d9 6C       		.byte	0x6c
 887 00da 00000000 		.4byte	.LFB1
 888 00de 10000000 		.4byte	.LFE1-.LFB1
 889 00e2 01       		.uleb128 0x1
 890 00e3 9C       		.byte	0x9c
 891 00e4 09       		.uleb128 0x9
 892 00e5 F4010000 		.4byte	.LASF19
 893 00e9 01       		.byte	0x1
 894 00ea A8       		.byte	0xa8
 895 00eb 00000000 		.4byte	.LFB2
 896 00ef 34000000 		.4byte	.LFE2-.LFB2
 897 00f3 01       		.uleb128 0x1
 898 00f4 9C       		.byte	0x9c
 899 00f5 09       		.uleb128 0x9
 900 00f6 C2010000 		.4byte	.LASF20
 901 00fa 01       		.byte	0x1
 902 00fb C9       		.byte	0xc9
 903 00fc 00000000 		.4byte	.LFB3
 904 0100 28000000 		.4byte	.LFE3-.LFB3
 905 0104 01       		.uleb128 0x1
 906 0105 9C       		.byte	0x9c
 907 0106 0A       		.uleb128 0xa
 908 0107 3D040000 		.4byte	.LASF41
 909 010b 01       		.byte	0x1
 910 010c 0B01     		.2byte	0x10b
 911 010e 8C000000 		.4byte	0x8c
 912 0112 00000000 		.4byte	.LFB4
 913 0116 EC000000 		.4byte	.LFE4-.LFB4
 914 011a 01       		.uleb128 0x1
 915 011b 9C       		.byte	0x9c
 916 011c 93010000 		.4byte	0x193
 917 0120 0B       		.uleb128 0xb
 918 0121 1E030000 		.4byte	.LASF21
 919 0125 01       		.byte	0x1
 920 0126 0B01     		.2byte	0x10b
ARM GAS  C:\Users\TIMCHE~1\AppData\Local\Temp\ccPS59ly.s 			page 56


 921 0128 6B000000 		.4byte	0x6b
 922 012c 00000000 		.4byte	.LLST0
 923 0130 0B       		.uleb128 0xb
 924 0131 A0020000 		.4byte	.LASF22
 925 0135 01       		.byte	0x1
 926 0136 0B01     		.2byte	0x10b
 927 0138 93010000 		.4byte	0x193
 928 013c 48000000 		.4byte	.LLST1
 929 0140 0C       		.uleb128 0xc
 930 0141 D5000000 		.4byte	.LASF23
 931 0145 01       		.byte	0x1
 932 0146 0D01     		.2byte	0x10d
 933 0148 6B000000 		.4byte	0x6b
 934 014c 7F000000 		.4byte	.LLST2
 935 0150 0C       		.uleb128 0xc
 936 0151 5C020000 		.4byte	.LASF24
 937 0155 01       		.byte	0x1
 938 0156 0E01     		.2byte	0x10e
 939 0158 6B000000 		.4byte	0x6b
 940 015c 9D000000 		.4byte	.LLST3
 941 0160 0D       		.uleb128 0xd
 942 0161 37020000 		.4byte	.LASF25
 943 0165 01       		.byte	0x1
 944 0166 0F01     		.2byte	0x10f
 945 0168 6B000000 		.4byte	0x6b
 946 016c 05       		.uleb128 0x5
 947 016d 03       		.byte	0x3
 948 016e 00000000 		.4byte	compensateRunningStatus.4659
 949 0172 0C       		.uleb128 0xc
 950 0173 FB000000 		.4byte	.LASF26
 951 0177 01       		.byte	0x1
 952 0178 1001     		.2byte	0x110
 953 017a 6B000000 		.4byte	0x6b
 954 017e D1000000 		.4byte	.LLST4
 955 0182 0C       		.uleb128 0xc
 956 0183 07040000 		.4byte	.LASF27
 957 0187 01       		.byte	0x1
 958 0188 1101     		.2byte	0x111
 959 018a 8C000000 		.4byte	0x8c
 960 018e F5000000 		.4byte	.LLST5
 961 0192 00       		.byte	0
 962 0193 06       		.uleb128 0x6
 963 0194 04       		.byte	0x4
 964 0195 6B000000 		.4byte	0x6b
 965 0199 0E       		.uleb128 0xe
 966 019a 00000000 		.4byte	.LASF31
 967 019e 01       		.byte	0x1
 968 019f 7E07     		.2byte	0x77e
 969 01a1 6B000000 		.4byte	0x6b
 970 01a5 00000000 		.4byte	.LFB5
 971 01a9 18000000 		.4byte	.LFE5-.LFB5
 972 01ad 01       		.uleb128 0x1
 973 01ae 9C       		.byte	0x9c
 974 01af 0F       		.uleb128 0xf
 975 01b0 10020000 		.4byte	.LASF28
 976 01b4 01       		.byte	0x1
 977 01b5 9107     		.2byte	0x791
ARM GAS  C:\Users\TIMCHE~1\AppData\Local\Temp\ccPS59ly.s 			page 57


 978 01b7 00000000 		.4byte	.LFB6
 979 01bb 0C000000 		.4byte	.LFE6-.LFB6
 980 01bf 01       		.uleb128 0x1
 981 01c0 9C       		.byte	0x9c
 982 01c1 0F       		.uleb128 0xf
 983 01c2 E4010000 		.4byte	.LASF29
 984 01c6 01       		.byte	0x1
 985 01c7 A107     		.2byte	0x7a1
 986 01c9 00000000 		.4byte	.LFB7
 987 01cd 10000000 		.4byte	.LFE7-.LFB7
 988 01d1 01       		.uleb128 0x1
 989 01d2 9C       		.byte	0x9c
 990 01d3 10       		.uleb128 0x10
 991 01d4 28000000 		.4byte	.LASF34
 992 01d8 01       		.byte	0x1
 993 01d9 B107     		.2byte	0x7b1
 994 01db 00000000 		.4byte	.LFB8
 995 01df 14000000 		.4byte	.LFE8-.LFB8
 996 01e3 01       		.uleb128 0x1
 997 01e4 9C       		.byte	0x9c
 998 01e5 FA010000 		.4byte	0x1fa
 999 01e9 0B       		.uleb128 0xb
 1000 01ea 71010000 		.4byte	.LASF30
 1001 01ee 01       		.byte	0x1
 1002 01ef B107     		.2byte	0x7b1
 1003 01f1 6B000000 		.4byte	0x6b
 1004 01f5 20010000 		.4byte	.LLST6
 1005 01f9 00       		.byte	0
 1006 01fa 0E       		.uleb128 0xe
 1007 01fb 30030000 		.4byte	.LASF32
 1008 01ff 01       		.byte	0x1
 1009 0200 C107     		.2byte	0x7c1
 1010 0202 6B000000 		.4byte	0x6b
 1011 0206 00000000 		.4byte	.LFB9
 1012 020a 0C000000 		.4byte	.LFE9-.LFB9
 1013 020e 01       		.uleb128 0x1
 1014 020f 9C       		.byte	0x9c
 1015 0210 0E       		.uleb128 0xe
 1016 0211 1F020000 		.4byte	.LASF33
 1017 0215 01       		.byte	0x1
 1018 0216 D007     		.2byte	0x7d0
 1019 0218 6B000000 		.4byte	0x6b
 1020 021c 00000000 		.4byte	.LFB10
 1021 0220 0C000000 		.4byte	.LFE10-.LFB10
 1022 0224 01       		.uleb128 0x1
 1023 0225 9C       		.byte	0x9c
 1024 0226 10       		.uleb128 0x10
 1025 0227 41030000 		.4byte	.LASF35
 1026 022b 01       		.byte	0x1
 1027 022c E407     		.2byte	0x7e4
 1028 022e 00000000 		.4byte	.LFB11
 1029 0232 20000000 		.4byte	.LFE11-.LFB11
 1030 0236 01       		.uleb128 0x1
 1031 0237 9C       		.byte	0x9c
 1032 0238 4D020000 		.4byte	0x24d
 1033 023c 0B       		.uleb128 0xb
 1034 023d A7010000 		.4byte	.LASF36
ARM GAS  C:\Users\TIMCHE~1\AppData\Local\Temp\ccPS59ly.s 			page 58


 1035 0241 01       		.byte	0x1
 1036 0242 E407     		.2byte	0x7e4
 1037 0244 6B000000 		.4byte	0x6b
 1038 0248 56010000 		.4byte	.LLST7
 1039 024c 00       		.byte	0
 1040 024d 0E       		.uleb128 0xe
 1041 024e FA020000 		.4byte	.LASF37
 1042 0252 01       		.byte	0x1
 1043 0253 F607     		.2byte	0x7f6
 1044 0255 6B000000 		.4byte	0x6b
 1045 0259 00000000 		.4byte	.LFB12
 1046 025d 10000000 		.4byte	.LFE12-.LFB12
 1047 0261 01       		.uleb128 0x1
 1048 0262 9C       		.byte	0x9c
 1049 0263 0F       		.uleb128 0xf
 1050 0264 14010000 		.4byte	.LASF38
 1051 0268 01       		.byte	0x1
 1052 0269 0708     		.2byte	0x807
 1053 026b 00000000 		.4byte	.LFB13
 1054 026f 10000000 		.4byte	.LFE13-.LFB13
 1055 0273 01       		.uleb128 0x1
 1056 0274 9C       		.byte	0x9c
 1057 0275 0F       		.uleb128 0xf
 1058 0276 CF020000 		.4byte	.LASF39
 1059 027a 01       		.byte	0x1
 1060 027b 1608     		.2byte	0x816
 1061 027d 00000000 		.4byte	.LFB14
 1062 0281 10000000 		.4byte	.LFE14-.LFB14
 1063 0285 01       		.uleb128 0x1
 1064 0286 9C       		.byte	0x9c
 1065 0287 0F       		.uleb128 0xf
 1066 0288 88020000 		.4byte	.LASF40
 1067 028c 01       		.byte	0x1
 1068 028d 2508     		.2byte	0x825
 1069 028f 00000000 		.4byte	.LFB15
 1070 0293 10000000 		.4byte	.LFE15-.LFB15
 1071 0297 01       		.uleb128 0x1
 1072 0298 9C       		.byte	0x9c
 1073 0299 11       		.uleb128 0x11
 1074 029a B2020000 		.4byte	.LASF42
 1075 029e 01       		.byte	0x1
 1076 029f 3708     		.2byte	0x837
 1077 02a1 B0000000 		.4byte	0xb0
 1078 02a5 00000000 		.4byte	.LFB16
 1079 02a9 10000000 		.4byte	.LFE16-.LFB16
 1080 02ad 01       		.uleb128 0x1
 1081 02ae 9C       		.byte	0x9c
 1082 02af D4020000 		.4byte	0x2d4
 1083 02b3 0B       		.uleb128 0xb
 1084 02b4 53040000 		.4byte	.LASF43
 1085 02b8 01       		.byte	0x1
 1086 02b9 3708     		.2byte	0x837
 1087 02bb B0000000 		.4byte	0xb0
 1088 02bf 8E010000 		.4byte	.LLST8
 1089 02c3 0C       		.uleb128 0xc
 1090 02c4 07010000 		.4byte	.LASF44
 1091 02c8 01       		.byte	0x1
ARM GAS  C:\Users\TIMCHE~1\AppData\Local\Temp\ccPS59ly.s 			page 59


 1092 02c9 3908     		.2byte	0x839
 1093 02cb B0000000 		.4byte	0xb0
 1094 02cf B0010000 		.4byte	.LLST9
 1095 02d3 00       		.byte	0
 1096 02d4 0E       		.uleb128 0xe
 1097 02d5 20040000 		.4byte	.LASF45
 1098 02d9 01       		.byte	0x1
 1099 02da 4C08     		.2byte	0x84c
 1100 02dc B0000000 		.4byte	0xb0
 1101 02e0 00000000 		.4byte	.LFB17
 1102 02e4 0C000000 		.4byte	.LFE17-.LFB17
 1103 02e8 01       		.uleb128 0x1
 1104 02e9 9C       		.byte	0x9c
 1105 02ea 12       		.uleb128 0x12
 1106 02eb EE020000 		.4byte	.LASF46
 1107 02ef 01       		.byte	0x1
 1108 02f0 6408     		.2byte	0x864
 1109 02f2 00000000 		.4byte	.LFB18
 1110 02f6 18000000 		.4byte	.LFE18-.LFB18
 1111 02fa 01       		.uleb128 0x1
 1112 02fb 9C       		.byte	0x9c
 1113 02fc 0A030000 		.4byte	0x30a
 1114 0300 13       		.uleb128 0x13
 1115 0301 10000000 		.4byte	.LVL31
 1116 0305 63020000 		.4byte	0x263
 1117 0309 00       		.byte	0
 1118 030a 14       		.uleb128 0x14
 1119 030b 2B010000 		.4byte	.LASF47
 1120 030f 01       		.byte	0x1
 1121 0310 46       		.byte	0x46
 1122 0311 B0000000 		.4byte	0xb0
 1123 0315 05       		.uleb128 0x5
 1124 0316 03       		.byte	0x3
 1125 0317 04000000 		.4byte	cySysWdtCallback
 1126 031b 15       		.uleb128 0x15
 1127 031c C7000000 		.4byte	.LASF51
 1128 0320 04       		.byte	0x4
 1129 0321 D4       		.byte	0xd4
 1130 0322 6B000000 		.4byte	0x6b
 1131 0326 00       		.byte	0
 1132              		.section	.debug_abbrev,"",%progbits
 1133              	.Ldebug_abbrev0:
 1134 0000 01       		.uleb128 0x1
 1135 0001 11       		.uleb128 0x11
 1136 0002 01       		.byte	0x1
 1137 0003 25       		.uleb128 0x25
 1138 0004 0E       		.uleb128 0xe
 1139 0005 13       		.uleb128 0x13
 1140 0006 0B       		.uleb128 0xb
 1141 0007 03       		.uleb128 0x3
 1142 0008 0E       		.uleb128 0xe
 1143 0009 1B       		.uleb128 0x1b
 1144 000a 0E       		.uleb128 0xe
 1145 000b 55       		.uleb128 0x55
 1146 000c 17       		.uleb128 0x17
 1147 000d 11       		.uleb128 0x11
 1148 000e 01       		.uleb128 0x1
ARM GAS  C:\Users\TIMCHE~1\AppData\Local\Temp\ccPS59ly.s 			page 60


 1149 000f 10       		.uleb128 0x10
 1150 0010 17       		.uleb128 0x17
 1151 0011 00       		.byte	0
 1152 0012 00       		.byte	0
 1153 0013 02       		.uleb128 0x2
 1154 0014 24       		.uleb128 0x24
 1155 0015 00       		.byte	0
 1156 0016 0B       		.uleb128 0xb
 1157 0017 0B       		.uleb128 0xb
 1158 0018 3E       		.uleb128 0x3e
 1159 0019 0B       		.uleb128 0xb
 1160 001a 03       		.uleb128 0x3
 1161 001b 0E       		.uleb128 0xe
 1162 001c 00       		.byte	0
 1163 001d 00       		.byte	0
 1164 001e 03       		.uleb128 0x3
 1165 001f 24       		.uleb128 0x24
 1166 0020 00       		.byte	0
 1167 0021 0B       		.uleb128 0xb
 1168 0022 0B       		.uleb128 0xb
 1169 0023 3E       		.uleb128 0x3e
 1170 0024 0B       		.uleb128 0xb
 1171 0025 03       		.uleb128 0x3
 1172 0026 08       		.uleb128 0x8
 1173 0027 00       		.byte	0
 1174 0028 00       		.byte	0
 1175 0029 04       		.uleb128 0x4
 1176 002a 16       		.uleb128 0x16
 1177 002b 00       		.byte	0
 1178 002c 03       		.uleb128 0x3
 1179 002d 0E       		.uleb128 0xe
 1180 002e 3A       		.uleb128 0x3a
 1181 002f 0B       		.uleb128 0xb
 1182 0030 3B       		.uleb128 0x3b
 1183 0031 05       		.uleb128 0x5
 1184 0032 49       		.uleb128 0x49
 1185 0033 13       		.uleb128 0x13
 1186 0034 00       		.byte	0
 1187 0035 00       		.byte	0
 1188 0036 05       		.uleb128 0x5
 1189 0037 35       		.uleb128 0x35
 1190 0038 00       		.byte	0
 1191 0039 49       		.uleb128 0x49
 1192 003a 13       		.uleb128 0x13
 1193 003b 00       		.byte	0
 1194 003c 00       		.byte	0
 1195 003d 06       		.uleb128 0x6
 1196 003e 0F       		.uleb128 0xf
 1197 003f 00       		.byte	0
 1198 0040 0B       		.uleb128 0xb
 1199 0041 0B       		.uleb128 0xb
 1200 0042 49       		.uleb128 0x49
 1201 0043 13       		.uleb128 0x13
 1202 0044 00       		.byte	0
 1203 0045 00       		.byte	0
 1204 0046 07       		.uleb128 0x7
 1205 0047 15       		.uleb128 0x15
ARM GAS  C:\Users\TIMCHE~1\AppData\Local\Temp\ccPS59ly.s 			page 61


 1206 0048 00       		.byte	0
 1207 0049 27       		.uleb128 0x27
 1208 004a 19       		.uleb128 0x19
 1209 004b 00       		.byte	0
 1210 004c 00       		.byte	0
 1211 004d 08       		.uleb128 0x8
 1212 004e 16       		.uleb128 0x16
 1213 004f 00       		.byte	0
 1214 0050 03       		.uleb128 0x3
 1215 0051 0E       		.uleb128 0xe
 1216 0052 3A       		.uleb128 0x3a
 1217 0053 0B       		.uleb128 0xb
 1218 0054 3B       		.uleb128 0x3b
 1219 0055 0B       		.uleb128 0xb
 1220 0056 49       		.uleb128 0x49
 1221 0057 13       		.uleb128 0x13
 1222 0058 00       		.byte	0
 1223 0059 00       		.byte	0
 1224 005a 09       		.uleb128 0x9
 1225 005b 2E       		.uleb128 0x2e
 1226 005c 00       		.byte	0
 1227 005d 3F       		.uleb128 0x3f
 1228 005e 19       		.uleb128 0x19
 1229 005f 03       		.uleb128 0x3
 1230 0060 0E       		.uleb128 0xe
 1231 0061 3A       		.uleb128 0x3a
 1232 0062 0B       		.uleb128 0xb
 1233 0063 3B       		.uleb128 0x3b
 1234 0064 0B       		.uleb128 0xb
 1235 0065 27       		.uleb128 0x27
 1236 0066 19       		.uleb128 0x19
 1237 0067 11       		.uleb128 0x11
 1238 0068 01       		.uleb128 0x1
 1239 0069 12       		.uleb128 0x12
 1240 006a 06       		.uleb128 0x6
 1241 006b 40       		.uleb128 0x40
 1242 006c 18       		.uleb128 0x18
 1243 006d 9742     		.uleb128 0x2117
 1244 006f 19       		.uleb128 0x19
 1245 0070 00       		.byte	0
 1246 0071 00       		.byte	0
 1247 0072 0A       		.uleb128 0xa
 1248 0073 2E       		.uleb128 0x2e
 1249 0074 01       		.byte	0x1
 1250 0075 3F       		.uleb128 0x3f
 1251 0076 19       		.uleb128 0x19
 1252 0077 03       		.uleb128 0x3
 1253 0078 0E       		.uleb128 0xe
 1254 0079 3A       		.uleb128 0x3a
 1255 007a 0B       		.uleb128 0xb
 1256 007b 3B       		.uleb128 0x3b
 1257 007c 05       		.uleb128 0x5
 1258 007d 27       		.uleb128 0x27
 1259 007e 19       		.uleb128 0x19
 1260 007f 49       		.uleb128 0x49
 1261 0080 13       		.uleb128 0x13
 1262 0081 11       		.uleb128 0x11
ARM GAS  C:\Users\TIMCHE~1\AppData\Local\Temp\ccPS59ly.s 			page 62


 1263 0082 01       		.uleb128 0x1
 1264 0083 12       		.uleb128 0x12
 1265 0084 06       		.uleb128 0x6
 1266 0085 40       		.uleb128 0x40
 1267 0086 18       		.uleb128 0x18
 1268 0087 9642     		.uleb128 0x2116
 1269 0089 19       		.uleb128 0x19
 1270 008a 01       		.uleb128 0x1
 1271 008b 13       		.uleb128 0x13
 1272 008c 00       		.byte	0
 1273 008d 00       		.byte	0
 1274 008e 0B       		.uleb128 0xb
 1275 008f 05       		.uleb128 0x5
 1276 0090 00       		.byte	0
 1277 0091 03       		.uleb128 0x3
 1278 0092 0E       		.uleb128 0xe
 1279 0093 3A       		.uleb128 0x3a
 1280 0094 0B       		.uleb128 0xb
 1281 0095 3B       		.uleb128 0x3b
 1282 0096 05       		.uleb128 0x5
 1283 0097 49       		.uleb128 0x49
 1284 0098 13       		.uleb128 0x13
 1285 0099 02       		.uleb128 0x2
 1286 009a 17       		.uleb128 0x17
 1287 009b 00       		.byte	0
 1288 009c 00       		.byte	0
 1289 009d 0C       		.uleb128 0xc
 1290 009e 34       		.uleb128 0x34
 1291 009f 00       		.byte	0
 1292 00a0 03       		.uleb128 0x3
 1293 00a1 0E       		.uleb128 0xe
 1294 00a2 3A       		.uleb128 0x3a
 1295 00a3 0B       		.uleb128 0xb
 1296 00a4 3B       		.uleb128 0x3b
 1297 00a5 05       		.uleb128 0x5
 1298 00a6 49       		.uleb128 0x49
 1299 00a7 13       		.uleb128 0x13
 1300 00a8 02       		.uleb128 0x2
 1301 00a9 17       		.uleb128 0x17
 1302 00aa 00       		.byte	0
 1303 00ab 00       		.byte	0
 1304 00ac 0D       		.uleb128 0xd
 1305 00ad 34       		.uleb128 0x34
 1306 00ae 00       		.byte	0
 1307 00af 03       		.uleb128 0x3
 1308 00b0 0E       		.uleb128 0xe
 1309 00b1 3A       		.uleb128 0x3a
 1310 00b2 0B       		.uleb128 0xb
 1311 00b3 3B       		.uleb128 0x3b
 1312 00b4 05       		.uleb128 0x5
 1313 00b5 49       		.uleb128 0x49
 1314 00b6 13       		.uleb128 0x13
 1315 00b7 02       		.uleb128 0x2
 1316 00b8 18       		.uleb128 0x18
 1317 00b9 00       		.byte	0
 1318 00ba 00       		.byte	0
 1319 00bb 0E       		.uleb128 0xe
ARM GAS  C:\Users\TIMCHE~1\AppData\Local\Temp\ccPS59ly.s 			page 63


 1320 00bc 2E       		.uleb128 0x2e
 1321 00bd 00       		.byte	0
 1322 00be 3F       		.uleb128 0x3f
 1323 00bf 19       		.uleb128 0x19
 1324 00c0 03       		.uleb128 0x3
 1325 00c1 0E       		.uleb128 0xe
 1326 00c2 3A       		.uleb128 0x3a
 1327 00c3 0B       		.uleb128 0xb
 1328 00c4 3B       		.uleb128 0x3b
 1329 00c5 05       		.uleb128 0x5
 1330 00c6 27       		.uleb128 0x27
 1331 00c7 19       		.uleb128 0x19
 1332 00c8 49       		.uleb128 0x49
 1333 00c9 13       		.uleb128 0x13
 1334 00ca 11       		.uleb128 0x11
 1335 00cb 01       		.uleb128 0x1
 1336 00cc 12       		.uleb128 0x12
 1337 00cd 06       		.uleb128 0x6
 1338 00ce 40       		.uleb128 0x40
 1339 00cf 18       		.uleb128 0x18
 1340 00d0 9742     		.uleb128 0x2117
 1341 00d2 19       		.uleb128 0x19
 1342 00d3 00       		.byte	0
 1343 00d4 00       		.byte	0
 1344 00d5 0F       		.uleb128 0xf
 1345 00d6 2E       		.uleb128 0x2e
 1346 00d7 00       		.byte	0
 1347 00d8 3F       		.uleb128 0x3f
 1348 00d9 19       		.uleb128 0x19
 1349 00da 03       		.uleb128 0x3
 1350 00db 0E       		.uleb128 0xe
 1351 00dc 3A       		.uleb128 0x3a
 1352 00dd 0B       		.uleb128 0xb
 1353 00de 3B       		.uleb128 0x3b
 1354 00df 05       		.uleb128 0x5
 1355 00e0 27       		.uleb128 0x27
 1356 00e1 19       		.uleb128 0x19
 1357 00e2 11       		.uleb128 0x11
 1358 00e3 01       		.uleb128 0x1
 1359 00e4 12       		.uleb128 0x12
 1360 00e5 06       		.uleb128 0x6
 1361 00e6 40       		.uleb128 0x40
 1362 00e7 18       		.uleb128 0x18
 1363 00e8 9742     		.uleb128 0x2117
 1364 00ea 19       		.uleb128 0x19
 1365 00eb 00       		.byte	0
 1366 00ec 00       		.byte	0
 1367 00ed 10       		.uleb128 0x10
 1368 00ee 2E       		.uleb128 0x2e
 1369 00ef 01       		.byte	0x1
 1370 00f0 3F       		.uleb128 0x3f
 1371 00f1 19       		.uleb128 0x19
 1372 00f2 03       		.uleb128 0x3
 1373 00f3 0E       		.uleb128 0xe
 1374 00f4 3A       		.uleb128 0x3a
 1375 00f5 0B       		.uleb128 0xb
 1376 00f6 3B       		.uleb128 0x3b
ARM GAS  C:\Users\TIMCHE~1\AppData\Local\Temp\ccPS59ly.s 			page 64


 1377 00f7 05       		.uleb128 0x5
 1378 00f8 27       		.uleb128 0x27
 1379 00f9 19       		.uleb128 0x19
 1380 00fa 11       		.uleb128 0x11
 1381 00fb 01       		.uleb128 0x1
 1382 00fc 12       		.uleb128 0x12
 1383 00fd 06       		.uleb128 0x6
 1384 00fe 40       		.uleb128 0x40
 1385 00ff 18       		.uleb128 0x18
 1386 0100 9742     		.uleb128 0x2117
 1387 0102 19       		.uleb128 0x19
 1388 0103 01       		.uleb128 0x1
 1389 0104 13       		.uleb128 0x13
 1390 0105 00       		.byte	0
 1391 0106 00       		.byte	0
 1392 0107 11       		.uleb128 0x11
 1393 0108 2E       		.uleb128 0x2e
 1394 0109 01       		.byte	0x1
 1395 010a 3F       		.uleb128 0x3f
 1396 010b 19       		.uleb128 0x19
 1397 010c 03       		.uleb128 0x3
 1398 010d 0E       		.uleb128 0xe
 1399 010e 3A       		.uleb128 0x3a
 1400 010f 0B       		.uleb128 0xb
 1401 0110 3B       		.uleb128 0x3b
 1402 0111 05       		.uleb128 0x5
 1403 0112 27       		.uleb128 0x27
 1404 0113 19       		.uleb128 0x19
 1405 0114 49       		.uleb128 0x49
 1406 0115 13       		.uleb128 0x13
 1407 0116 11       		.uleb128 0x11
 1408 0117 01       		.uleb128 0x1
 1409 0118 12       		.uleb128 0x12
 1410 0119 06       		.uleb128 0x6
 1411 011a 40       		.uleb128 0x40
 1412 011b 18       		.uleb128 0x18
 1413 011c 9742     		.uleb128 0x2117
 1414 011e 19       		.uleb128 0x19
 1415 011f 01       		.uleb128 0x1
 1416 0120 13       		.uleb128 0x13
 1417 0121 00       		.byte	0
 1418 0122 00       		.byte	0
 1419 0123 12       		.uleb128 0x12
 1420 0124 2E       		.uleb128 0x2e
 1421 0125 01       		.byte	0x1
 1422 0126 3F       		.uleb128 0x3f
 1423 0127 19       		.uleb128 0x19
 1424 0128 03       		.uleb128 0x3
 1425 0129 0E       		.uleb128 0xe
 1426 012a 3A       		.uleb128 0x3a
 1427 012b 0B       		.uleb128 0xb
 1428 012c 3B       		.uleb128 0x3b
 1429 012d 05       		.uleb128 0x5
 1430 012e 27       		.uleb128 0x27
 1431 012f 19       		.uleb128 0x19
 1432 0130 11       		.uleb128 0x11
 1433 0131 01       		.uleb128 0x1
ARM GAS  C:\Users\TIMCHE~1\AppData\Local\Temp\ccPS59ly.s 			page 65


 1434 0132 12       		.uleb128 0x12
 1435 0133 06       		.uleb128 0x6
 1436 0134 40       		.uleb128 0x40
 1437 0135 18       		.uleb128 0x18
 1438 0136 9642     		.uleb128 0x2116
 1439 0138 19       		.uleb128 0x19
 1440 0139 01       		.uleb128 0x1
 1441 013a 13       		.uleb128 0x13
 1442 013b 00       		.byte	0
 1443 013c 00       		.byte	0
 1444 013d 13       		.uleb128 0x13
 1445 013e 898201   		.uleb128 0x4109
 1446 0141 00       		.byte	0
 1447 0142 11       		.uleb128 0x11
 1448 0143 01       		.uleb128 0x1
 1449 0144 31       		.uleb128 0x31
 1450 0145 13       		.uleb128 0x13
 1451 0146 00       		.byte	0
 1452 0147 00       		.byte	0
 1453 0148 14       		.uleb128 0x14
 1454 0149 34       		.uleb128 0x34
 1455 014a 00       		.byte	0
 1456 014b 03       		.uleb128 0x3
 1457 014c 0E       		.uleb128 0xe
 1458 014d 3A       		.uleb128 0x3a
 1459 014e 0B       		.uleb128 0xb
 1460 014f 3B       		.uleb128 0x3b
 1461 0150 0B       		.uleb128 0xb
 1462 0151 49       		.uleb128 0x49
 1463 0152 13       		.uleb128 0x13
 1464 0153 02       		.uleb128 0x2
 1465 0154 18       		.uleb128 0x18
 1466 0155 00       		.byte	0
 1467 0156 00       		.byte	0
 1468 0157 15       		.uleb128 0x15
 1469 0158 34       		.uleb128 0x34
 1470 0159 00       		.byte	0
 1471 015a 03       		.uleb128 0x3
 1472 015b 0E       		.uleb128 0xe
 1473 015c 3A       		.uleb128 0x3a
 1474 015d 0B       		.uleb128 0xb
 1475 015e 3B       		.uleb128 0x3b
 1476 015f 0B       		.uleb128 0xb
 1477 0160 49       		.uleb128 0x49
 1478 0161 13       		.uleb128 0x13
 1479 0162 3F       		.uleb128 0x3f
 1480 0163 19       		.uleb128 0x19
 1481 0164 3C       		.uleb128 0x3c
 1482 0165 19       		.uleb128 0x19
 1483 0166 00       		.byte	0
 1484 0167 00       		.byte	0
 1485 0168 00       		.byte	0
 1486              		.section	.debug_loc,"",%progbits
 1487              	.Ldebug_loc0:
 1488              	.LLST0:
 1489 0000 00000000 		.4byte	.LVL0
 1490 0004 4E000000 		.4byte	.LVL4
ARM GAS  C:\Users\TIMCHE~1\AppData\Local\Temp\ccPS59ly.s 			page 66


 1491 0008 0100     		.2byte	0x1
 1492 000a 50       		.byte	0x50
 1493 000b 4E000000 		.4byte	.LVL4
 1494 000f 52000000 		.4byte	.LVL5
 1495 0013 0400     		.2byte	0x4
 1496 0015 74       		.byte	0x74
 1497 0016 E400     		.sleb128 100
 1498 0018 9F       		.byte	0x9f
 1499 0019 52000000 		.4byte	.LVL5
 1500 001d A4000000 		.4byte	.LVL19
 1501 0021 0400     		.2byte	0x4
 1502 0023 F3       		.byte	0xf3
 1503 0024 01       		.uleb128 0x1
 1504 0025 50       		.byte	0x50
 1505 0026 9F       		.byte	0x9f
 1506 0027 A4000000 		.4byte	.LVL19
 1507 002b B2000000 		.4byte	.LVL21
 1508 002f 0100     		.2byte	0x1
 1509 0031 50       		.byte	0x50
 1510 0032 B2000000 		.4byte	.LVL21
 1511 0036 EC000000 		.4byte	.LFE4
 1512 003a 0400     		.2byte	0x4
 1513 003c F3       		.byte	0xf3
 1514 003d 01       		.uleb128 0x1
 1515 003e 50       		.byte	0x50
 1516 003f 9F       		.byte	0x9f
 1517 0040 00000000 		.4byte	0
 1518 0044 00000000 		.4byte	0
 1519              	.LLST1:
 1520 0048 00000000 		.4byte	.LVL0
 1521 004c 56000000 		.4byte	.LVL6
 1522 0050 0100     		.2byte	0x1
 1523 0052 51       		.byte	0x51
 1524 0053 56000000 		.4byte	.LVL6
 1525 0057 A4000000 		.4byte	.LVL19
 1526 005b 0100     		.2byte	0x1
 1527 005d 54       		.byte	0x54
 1528 005e A4000000 		.4byte	.LVL19
 1529 0062 B2000000 		.4byte	.LVL21
 1530 0066 0100     		.2byte	0x1
 1531 0068 51       		.byte	0x51
 1532 0069 B2000000 		.4byte	.LVL21
 1533 006d EC000000 		.4byte	.LFE4
 1534 0071 0400     		.2byte	0x4
 1535 0073 F3       		.byte	0xf3
 1536 0074 01       		.uleb128 0x1
 1537 0075 51       		.byte	0x51
 1538 0076 9F       		.byte	0x9f
 1539 0077 00000000 		.4byte	0
 1540 007b 00000000 		.4byte	0
 1541              	.LLST2:
 1542 007f 86000000 		.4byte	.LVL13
 1543 0083 88000000 		.4byte	.LVL14
 1544 0087 0100     		.2byte	0x1
 1545 0089 50       		.byte	0x50
 1546 008a 9C000000 		.4byte	.LVL17
 1547 008e A4000000 		.4byte	.LVL19
ARM GAS  C:\Users\TIMCHE~1\AppData\Local\Temp\ccPS59ly.s 			page 67


 1548 0092 0100     		.2byte	0x1
 1549 0094 50       		.byte	0x50
 1550 0095 00000000 		.4byte	0
 1551 0099 00000000 		.4byte	0
 1552              	.LLST3:
 1553 009d 5E000000 		.4byte	.LVL8
 1554 00a1 71000000 		.4byte	.LVL9-1
 1555 00a5 0100     		.2byte	0x1
 1556 00a7 50       		.byte	0x50
 1557 00a8 71000000 		.4byte	.LVL9-1
 1558 00ac 74000000 		.4byte	.LVL10
 1559 00b0 0100     		.2byte	0x1
 1560 00b2 56       		.byte	0x56
 1561 00b3 88000000 		.4byte	.LVL14
 1562 00b7 8C000000 		.4byte	.LVL15
 1563 00bb 0100     		.2byte	0x1
 1564 00bd 50       		.byte	0x50
 1565 00be 8C000000 		.4byte	.LVL15
 1566 00c2 9C000000 		.4byte	.LVL17
 1567 00c6 0100     		.2byte	0x1
 1568 00c8 56       		.byte	0x56
 1569 00c9 00000000 		.4byte	0
 1570 00cd 00000000 		.4byte	0
 1571              	.LLST4:
 1572 00d1 0A000000 		.4byte	.LVL1
 1573 00d5 0E000000 		.4byte	.LVL2
 1574 00d9 0700     		.2byte	0x7
 1575 00db 72       		.byte	0x72
 1576 00dc 00       		.sleb128 0
 1577 00dd 0A       		.byte	0xa
 1578 00de 0F0F     		.2byte	0xf0f
 1579 00e0 1A       		.byte	0x1a
 1580 00e1 9F       		.byte	0x9f
 1581 00e2 0E000000 		.4byte	.LVL2
 1582 00e6 16000000 		.4byte	.LVL3
 1583 00ea 0100     		.2byte	0x1
 1584 00ec 52       		.byte	0x52
 1585 00ed 00000000 		.4byte	0
 1586 00f1 00000000 		.4byte	0
 1587              	.LLST5:
 1588 00f5 A2000000 		.4byte	.LVL18
 1589 00f9 A4000000 		.4byte	.LVL19
 1590 00fd 0200     		.2byte	0x2
 1591 00ff 30       		.byte	0x30
 1592 0100 9F       		.byte	0x9f
 1593 0101 B0000000 		.4byte	.LVL20
 1594 0105 B2000000 		.4byte	.LVL21
 1595 0109 0200     		.2byte	0x2
 1596 010b 37       		.byte	0x37
 1597 010c 9F       		.byte	0x9f
 1598 010d B2000000 		.4byte	.LVL21
 1599 0111 EC000000 		.4byte	.LFE4
 1600 0115 0100     		.2byte	0x1
 1601 0117 53       		.byte	0x53
 1602 0118 00000000 		.4byte	0
 1603 011c 00000000 		.4byte	0
 1604              	.LLST6:
ARM GAS  C:\Users\TIMCHE~1\AppData\Local\Temp\ccPS59ly.s 			page 68


 1605 0120 00000000 		.4byte	.LVL22
 1606 0124 00000000 		.4byte	.LVL22
 1607 0128 0100     		.2byte	0x1
 1608 012a 50       		.byte	0x50
 1609 012b 00000000 		.4byte	.LVL22
 1610 012f 04000000 		.4byte	.LVL23
 1611 0133 0700     		.2byte	0x7
 1612 0135 70       		.byte	0x70
 1613 0136 00       		.sleb128 0
 1614 0137 0A       		.byte	0xa
 1615 0138 FFFF     		.2byte	0xffff
 1616 013a 1A       		.byte	0x1a
 1617 013b 9F       		.byte	0x9f
 1618 013c 04000000 		.4byte	.LVL23
 1619 0140 14000000 		.4byte	.LFE8
 1620 0144 0800     		.2byte	0x8
 1621 0146 F3       		.byte	0xf3
 1622 0147 01       		.uleb128 0x1
 1623 0148 50       		.byte	0x50
 1624 0149 0A       		.byte	0xa
 1625 014a FFFF     		.2byte	0xffff
 1626 014c 1A       		.byte	0x1a
 1627 014d 9F       		.byte	0x9f
 1628 014e 00000000 		.4byte	0
 1629 0152 00000000 		.4byte	0
 1630              	.LLST7:
 1631 0156 00000000 		.4byte	.LVL24
 1632 015a 08000000 		.4byte	.LVL25
 1633 015e 0100     		.2byte	0x1
 1634 0160 50       		.byte	0x50
 1635 0161 08000000 		.4byte	.LVL25
 1636 0165 10000000 		.4byte	.LVL26
 1637 0169 0700     		.2byte	0x7
 1638 016b 72       		.byte	0x72
 1639 016c 00       		.sleb128 0
 1640 016d 4E       		.byte	0x4e
 1641 016e 3F       		.byte	0x3f
 1642 016f 24       		.byte	0x24
 1643 0170 1A       		.byte	0x1a
 1644 0171 9F       		.byte	0x9f
 1645 0172 10000000 		.4byte	.LVL26
 1646 0176 20000000 		.4byte	.LFE11
 1647 017a 0A00     		.2byte	0xa
 1648 017c F3       		.byte	0xf3
 1649 017d 01       		.uleb128 0x1
 1650 017e 50       		.byte	0x50
 1651 017f 40       		.byte	0x40
 1652 0180 24       		.byte	0x24
 1653 0181 4E       		.byte	0x4e
 1654 0182 3F       		.byte	0x3f
 1655 0183 24       		.byte	0x24
 1656 0184 1A       		.byte	0x1a
 1657 0185 9F       		.byte	0x9f
 1658 0186 00000000 		.4byte	0
 1659 018a 00000000 		.4byte	0
 1660              	.LLST8:
 1661 018e 00000000 		.4byte	.LVL27
ARM GAS  C:\Users\TIMCHE~1\AppData\Local\Temp\ccPS59ly.s 			page 69


 1662 0192 08000000 		.4byte	.LVL29
 1663 0196 0100     		.2byte	0x1
 1664 0198 50       		.byte	0x50
 1665 0199 08000000 		.4byte	.LVL29
 1666 019d 10000000 		.4byte	.LFE16
 1667 01a1 0500     		.2byte	0x5
 1668 01a3 03       		.byte	0x3
 1669 01a4 04000000 		.4byte	cySysWdtCallback
 1670 01a8 00000000 		.4byte	0
 1671 01ac 00000000 		.4byte	0
 1672              	.LLST9:
 1673 01b0 00000000 		.4byte	.LVL27
 1674 01b4 04000000 		.4byte	.LVL28
 1675 01b8 0200     		.2byte	0x2
 1676 01ba 30       		.byte	0x30
 1677 01bb 9F       		.byte	0x9f
 1678 01bc 04000000 		.4byte	.LVL28
 1679 01c0 10000000 		.4byte	.LFE16
 1680 01c4 0100     		.2byte	0x1
 1681 01c6 52       		.byte	0x52
 1682 01c7 00000000 		.4byte	0
 1683 01cb 00000000 		.4byte	0
 1684              		.section	.debug_aranges,"",%progbits
 1685 0000 AC000000 		.4byte	0xac
 1686 0004 0200     		.2byte	0x2
 1687 0006 00000000 		.4byte	.Ldebug_info0
 1688 000a 04       		.byte	0x4
 1689 000b 00       		.byte	0
 1690 000c 0000     		.2byte	0
 1691 000e 0000     		.2byte	0
 1692 0010 00000000 		.4byte	.LFB0
 1693 0014 14000000 		.4byte	.LFE0-.LFB0
 1694 0018 00000000 		.4byte	.LFB1
 1695 001c 10000000 		.4byte	.LFE1-.LFB1
 1696 0020 00000000 		.4byte	.LFB2
 1697 0024 34000000 		.4byte	.LFE2-.LFB2
 1698 0028 00000000 		.4byte	.LFB3
 1699 002c 28000000 		.4byte	.LFE3-.LFB3
 1700 0030 00000000 		.4byte	.LFB4
 1701 0034 EC000000 		.4byte	.LFE4-.LFB4
 1702 0038 00000000 		.4byte	.LFB5
 1703 003c 18000000 		.4byte	.LFE5-.LFB5
 1704 0040 00000000 		.4byte	.LFB6
 1705 0044 0C000000 		.4byte	.LFE6-.LFB6
 1706 0048 00000000 		.4byte	.LFB7
 1707 004c 10000000 		.4byte	.LFE7-.LFB7
 1708 0050 00000000 		.4byte	.LFB8
 1709 0054 14000000 		.4byte	.LFE8-.LFB8
 1710 0058 00000000 		.4byte	.LFB9
 1711 005c 0C000000 		.4byte	.LFE9-.LFB9
 1712 0060 00000000 		.4byte	.LFB10
 1713 0064 0C000000 		.4byte	.LFE10-.LFB10
 1714 0068 00000000 		.4byte	.LFB11
 1715 006c 20000000 		.4byte	.LFE11-.LFB11
 1716 0070 00000000 		.4byte	.LFB12
 1717 0074 10000000 		.4byte	.LFE12-.LFB12
 1718 0078 00000000 		.4byte	.LFB13
ARM GAS  C:\Users\TIMCHE~1\AppData\Local\Temp\ccPS59ly.s 			page 70


 1719 007c 10000000 		.4byte	.LFE13-.LFB13
 1720 0080 00000000 		.4byte	.LFB14
 1721 0084 10000000 		.4byte	.LFE14-.LFB14
 1722 0088 00000000 		.4byte	.LFB15
 1723 008c 10000000 		.4byte	.LFE15-.LFB15
 1724 0090 00000000 		.4byte	.LFB16
 1725 0094 10000000 		.4byte	.LFE16-.LFB16
 1726 0098 00000000 		.4byte	.LFB17
 1727 009c 0C000000 		.4byte	.LFE17-.LFB17
 1728 00a0 00000000 		.4byte	.LFB18
 1729 00a4 18000000 		.4byte	.LFE18-.LFB18
 1730 00a8 00000000 		.4byte	0
 1731 00ac 00000000 		.4byte	0
 1732              		.section	.debug_ranges,"",%progbits
 1733              	.Ldebug_ranges0:
 1734 0000 00000000 		.4byte	.LFB0
 1735 0004 14000000 		.4byte	.LFE0
 1736 0008 00000000 		.4byte	.LFB1
 1737 000c 10000000 		.4byte	.LFE1
 1738 0010 00000000 		.4byte	.LFB2
 1739 0014 34000000 		.4byte	.LFE2
 1740 0018 00000000 		.4byte	.LFB3
 1741 001c 28000000 		.4byte	.LFE3
 1742 0020 00000000 		.4byte	.LFB4
 1743 0024 EC000000 		.4byte	.LFE4
 1744 0028 00000000 		.4byte	.LFB5
 1745 002c 18000000 		.4byte	.LFE5
 1746 0030 00000000 		.4byte	.LFB6
 1747 0034 0C000000 		.4byte	.LFE6
 1748 0038 00000000 		.4byte	.LFB7
 1749 003c 10000000 		.4byte	.LFE7
 1750 0040 00000000 		.4byte	.LFB8
 1751 0044 14000000 		.4byte	.LFE8
 1752 0048 00000000 		.4byte	.LFB9
 1753 004c 0C000000 		.4byte	.LFE9
 1754 0050 00000000 		.4byte	.LFB10
 1755 0054 0C000000 		.4byte	.LFE10
 1756 0058 00000000 		.4byte	.LFB11
 1757 005c 20000000 		.4byte	.LFE11
 1758 0060 00000000 		.4byte	.LFB12
 1759 0064 10000000 		.4byte	.LFE12
 1760 0068 00000000 		.4byte	.LFB13
 1761 006c 10000000 		.4byte	.LFE13
 1762 0070 00000000 		.4byte	.LFB14
 1763 0074 10000000 		.4byte	.LFE14
 1764 0078 00000000 		.4byte	.LFB15
 1765 007c 10000000 		.4byte	.LFE15
 1766 0080 00000000 		.4byte	.LFB16
 1767 0084 10000000 		.4byte	.LFE16
 1768 0088 00000000 		.4byte	.LFB17
 1769 008c 0C000000 		.4byte	.LFE17
 1770 0090 00000000 		.4byte	.LFB18
 1771 0094 18000000 		.4byte	.LFE18
 1772 0098 00000000 		.4byte	0
 1773 009c 00000000 		.4byte	0
 1774              		.section	.debug_line,"",%progbits
 1775              	.Ldebug_line0:
ARM GAS  C:\Users\TIMCHE~1\AppData\Local\Temp\ccPS59ly.s 			page 71


 1776 0000 2E020000 		.section	.debug_str,"MS",%progbits,1
 1776      02005C00 
 1776      00000201 
 1776      FB0E0D00 
 1776      01010101 
 1777              	.LASF31:
 1778 0000 43795379 		.ascii	"CySysWdtGetEnabledStatus\000"
 1778      73576474 
 1778      47657445 
 1778      6E61626C 
 1778      65645374 
 1779              	.LASF13:
 1780 0019 63797374 		.ascii	"cystatus\000"
 1780      61747573 
 1780      00
 1781              	.LASF14:
 1782 0022 72656733 		.ascii	"reg32\000"
 1782      3200
 1783              	.LASF34:
 1784 0028 43795379 		.ascii	"CySysWdtSetMatch\000"
 1784      73576474 
 1784      5365744D 
 1784      61746368 
 1784      00
 1785              	.LASF48:
 1786 0039 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 1786      4320342E 
 1786      392E3320 
 1786      32303135 
 1786      30333033 
 1787 006c 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m0 -mthumb -g -O"
 1787      20726576 
 1787      6973696F 
 1787      6E203232 
 1787      31323230 
 1788 009f 73202D66 		.ascii	"s -ffunction-sections -ffat-lto-objects\000"
 1788      66756E63 
 1788      74696F6E 
 1788      2D736563 
 1788      74696F6E 
 1789              	.LASF51:
 1790 00c7 63796465 		.ascii	"cydelayFreqHz\000"
 1790      6C617946 
 1790      72657148 
 1790      7A00
 1791              	.LASF23:
 1792 00d5 696C6F43 		.ascii	"iloCompensatedCycles\000"
 1792      6F6D7065 
 1792      6E736174 
 1792      65644379 
 1792      636C6573 
 1793              	.LASF17:
 1794 00ea 43795379 		.ascii	"CySysClkIloStart\000"
 1794      73436C6B 
 1794      496C6F53 
 1794      74617274 
 1794      00
ARM GAS  C:\Users\TIMCHE~1\AppData\Local\Temp\ccPS59ly.s 			page 72


 1795              	.LASF26:
 1796 00fb 63686563 		.ascii	"checkStatus\000"
 1796      6B537461 
 1796      74757300 
 1797              	.LASF44:
 1798 0107 70726576 		.ascii	"prevCallback\000"
 1798      43616C6C 
 1798      6261636B 
 1798      00
 1799              	.LASF38:
 1800 0114 43795379 		.ascii	"CySysWdtClearInterrupt\000"
 1800      73576474 
 1800      436C6561 
 1800      72496E74 
 1800      65727275 
 1801              	.LASF47:
 1802 012b 63795379 		.ascii	"cySysWdtCallback\000"
 1802      73576474 
 1802      43616C6C 
 1802      6261636B 
 1802      00
 1803              	.LASF9:
 1804 013c 666C6F61 		.ascii	"float\000"
 1804      7400
 1805              	.LASF49:
 1806 0142 47656E65 		.ascii	"Generated_Source\\PSoC4\\CyLFClk.c\000"
 1806      72617465 
 1806      645F536F 
 1806      75726365 
 1806      5C50536F 
 1807              	.LASF1:
 1808 0163 756E7369 		.ascii	"unsigned char\000"
 1808      676E6564 
 1808      20636861 
 1808      7200
 1809              	.LASF30:
 1810 0171 6D617463 		.ascii	"match\000"
 1810      6800
 1811              	.LASF15:
 1812 0177 63795764 		.ascii	"cyWdtCallback\000"
 1812      7443616C 
 1812      6C626163 
 1812      6B00
 1813              	.LASF18:
 1814 0185 43795379 		.ascii	"CySysClkIloStop\000"
 1814      73436C6B 
 1814      496C6F53 
 1814      746F7000 
 1815              	.LASF5:
 1816 0195 6C6F6E67 		.ascii	"long unsigned int\000"
 1816      20756E73 
 1816      69676E65 
 1816      6420696E 
 1816      7400
 1817              	.LASF36:
 1818 01a7 62697473 		.ascii	"bitsNum\000"
 1818      4E756D00 
ARM GAS  C:\Users\TIMCHE~1\AppData\Local\Temp\ccPS59ly.s 			page 73


 1819              	.LASF3:
 1820 01af 73686F72 		.ascii	"short unsigned int\000"
 1820      7420756E 
 1820      7369676E 
 1820      65642069 
 1820      6E7400
 1821              	.LASF20:
 1822 01c2 43795379 		.ascii	"CySysClkIloStopMeasurement\000"
 1822      73436C6B 
 1822      496C6F53 
 1822      746F704D 
 1822      65617375 
 1823              	.LASF10:
 1824 01dd 646F7562 		.ascii	"double\000"
 1824      6C6500
 1825              	.LASF29:
 1826 01e4 43795379 		.ascii	"CySysWdtDisable\000"
 1826      73576474 
 1826      44697361 
 1826      626C6500 
 1827              	.LASF19:
 1828 01f4 43795379 		.ascii	"CySysClkIloStartMeasurement\000"
 1828      73436C6B 
 1828      496C6F53 
 1828      74617274 
 1828      4D656173 
 1829              	.LASF28:
 1830 0210 43795379 		.ascii	"CySysWdtEnable\000"
 1830      73576474 
 1830      456E6162 
 1830      6C6500
 1831              	.LASF33:
 1832 021f 43795379 		.ascii	"CySysWdtGetCount\000"
 1832      73576474 
 1832      47657443 
 1832      6F756E74 
 1832      00
 1833              	.LASF12:
 1834 0230 75696E74 		.ascii	"uint32\000"
 1834      333200
 1835              	.LASF25:
 1836 0237 636F6D70 		.ascii	"compensateRunningStatus\000"
 1836      656E7361 
 1836      74655275 
 1836      6E6E696E 
 1836      67537461 
 1837              	.LASF8:
 1838 024f 756E7369 		.ascii	"unsigned int\000"
 1838      676E6564 
 1838      20696E74 
 1838      00
 1839              	.LASF24:
 1840 025c 64657369 		.ascii	"desiredDelayInCounts\000"
 1840      72656444 
 1840      656C6179 
 1840      496E436F 
 1840      756E7473 
ARM GAS  C:\Users\TIMCHE~1\AppData\Local\Temp\ccPS59ly.s 			page 74


 1841              	.LASF7:
 1842 0271 6C6F6E67 		.ascii	"long long unsigned int\000"
 1842      206C6F6E 
 1842      6720756E 
 1842      7369676E 
 1842      65642069 
 1843              	.LASF40:
 1844 0288 43795379 		.ascii	"CySysWdtUnmaskInterrupt\000"
 1844      73576474 
 1844      556E6D61 
 1844      736B496E 
 1844      74657272 
 1845              	.LASF22:
 1846 02a0 636F6D70 		.ascii	"compensatedCycles\000"
 1846      656E7361 
 1846      74656443 
 1846      79636C65 
 1846      7300
 1847              	.LASF42:
 1848 02b2 43795379 		.ascii	"CySysWdtSetInterruptCallback\000"
 1848      73576474 
 1848      53657449 
 1848      6E746572 
 1848      72757074 
 1849              	.LASF39:
 1850 02cf 43795379 		.ascii	"CySysWdtMaskInterrupt\000"
 1850      73576474 
 1850      4D61736B 
 1850      496E7465 
 1850      72727570 
 1851              	.LASF16:
 1852 02e5 73697A65 		.ascii	"sizetype\000"
 1852      74797065 
 1852      00
 1853              	.LASF46:
 1854 02ee 43795379 		.ascii	"CySysWdtIsr\000"
 1854      73576474 
 1854      49737200 
 1855              	.LASF37:
 1856 02fa 43795379 		.ascii	"CySysWdtGetIgnoreBits\000"
 1856      73576474 
 1856      47657449 
 1856      676E6F72 
 1856      65426974 
 1857              	.LASF6:
 1858 0310 6C6F6E67 		.ascii	"long long int\000"
 1858      206C6F6E 
 1858      6720696E 
 1858      7400
 1859              	.LASF21:
 1860 031e 64657369 		.ascii	"desiredDelay\000"
 1860      72656444 
 1860      656C6179 
 1860      00
 1861              	.LASF11:
 1862 032b 63686172 		.ascii	"char\000"
 1862      00
ARM GAS  C:\Users\TIMCHE~1\AppData\Local\Temp\ccPS59ly.s 			page 75


 1863              	.LASF32:
 1864 0330 43795379 		.ascii	"CySysWdtGetMatch\000"
 1864      73576474 
 1864      4765744D 
 1864      61746368 
 1864      00
 1865              	.LASF35:
 1866 0341 43795379 		.ascii	"CySysWdtSetIgnoreBits\000"
 1866      73576474 
 1866      53657449 
 1866      676E6F72 
 1866      65426974 
 1867              	.LASF2:
 1868 0357 73686F72 		.ascii	"short int\000"
 1868      7420696E 
 1868      7400
 1869              	.LASF50:
 1870 0361 433A5C55 		.ascii	"C:\\Users\\Tim Chen\\Desktop\\Test proximity auto t"
 1870      73657273 
 1870      5C54696D 
 1870      20436865 
 1870      6E5C4465 
 1871 0390 756E696E 		.ascii	"uning\\MH-8W_Proximity_Board_V9_20170619\\MH-8W_PRO"
 1871      675C4D48 
 1871      2D38575F 
 1871      50726F78 
 1871      696D6974 
 1872 03c1 58494D49 		.ascii	"XIMITY.cydsn\\Bootloader_V01\\Bootloader_PSoC4_Exam"
 1872      54592E63 
 1872      7964736E 
 1872      5C426F6F 
 1872      746C6F61 
 1873 03f2 706C6530 		.ascii	"ple01.cydsn\000"
 1873      312E6379 
 1873      64736E00 
 1874              	.LASF4:
 1875 03fe 6C6F6E67 		.ascii	"long int\000"
 1875      20696E74 
 1875      00
 1876              	.LASF27:
 1877 0407 72657475 		.ascii	"returnStatus\000"
 1877      726E5374 
 1877      61747573 
 1877      00
 1878              	.LASF0:
 1879 0414 7369676E 		.ascii	"signed char\000"
 1879      65642063 
 1879      68617200 
 1880              	.LASF45:
 1881 0420 43795379 		.ascii	"CySysWdtGetInterruptCallback\000"
 1881      73576474 
 1881      47657449 
 1881      6E746572 
 1881      72757074 
 1882              	.LASF41:
 1883 043d 43795379 		.ascii	"CySysClkIloCompensate\000"
 1883      73436C6B 
ARM GAS  C:\Users\TIMCHE~1\AppData\Local\Temp\ccPS59ly.s 			page 76


 1883      496C6F43 
 1883      6F6D7065 
 1883      6E736174 
 1884              	.LASF43:
 1885 0453 66756E63 		.ascii	"function\000"
 1885      74696F6E 
 1885      00
 1886              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
