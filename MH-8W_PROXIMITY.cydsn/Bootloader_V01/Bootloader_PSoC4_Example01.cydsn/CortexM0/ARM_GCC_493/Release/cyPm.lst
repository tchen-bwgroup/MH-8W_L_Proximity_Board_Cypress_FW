ARM GAS  C:\Users\TIMCHE~1\AppData\Local\Temp\cczAnwbk.s 			page 1


   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 4
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"cyPm.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.CySysPmSleep,"ax",%progbits
  18              		.align	1
  19              		.global	CySysPmSleep
  20              		.code	16
  21              		.thumb_func
  22              		.type	CySysPmSleep, %function
  23              	CySysPmSleep:
  24              	.LFB0:
  25              		.file 1 "Generated_Source\\PSoC4\\cyPm.c"
   1:Generated_Source\PSoC4/cyPm.c **** /***************************************************************************//**
   2:Generated_Source\PSoC4/cyPm.c **** * \file cyPm.c
   3:Generated_Source\PSoC4/cyPm.c **** * \version 5.50
   4:Generated_Source\PSoC4/cyPm.c **** *
   5:Generated_Source\PSoC4/cyPm.c **** * \brief Provides an API for the power management.
   6:Generated_Source\PSoC4/cyPm.c **** *
   7:Generated_Source\PSoC4/cyPm.c **** * \note Documentation of the API's in this file is located in the System
   8:Generated_Source\PSoC4/cyPm.c **** * Reference Guide provided with PSoC Creator.
   9:Generated_Source\PSoC4/cyPm.c **** *
  10:Generated_Source\PSoC4/cyPm.c **** ********************************************************************************
  11:Generated_Source\PSoC4/cyPm.c **** * \copyright
  12:Generated_Source\PSoC4/cyPm.c **** * Copyright 2011-2016, Cypress Semiconductor Corporation.  All rights reserved.
  13:Generated_Source\PSoC4/cyPm.c **** * You may use this file only in accordance with the license, terms, conditions,
  14:Generated_Source\PSoC4/cyPm.c **** * disclaimers, and limitations in the end user license agreement accompanying
  15:Generated_Source\PSoC4/cyPm.c **** * the software package with which this file was provided.
  16:Generated_Source\PSoC4/cyPm.c **** *******************************************************************************/
  17:Generated_Source\PSoC4/cyPm.c **** 
  18:Generated_Source\PSoC4/cyPm.c **** #include "cyPm.h"
  19:Generated_Source\PSoC4/cyPm.c **** #include "CyLib.h"
  20:Generated_Source\PSoC4/cyPm.c **** 
  21:Generated_Source\PSoC4/cyPm.c **** 
  22:Generated_Source\PSoC4/cyPm.c **** /*******************************************************************************
  23:Generated_Source\PSoC4/cyPm.c **** * Function Name: CySysPmSleep
  24:Generated_Source\PSoC4/cyPm.c **** ****************************************************************************//**
  25:Generated_Source\PSoC4/cyPm.c **** *
  26:Generated_Source\PSoC4/cyPm.c **** * Puts the part into the Sleep state. This is a CPU-centric power mode.
  27:Generated_Source\PSoC4/cyPm.c **** * It means that the CPU has indicated that it is in the sleep mode and
  28:Generated_Source\PSoC4/cyPm.c **** * its main clock can be removed. It is identical to Active from a peripheral
  29:Generated_Source\PSoC4/cyPm.c **** * point of view. Any enabled interrupts can cause wakeup from the Sleep mode.
  30:Generated_Source\PSoC4/cyPm.c **** *
  31:Generated_Source\PSoC4/cyPm.c **** *******************************************************************************/
  32:Generated_Source\PSoC4/cyPm.c **** void CySysPmSleep(void)
ARM GAS  C:\Users\TIMCHE~1\AppData\Local\Temp\cczAnwbk.s 			page 2


  33:Generated_Source\PSoC4/cyPm.c **** {
  26              		.loc 1 33 0
  27              		.cfi_startproc
  28 0000 08B5     		push	{r3, lr}
  29              		.cfi_def_cfa_offset 8
  30              		.cfi_offset 3, -8
  31              		.cfi_offset 14, -4
  34:Generated_Source\PSoC4/cyPm.c ****     uint8 interruptState;
  35:Generated_Source\PSoC4/cyPm.c **** 
  36:Generated_Source\PSoC4/cyPm.c ****     interruptState = CyEnterCriticalSection();
  32              		.loc 1 36 0
  33 0002 FFF7FEFF 		bl	CyEnterCriticalSection
  34              	.LVL0:
  37:Generated_Source\PSoC4/cyPm.c **** 
  38:Generated_Source\PSoC4/cyPm.c ****     /* CPU enters Sleep mode upon execution of WFI */
  39:Generated_Source\PSoC4/cyPm.c ****     CY_PM_CPU_SCR_REG &= (uint32) (~CY_PM_CPU_SCR_SLEEPDEEP);
  35              		.loc 1 39 0
  36 0006 0421     		mov	r1, #4
  37 0008 034A     		ldr	r2, .L2
  38 000a 1368     		ldr	r3, [r2]
  39 000c 8B43     		bic	r3, r1
  40 000e 1360     		str	r3, [r2]
  40:Generated_Source\PSoC4/cyPm.c **** 
  41:Generated_Source\PSoC4/cyPm.c ****     /* Sleep and wait for interrupt */
  42:Generated_Source\PSoC4/cyPm.c ****     CY_PM_WFI;
  41              		.loc 1 42 0
  42              	@ 42 "Generated_Source\PSoC4\cyPm.c" 1
  43 0010 30BF     		WFI 
  44              	
  45              	@ 0 "" 2
  43:Generated_Source\PSoC4/cyPm.c **** 
  44:Generated_Source\PSoC4/cyPm.c ****     CyExitCriticalSection(interruptState);
  46              		.loc 1 44 0
  47              		.code	16
  48 0012 FFF7FEFF 		bl	CyExitCriticalSection
  49              	.LVL1:
  45:Generated_Source\PSoC4/cyPm.c **** }
  50              		.loc 1 45 0
  51              		@ sp needed
  52 0016 08BD     		pop	{r3, pc}
  53              	.L3:
  54              		.align	2
  55              	.L2:
  56 0018 10ED00E0 		.word	-536810224
  57              		.cfi_endproc
  58              	.LFE0:
  59              		.size	CySysPmSleep, .-CySysPmSleep
  60              		.section	.text.CySysPmDeepSleep,"ax",%progbits
  61              		.align	1
  62              		.global	CySysPmDeepSleep
  63              		.code	16
  64              		.thumb_func
  65              		.type	CySysPmDeepSleep, %function
  66              	CySysPmDeepSleep:
  67              	.LFB1:
  46:Generated_Source\PSoC4/cyPm.c **** 
  47:Generated_Source\PSoC4/cyPm.c **** 
ARM GAS  C:\Users\TIMCHE~1\AppData\Local\Temp\cczAnwbk.s 			page 3


  48:Generated_Source\PSoC4/cyPm.c **** /*******************************************************************************
  49:Generated_Source\PSoC4/cyPm.c **** * Function Name: CySysPmDeepSleep
  50:Generated_Source\PSoC4/cyPm.c **** ****************************************************************************//**
  51:Generated_Source\PSoC4/cyPm.c **** *
  52:Generated_Source\PSoC4/cyPm.c **** * Puts the part into the Deep Sleep state. If the firmware attempts to enter
  53:Generated_Source\PSoC4/cyPm.c **** * this mode before the system is ready (that is, when
  54:Generated_Source\PSoC4/cyPm.c **** * PWR_CONTROL.LPM_READY = 0), then the device will go into the Sleep mode
  55:Generated_Source\PSoC4/cyPm.c **** * instead and automatically enter the originally intended mode when the
  56:Generated_Source\PSoC4/cyPm.c **** * holdoff expires.
  57:Generated_Source\PSoC4/cyPm.c **** *
  58:Generated_Source\PSoC4/cyPm.c **** * The wakeup occurs when an interrupt is received from a DeepSleep or
  59:Generated_Source\PSoC4/cyPm.c **** * Hibernate peripheral. For more details, see a corresponding
  60:Generated_Source\PSoC4/cyPm.c **** * peripheral's datasheet.
  61:Generated_Source\PSoC4/cyPm.c **** *
  62:Generated_Source\PSoC4/cyPm.c **** *******************************************************************************/
  63:Generated_Source\PSoC4/cyPm.c **** void CySysPmDeepSleep(void)
  64:Generated_Source\PSoC4/cyPm.c **** {
  68              		.loc 1 64 0
  69              		.cfi_startproc
  70 0000 08B5     		push	{r3, lr}
  71              		.cfi_def_cfa_offset 8
  72              		.cfi_offset 3, -8
  73              		.cfi_offset 14, -4
  65:Generated_Source\PSoC4/cyPm.c ****     uint8 interruptState;
  66:Generated_Source\PSoC4/cyPm.c ****     #if(CY_IP_SRSSV2)
  67:Generated_Source\PSoC4/cyPm.c ****         volatile uint32 clkSelectReg;
  68:Generated_Source\PSoC4/cyPm.c ****     #endif /* (CY_IP_SRSSV2) */
  69:Generated_Source\PSoC4/cyPm.c **** 
  70:Generated_Source\PSoC4/cyPm.c ****     interruptState = CyEnterCriticalSection();
  74              		.loc 1 70 0
  75 0002 FFF7FEFF 		bl	CyEnterCriticalSection
  76              	.LVL2:
  71:Generated_Source\PSoC4/cyPm.c **** 
  72:Generated_Source\PSoC4/cyPm.c ****     #if(CY_IP_SRSSV2)
  73:Generated_Source\PSoC4/cyPm.c ****         /* Device enters DeepSleep mode when CPU asserts SLEEPDEEP signal */
  74:Generated_Source\PSoC4/cyPm.c ****         CY_PM_PWR_CONTROL_REG &= (uint32) (~CY_PM_PWR_CONTROL_HIBERNATE);
  75:Generated_Source\PSoC4/cyPm.c ****     #endif /* (CY_IP_SRSSV2) */
  76:Generated_Source\PSoC4/cyPm.c **** 
  77:Generated_Source\PSoC4/cyPm.c ****     #if (CY_IP_CPUSS && CY_IP_SRSSV2)
  78:Generated_Source\PSoC4/cyPm.c ****         CY_PM_CPUSS_CONFIG_REG |= CY_PM_CPUSS_CONFIG_FLSH_ACC_BYPASS;
  79:Generated_Source\PSoC4/cyPm.c ****     #endif /* (CY_IP_CPUSS && CY_IP_SRSSV2) */
  80:Generated_Source\PSoC4/cyPm.c **** 
  81:Generated_Source\PSoC4/cyPm.c ****     /* Adjust delay to wait for references to settle on wakeup from Deep Sleep */
  82:Generated_Source\PSoC4/cyPm.c ****     CY_PM_PWR_KEY_DELAY_REG = CY_SFLASH_DPSLP_KEY_DELAY_REG;
  83:Generated_Source\PSoC4/cyPm.c **** 
  84:Generated_Source\PSoC4/cyPm.c ****     /* CPU enters DeepSleep/Hibernate mode upon execution of WFI */
  85:Generated_Source\PSoC4/cyPm.c ****     CY_PM_CPU_SCR_REG |= CY_PM_CPU_SCR_SLEEPDEEP;
  77              		.loc 1 85 0
  78 0006 0421     		mov	r1, #4
  82:Generated_Source\PSoC4/cyPm.c **** 
  79              		.loc 1 82 0
  80 0008 064B     		ldr	r3, .L5
  81 000a 074A     		ldr	r2, .L5+4
  82 000c 1B88     		ldrh	r3, [r3]
  83 000e 9BB2     		uxth	r3, r3
  84 0010 1360     		str	r3, [r2]
  85              		.loc 1 85 0
ARM GAS  C:\Users\TIMCHE~1\AppData\Local\Temp\cczAnwbk.s 			page 4


  86 0012 064A     		ldr	r2, .L5+8
  87 0014 1368     		ldr	r3, [r2]
  88 0016 0B43     		orr	r3, r1
  89 0018 1360     		str	r3, [r2]
  86:Generated_Source\PSoC4/cyPm.c **** 
  87:Generated_Source\PSoC4/cyPm.c ****     #if(CY_IP_SRSSV2)
  88:Generated_Source\PSoC4/cyPm.c ****         /* Preserve system clock configuration and
  89:Generated_Source\PSoC4/cyPm.c ****         * reduce sysclk to <=12 MHz (Cypress ID #158710, #179888).
  90:Generated_Source\PSoC4/cyPm.c ****         */
  91:Generated_Source\PSoC4/cyPm.c ****         clkSelectReg = CY_SYS_CLK_SELECT_REG;
  92:Generated_Source\PSoC4/cyPm.c ****         CySysClkWriteSysclkDiv(CY_SYS_CLK_SYSCLK_DIV4);
  93:Generated_Source\PSoC4/cyPm.c ****     #endif /* (CY_IP_SRSSV2) */
  94:Generated_Source\PSoC4/cyPm.c **** 
  95:Generated_Source\PSoC4/cyPm.c ****     /* Sleep and wait for interrupt */
  96:Generated_Source\PSoC4/cyPm.c ****     CY_PM_WFI;
  90              		.loc 1 96 0
  91              	@ 96 "Generated_Source\PSoC4\cyPm.c" 1
  92 001a 30BF     		WFI 
  93              	
  94              	@ 0 "" 2
  97:Generated_Source\PSoC4/cyPm.c **** 
  98:Generated_Source\PSoC4/cyPm.c ****     #if(CY_IP_SRSSV2)
  99:Generated_Source\PSoC4/cyPm.c ****         /* Restore system clock configuration */
 100:Generated_Source\PSoC4/cyPm.c ****         CY_SYS_CLK_SELECT_REG = clkSelectReg;
 101:Generated_Source\PSoC4/cyPm.c ****     #endif /* (CY_IP_SRSSV2) */
 102:Generated_Source\PSoC4/cyPm.c **** 
 103:Generated_Source\PSoC4/cyPm.c ****     #if (CY_IP_CPUSS && CY_IP_SRSSV2)
 104:Generated_Source\PSoC4/cyPm.c ****         CY_PM_CPUSS_CONFIG_REG &= (uint32) (~CY_PM_CPUSS_CONFIG_FLSH_ACC_BYPASS);
 105:Generated_Source\PSoC4/cyPm.c ****     #endif /* (CY_IP_CPUSS && CY_IP_SRSSV2) */
 106:Generated_Source\PSoC4/cyPm.c **** 
 107:Generated_Source\PSoC4/cyPm.c ****     CyExitCriticalSection(interruptState);
  95              		.loc 1 107 0
  96              		.code	16
  97 001c FFF7FEFF 		bl	CyExitCriticalSection
  98              	.LVL3:
 108:Generated_Source\PSoC4/cyPm.c **** }
  99              		.loc 1 108 0
 100              		@ sp needed
 101 0020 08BD     		pop	{r3, pc}
 102              	.L6:
 103 0022 C046     		.align	2
 104              	.L5:
 105 0024 52F1FF0F 		.word	268431698
 106 0028 04000340 		.word	1073938436
 107 002c 10ED00E0 		.word	-536810224
 108              		.cfi_endproc
 109              	.LFE1:
 110              		.size	CySysPmDeepSleep, .-CySysPmDeepSleep
 111              		.section	.text.CySysPmSetWakeupHoldoff,"ax",%progbits
 112              		.align	1
 113              		.global	CySysPmSetWakeupHoldoff
 114              		.code	16
 115              		.thumb_func
 116              		.type	CySysPmSetWakeupHoldoff, %function
 117              	CySysPmSetWakeupHoldoff:
 118              	.LFB2:
 109:Generated_Source\PSoC4/cyPm.c **** 
ARM GAS  C:\Users\TIMCHE~1\AppData\Local\Temp\cczAnwbk.s 			page 5


 110:Generated_Source\PSoC4/cyPm.c **** 
 111:Generated_Source\PSoC4/cyPm.c **** #if(CY_IP_SRSSV2)
 112:Generated_Source\PSoC4/cyPm.c **** 
 113:Generated_Source\PSoC4/cyPm.c ****     /*******************************************************************************
 114:Generated_Source\PSoC4/cyPm.c ****     * Function Name: CySysPmHibernate
 115:Generated_Source\PSoC4/cyPm.c ****     ****************************************************************************//**
 116:Generated_Source\PSoC4/cyPm.c ****     *
 117:Generated_Source\PSoC4/cyPm.c ****     * Puts the part into the Hibernate state. Only SRAM and UDBs are retained;
 118:Generated_Source\PSoC4/cyPm.c ****     * most internal supplies are off. Wakeup is possible from a pin or a hibernate
 119:Generated_Source\PSoC4/cyPm.c ****     * comparator only.
 120:Generated_Source\PSoC4/cyPm.c ****     *
 121:Generated_Source\PSoC4/cyPm.c ****     * It is expected that the firmware has already frozen the IO-Cells using
 122:Generated_Source\PSoC4/cyPm.c ****     * CySysPmFreezeIo() function before the call to this function. If this is
 123:Generated_Source\PSoC4/cyPm.c ****     * omitted, the IO-cells will be frozen in the same way as they are
 124:Generated_Source\PSoC4/cyPm.c ****     * in the Active to Deep Sleep transition, but will lose their state on wake up
 125:Generated_Source\PSoC4/cyPm.c ****     * (because of the reset occurring at that time).
 126:Generated_Source\PSoC4/cyPm.c ****     *
 127:Generated_Source\PSoC4/cyPm.c ****     * Because all the CPU state is lost, the CPU will start up at the reset vector.
 128:Generated_Source\PSoC4/cyPm.c ****     * To save the firmware state through the Hibernate low power mode, a
 129:Generated_Source\PSoC4/cyPm.c ****     * corresponding variable should be defined with CY_NOINIT attribute. It
 130:Generated_Source\PSoC4/cyPm.c ****     * prevents data from being initialized to zero on startup. The interrupt
 131:Generated_Source\PSoC4/cyPm.c ****     * cause of the hibernate peripheral is retained, such that it can be either
 132:Generated_Source\PSoC4/cyPm.c ****     * read by the firmware or cause an interrupt after the firmware has booted and
 133:Generated_Source\PSoC4/cyPm.c ****     * enabled the corresponding interrupt. To distinguish the wakeup from
 134:Generated_Source\PSoC4/cyPm.c ****     * the Hibernate mode and the general Reset event, the
 135:Generated_Source\PSoC4/cyPm.c ****     * \ref CySysPmGetResetReason() function could be used.
 136:Generated_Source\PSoC4/cyPm.c ****     *
 137:Generated_Source\PSoC4/cyPm.c ****     *******************************************************************************/
 138:Generated_Source\PSoC4/cyPm.c ****     void CySysPmHibernate(void)
 139:Generated_Source\PSoC4/cyPm.c ****     {
 140:Generated_Source\PSoC4/cyPm.c ****         uint8 interruptState;
 141:Generated_Source\PSoC4/cyPm.c **** 
 142:Generated_Source\PSoC4/cyPm.c ****         interruptState = CyEnterCriticalSection();
 143:Generated_Source\PSoC4/cyPm.c **** 
 144:Generated_Source\PSoC4/cyPm.c ****         #if (CY_IP_HOBTO_DEVICE)
 145:Generated_Source\PSoC4/cyPm.c ****             /* Disable input buffers for all ports */
 146:Generated_Source\PSoC4/cyPm.c ****             CySysPmHibPinsDisableInputBuf();
 147:Generated_Source\PSoC4/cyPm.c ****         #endif /* (CY_IP_HOBTO_DEVICE) */
 148:Generated_Source\PSoC4/cyPm.c **** 
 149:Generated_Source\PSoC4/cyPm.c ****         /* Device enters Hibernate mode when CPU asserts SLEEPDEEP signal */
 150:Generated_Source\PSoC4/cyPm.c ****         CY_PM_PWR_CONTROL_REG |= CY_PM_PWR_CONTROL_HIBERNATE;
 151:Generated_Source\PSoC4/cyPm.c **** 
 152:Generated_Source\PSoC4/cyPm.c ****         /* Adjust delay to wait for references to settle on wakeup from hibernate */
 153:Generated_Source\PSoC4/cyPm.c ****         CY_PM_PWR_KEY_DELAY_REG = CY_SFLASH_HIB_KEY_DELAY_REG;
 154:Generated_Source\PSoC4/cyPm.c **** 
 155:Generated_Source\PSoC4/cyPm.c ****         /* CPU enters DeepSleep/Hibernate mode upon execution of WFI */
 156:Generated_Source\PSoC4/cyPm.c ****         CY_PM_CPU_SCR_REG |= CY_PM_CPU_SCR_SLEEPDEEP;
 157:Generated_Source\PSoC4/cyPm.c **** 
 158:Generated_Source\PSoC4/cyPm.c ****         /* Save token that will retain through a STOP/WAKEUP sequence
 159:Generated_Source\PSoC4/cyPm.c ****          * thus could be used by CySysPmGetResetReason() to differentiate
 160:Generated_Source\PSoC4/cyPm.c ****          * WAKEUP from a general RESET event.
 161:Generated_Source\PSoC4/cyPm.c ****          */
 162:Generated_Source\PSoC4/cyPm.c ****         CY_PM_PWR_STOP_REG = (CY_PM_PWR_STOP_REG & (uint32)(~CY_PM_PWR_STOP_TOKEN_MASK)) | CY_PM_PW
 163:Generated_Source\PSoC4/cyPm.c **** 
 164:Generated_Source\PSoC4/cyPm.c ****         /* Sleep and wait for interrupt. Wakeup from Hibernate is performed
 165:Generated_Source\PSoC4/cyPm.c ****          * through RESET state, causing a normal Boot procedure to occur.
 166:Generated_Source\PSoC4/cyPm.c ****          * The WFI instruction doesn't put the core to sleep if its wake condition
ARM GAS  C:\Users\TIMCHE~1\AppData\Local\Temp\cczAnwbk.s 			page 6


 167:Generated_Source\PSoC4/cyPm.c ****          * is true when the instruction is executed.
 168:Generated_Source\PSoC4/cyPm.c ****          */
 169:Generated_Source\PSoC4/cyPm.c ****         CY_PM_WFI;
 170:Generated_Source\PSoC4/cyPm.c **** 
 171:Generated_Source\PSoC4/cyPm.c ****         CyExitCriticalSection(interruptState);
 172:Generated_Source\PSoC4/cyPm.c ****     }
 173:Generated_Source\PSoC4/cyPm.c **** 
 174:Generated_Source\PSoC4/cyPm.c **** 
 175:Generated_Source\PSoC4/cyPm.c ****     /*******************************************************************************
 176:Generated_Source\PSoC4/cyPm.c ****     * Function Name: CySysPmStop
 177:Generated_Source\PSoC4/cyPm.c ****     ****************************************************************************//**
 178:Generated_Source\PSoC4/cyPm.c ****     *
 179:Generated_Source\PSoC4/cyPm.c ****     * Puts the part into the Stop state. All internal supplies are off;
 180:Generated_Source\PSoC4/cyPm.c ****     * no state is retained.
 181:Generated_Source\PSoC4/cyPm.c ****     *
 182:Generated_Source\PSoC4/cyPm.c ****     * Wakeup from Stop is performed by toggling the wakeup pin, causing
 183:Generated_Source\PSoC4/cyPm.c ****     * a normal boot procedure to occur. To configure the wakeup pin,
 184:Generated_Source\PSoC4/cyPm.c ****     * the Digital Input Pin component should be placed on the schematic,
 185:Generated_Source\PSoC4/cyPm.c ****     * assigned to the wakeup pin, and resistively pulled up or down to the inverse
 186:Generated_Source\PSoC4/cyPm.c ****     * state of the wakeup polarity. To distinguish the wakeup from the Stop mode
 187:Generated_Source\PSoC4/cyPm.c ****     * and the general Reset event, \ref CySysPmGetResetReason() function could be
 188:Generated_Source\PSoC4/cyPm.c ****     * used.  The wakeup pin is active low by default. The wakeup pin polarity
 189:Generated_Source\PSoC4/cyPm.c ****     * could be changed with the \ref CySysPmSetWakeupPolarity() function.
 190:Generated_Source\PSoC4/cyPm.c ****     *
 191:Generated_Source\PSoC4/cyPm.c ****     * This function freezes IO cells implicitly. It is not possible to enter
 192:Generated_Source\PSoC4/cyPm.c ****     * the STOP mode before freezing the IO cells. The IO cells remain frozen after
 193:Generated_Source\PSoC4/cyPm.c ****     * awake from the Stop mode until the firmware unfreezes them after booting
 194:Generated_Source\PSoC4/cyPm.c ****     * explicitly with \ref CySysPmUnfreezeIo() function call.
 195:Generated_Source\PSoC4/cyPm.c ****     *
 196:Generated_Source\PSoC4/cyPm.c ****     *******************************************************************************/
 197:Generated_Source\PSoC4/cyPm.c ****     void CySysPmStop(void)
 198:Generated_Source\PSoC4/cyPm.c ****     {
 199:Generated_Source\PSoC4/cyPm.c ****         (void) CyEnterCriticalSection();
 200:Generated_Source\PSoC4/cyPm.c **** 
 201:Generated_Source\PSoC4/cyPm.c ****         /* Update token to indicate Stop mode transition. Preserve only polarity. */
 202:Generated_Source\PSoC4/cyPm.c ****         CY_PM_PWR_STOP_REG = (CY_PM_PWR_STOP_REG & CY_PM_PWR_STOP_POLARITY) | CY_PM_PWR_STOP_TOKEN_
 203:Generated_Source\PSoC4/cyPm.c **** 
 204:Generated_Source\PSoC4/cyPm.c ****         /* Freeze IO-Cells to save IO-Cell state */
 205:Generated_Source\PSoC4/cyPm.c ****         CySysPmFreezeIo();
 206:Generated_Source\PSoC4/cyPm.c **** 
 207:Generated_Source\PSoC4/cyPm.c ****         /* Initiates transition to Stop state */
 208:Generated_Source\PSoC4/cyPm.c ****         CY_PM_PWR_STOP_REG = CY_PM_PWR_STOP_REG | CY_PM_PWR_STOP_STOP;
 209:Generated_Source\PSoC4/cyPm.c **** 
 210:Generated_Source\PSoC4/cyPm.c ****         /* Depending on the clock frequency and internal timing delays,
 211:Generated_Source\PSoC4/cyPm.c ****          * the final AHB transaction may or may not complete. To guard against
 212:Generated_Source\PSoC4/cyPm.c ****          * accidentally executing an unintended instruction, it is recommended
 213:Generated_Source\PSoC4/cyPm.c ****          * to add 2 NOP cycles after the final write to the STOP register.
 214:Generated_Source\PSoC4/cyPm.c ****          */
 215:Generated_Source\PSoC4/cyPm.c ****         CY_NOP;
 216:Generated_Source\PSoC4/cyPm.c ****         CY_NOP;
 217:Generated_Source\PSoC4/cyPm.c **** 
 218:Generated_Source\PSoC4/cyPm.c ****         /* Should never get to this WFI instruction */
 219:Generated_Source\PSoC4/cyPm.c ****         CY_PM_WFI;
 220:Generated_Source\PSoC4/cyPm.c **** 
 221:Generated_Source\PSoC4/cyPm.c ****         /* Wakeup from Stop is performed by toggling of Wakeup pin,
 222:Generated_Source\PSoC4/cyPm.c ****          * causing a normal Boot procedure to occur. No need to exit
 223:Generated_Source\PSoC4/cyPm.c ****          * from the critical section.
ARM GAS  C:\Users\TIMCHE~1\AppData\Local\Temp\cczAnwbk.s 			page 7


 224:Generated_Source\PSoC4/cyPm.c ****          */
 225:Generated_Source\PSoC4/cyPm.c ****     }
 226:Generated_Source\PSoC4/cyPm.c **** 
 227:Generated_Source\PSoC4/cyPm.c **** 
 228:Generated_Source\PSoC4/cyPm.c ****     /*******************************************************************************
 229:Generated_Source\PSoC4/cyPm.c ****     * Function Name: CySysPmSetWakeupPolarity
 230:Generated_Source\PSoC4/cyPm.c ****     ****************************************************************************//**
 231:Generated_Source\PSoC4/cyPm.c ****     *
 232:Generated_Source\PSoC4/cyPm.c ****     * Wake up from the stop mode is performed by toggling the wakeup pin,
 233:Generated_Source\PSoC4/cyPm.c ****     * causing a normal boot procedure to occur. This function assigns
 234:Generated_Source\PSoC4/cyPm.c ****     * the wakeup pin active level. Setting the wakeup pin to this level will cause
 235:Generated_Source\PSoC4/cyPm.c ****     * the wakeup from stop mode. The wakeup pin is active low by default.
 236:Generated_Source\PSoC4/cyPm.c ****     *
 237:Generated_Source\PSoC4/cyPm.c ****     * \param polarity
 238:Generated_Source\PSoC4/cyPm.c ****     * - \ref CY_PM_STOP_WAKEUP_ACTIVE_LOW Logical zero will wakeup the chip
 239:Generated_Source\PSoC4/cyPm.c ****     * - \ref CY_PM_STOP_WAKEUP_ACTIVE_HIGH Logical one will wakeup the chip
 240:Generated_Source\PSoC4/cyPm.c ****     *
 241:Generated_Source\PSoC4/cyPm.c ****     *******************************************************************************/
 242:Generated_Source\PSoC4/cyPm.c ****     void CySysPmSetWakeupPolarity(uint32 polarity)
 243:Generated_Source\PSoC4/cyPm.c ****     {
 244:Generated_Source\PSoC4/cyPm.c ****         uint8 interruptState;
 245:Generated_Source\PSoC4/cyPm.c **** 
 246:Generated_Source\PSoC4/cyPm.c ****         interruptState = CyEnterCriticalSection();
 247:Generated_Source\PSoC4/cyPm.c **** 
 248:Generated_Source\PSoC4/cyPm.c ****         CY_PM_PWR_STOP_REG = (CY_PM_STOP_WAKEUP_ACTIVE_LOW != polarity) ?
 249:Generated_Source\PSoC4/cyPm.c ****                             (CY_PM_PWR_STOP_REG | CY_PM_PWR_STOP_POLARITY) :
 250:Generated_Source\PSoC4/cyPm.c ****                             (CY_PM_PWR_STOP_REG & (uint32) (~CY_PM_PWR_STOP_POLARITY));
 251:Generated_Source\PSoC4/cyPm.c **** 
 252:Generated_Source\PSoC4/cyPm.c ****         CyExitCriticalSection(interruptState);
 253:Generated_Source\PSoC4/cyPm.c ****     }
 254:Generated_Source\PSoC4/cyPm.c **** 
 255:Generated_Source\PSoC4/cyPm.c **** 
 256:Generated_Source\PSoC4/cyPm.c ****     /*******************************************************************************
 257:Generated_Source\PSoC4/cyPm.c ****     * Function Name: CySysPmGetResetReason
 258:Generated_Source\PSoC4/cyPm.c ****     ****************************************************************************//**
 259:Generated_Source\PSoC4/cyPm.c ****     *
 260:Generated_Source\PSoC4/cyPm.c ****     * Retrieves the last reset reason - transition from OFF/XRES/STOP/HIBERNATE to
 261:Generated_Source\PSoC4/cyPm.c ****     * the RESET state. Note that waking up from STOP using XRES will be perceived
 262:Generated_Source\PSoC4/cyPm.c ****     * as a general RESET.
 263:Generated_Source\PSoC4/cyPm.c ****     *
 264:Generated_Source\PSoC4/cyPm.c ****     * \return CY_PM_RESET_REASON_UNKN          Unknown reset reason.
 265:Generated_Source\PSoC4/cyPm.c ****     * \return CY_PM_RESET_REASON_XRES          Transition from OFF/XRES to RESET
 266:Generated_Source\PSoC4/cyPm.c ****     * \return CY_PM_RESET_REASON_WAKEUP_HIB    Transition/wakeup from HIBERNATE to RESET
 267:Generated_Source\PSoC4/cyPm.c ****     * \return CY_PM_RESET_REASON_WAKEUP_STOP   Transition/wakeup from STOP to RESET
 268:Generated_Source\PSoC4/cyPm.c ****     *
 269:Generated_Source\PSoC4/cyPm.c ****     *******************************************************************************/
 270:Generated_Source\PSoC4/cyPm.c ****     uint32 CySysPmGetResetReason(void)
 271:Generated_Source\PSoC4/cyPm.c ****     {
 272:Generated_Source\PSoC4/cyPm.c ****         uint32 reason = CY_PM_RESET_REASON_UNKN;
 273:Generated_Source\PSoC4/cyPm.c **** 
 274:Generated_Source\PSoC4/cyPm.c ****         switch(CY_PM_PWR_STOP_REG & CY_PM_PWR_STOP_TOKEN_MASK)
 275:Generated_Source\PSoC4/cyPm.c ****         {
 276:Generated_Source\PSoC4/cyPm.c ****         /* Power up, XRES */
 277:Generated_Source\PSoC4/cyPm.c ****         case CY_PM_PWR_STOP_TOKEN_XRES:
 278:Generated_Source\PSoC4/cyPm.c ****             reason = CY_PM_RESET_REASON_XRES;
 279:Generated_Source\PSoC4/cyPm.c ****             break;
 280:Generated_Source\PSoC4/cyPm.c **** 
ARM GAS  C:\Users\TIMCHE~1\AppData\Local\Temp\cczAnwbk.s 			page 8


 281:Generated_Source\PSoC4/cyPm.c ****         /* Wakeup from Hibernate */
 282:Generated_Source\PSoC4/cyPm.c ****         case CY_PM_PWR_STOP_TOKEN_HIB:
 283:Generated_Source\PSoC4/cyPm.c ****             reason = CY_PM_RESET_REASON_WAKEUP_HIB;
 284:Generated_Source\PSoC4/cyPm.c ****             break;
 285:Generated_Source\PSoC4/cyPm.c **** 
 286:Generated_Source\PSoC4/cyPm.c ****         /* Wakeup from Stop (through WAKEUP pin assert) */
 287:Generated_Source\PSoC4/cyPm.c ****         case CY_PM_PWR_STOP_TOKEN_STOP:
 288:Generated_Source\PSoC4/cyPm.c ****             reason = CY_PM_RESET_REASON_WAKEUP_STOP;
 289:Generated_Source\PSoC4/cyPm.c ****             break;
 290:Generated_Source\PSoC4/cyPm.c **** 
 291:Generated_Source\PSoC4/cyPm.c ****         /* Unknown reason */
 292:Generated_Source\PSoC4/cyPm.c ****         default:
 293:Generated_Source\PSoC4/cyPm.c ****             break;
 294:Generated_Source\PSoC4/cyPm.c ****         }
 295:Generated_Source\PSoC4/cyPm.c **** 
 296:Generated_Source\PSoC4/cyPm.c ****         return (reason);
 297:Generated_Source\PSoC4/cyPm.c ****     }
 298:Generated_Source\PSoC4/cyPm.c **** 
 299:Generated_Source\PSoC4/cyPm.c **** 
 300:Generated_Source\PSoC4/cyPm.c ****     /*******************************************************************************
 301:Generated_Source\PSoC4/cyPm.c ****     * Function Name: CySysPmFreezeIo
 302:Generated_Source\PSoC4/cyPm.c ****     ****************************************************************************//**
 303:Generated_Source\PSoC4/cyPm.c ****     *
 304:Generated_Source\PSoC4/cyPm.c ****     * Freezes IO-Cells directly to save the IO-Cell state on wake up from the
 305:Generated_Source\PSoC4/cyPm.c ****     * Hibernate or Stop state. It is not required to call this function before
 306:Generated_Source\PSoC4/cyPm.c ****     * entering the Stop mode, since \ref CySysPmStop() function freezes IO-Cells
 307:Generated_Source\PSoC4/cyPm.c ****     * implicitly.
 308:Generated_Source\PSoC4/cyPm.c ****     *
 309:Generated_Source\PSoC4/cyPm.c ****     * This API is not available for PSoC 4000 family of devices.
 310:Generated_Source\PSoC4/cyPm.c ****     *
 311:Generated_Source\PSoC4/cyPm.c ****     *******************************************************************************/
 312:Generated_Source\PSoC4/cyPm.c ****     void CySysPmFreezeIo(void)
 313:Generated_Source\PSoC4/cyPm.c ****     {
 314:Generated_Source\PSoC4/cyPm.c ****         uint8 interruptState;
 315:Generated_Source\PSoC4/cyPm.c **** 
 316:Generated_Source\PSoC4/cyPm.c ****         interruptState = CyEnterCriticalSection();
 317:Generated_Source\PSoC4/cyPm.c **** 
 318:Generated_Source\PSoC4/cyPm.c ****         /* Check FREEZE state to avoid recurrent IO-Cells freeze attempt,
 319:Generated_Source\PSoC4/cyPm.c ****          * since the second call to this function will cause accidental switch
 320:Generated_Source\PSoC4/cyPm.c ****          * to the STOP mode (the system will enter STOP mode immediately after
 321:Generated_Source\PSoC4/cyPm.c ****          * writing to STOP bit since both UNLOCK and FREEZE have been set correctly
 322:Generated_Source\PSoC4/cyPm.c ****          * in a previous call to this function).
 323:Generated_Source\PSoC4/cyPm.c ****          */
 324:Generated_Source\PSoC4/cyPm.c ****         if (0u == (CY_PM_PWR_STOP_REG & CY_PM_PWR_STOP_FREEZE))
 325:Generated_Source\PSoC4/cyPm.c ****         {
 326:Generated_Source\PSoC4/cyPm.c ****             /* Preserve last reset reason and disable overrides the next freeze command by peripher
 327:Generated_Source\PSoC4/cyPm.c ****             CY_PM_PWR_STOP_REG = CY_PM_PWR_STOP_STOP | CY_PM_PWR_STOP_FREEZE | CY_PM_PWR_STOP_UNLOC
 328:Generated_Source\PSoC4/cyPm.c ****                                 (CY_PM_PWR_STOP_REG & (CY_PM_PWR_STOP_TOKEN_MASK | CY_PM_PWR_STOP_P
 329:Generated_Source\PSoC4/cyPm.c **** 
 330:Generated_Source\PSoC4/cyPm.c ****             /* If reading after writing, read this register three times to delay
 331:Generated_Source\PSoC4/cyPm.c ****             *  enough time for internal settling.
 332:Generated_Source\PSoC4/cyPm.c ****             */
 333:Generated_Source\PSoC4/cyPm.c ****             (void) CY_PM_PWR_STOP_REG;
 334:Generated_Source\PSoC4/cyPm.c ****             (void) CY_PM_PWR_STOP_REG;
 335:Generated_Source\PSoC4/cyPm.c **** 
 336:Generated_Source\PSoC4/cyPm.c ****             /* Second write causes the freeze of IO-Cells to save IO-Cell state */
 337:Generated_Source\PSoC4/cyPm.c ****             CY_PM_PWR_STOP_REG = CY_PM_PWR_STOP_REG;
ARM GAS  C:\Users\TIMCHE~1\AppData\Local\Temp\cczAnwbk.s 			page 9


 338:Generated_Source\PSoC4/cyPm.c ****         }
 339:Generated_Source\PSoC4/cyPm.c **** 
 340:Generated_Source\PSoC4/cyPm.c ****         CyExitCriticalSection(interruptState);
 341:Generated_Source\PSoC4/cyPm.c ****     }
 342:Generated_Source\PSoC4/cyPm.c **** 
 343:Generated_Source\PSoC4/cyPm.c **** 
 344:Generated_Source\PSoC4/cyPm.c ****     /*******************************************************************************
 345:Generated_Source\PSoC4/cyPm.c ****     * Function Name: CySysPmUnfreezeIo
 346:Generated_Source\PSoC4/cyPm.c ****     ****************************************************************************//**
 347:Generated_Source\PSoC4/cyPm.c ****     *
 348:Generated_Source\PSoC4/cyPm.c ****     * The IO-Cells remain frozen after awake from Hibernate or Stop mode until
 349:Generated_Source\PSoC4/cyPm.c ****     * the firmware unfreezes them after booting. The call of this function
 350:Generated_Source\PSoC4/cyPm.c ****     * unfreezes IO-Cells explicitly.
 351:Generated_Source\PSoC4/cyPm.c ****     *
 352:Generated_Source\PSoC4/cyPm.c ****     * If the firmware intent is to retain the data value on the port, then the
 353:Generated_Source\PSoC4/cyPm.c ****     * value must be read and re-written to the data register before calling this
 354:Generated_Source\PSoC4/cyPm.c ****     * API. Furthermore, the drive mode must be re-programmed.  If this is not done,
 355:Generated_Source\PSoC4/cyPm.c ****     * the pin state will change to default state the moment the freeze is removed.
 356:Generated_Source\PSoC4/cyPm.c ****     *
 357:Generated_Source\PSoC4/cyPm.c ****     * This API is not available for PSoC 4000 family of devices.
 358:Generated_Source\PSoC4/cyPm.c ****     *
 359:Generated_Source\PSoC4/cyPm.c ****     *******************************************************************************/
 360:Generated_Source\PSoC4/cyPm.c ****     void CySysPmUnfreezeIo(void)
 361:Generated_Source\PSoC4/cyPm.c ****     {
 362:Generated_Source\PSoC4/cyPm.c ****         uint8 interruptState;
 363:Generated_Source\PSoC4/cyPm.c **** 
 364:Generated_Source\PSoC4/cyPm.c ****         interruptState = CyEnterCriticalSection();
 365:Generated_Source\PSoC4/cyPm.c **** 
 366:Generated_Source\PSoC4/cyPm.c ****         /* Preserve last reset reason and wakeup polarity. Then, unfreeze I/O:
 367:Generated_Source\PSoC4/cyPm.c ****          * write PWR_STOP.FREEZE=0, .UNLOCK=0x3A, .STOP=0, .TOKEN
 368:Generated_Source\PSoC4/cyPm.c ****          */
 369:Generated_Source\PSoC4/cyPm.c ****         CY_PM_PWR_STOP_REG = CY_PM_PWR_STOP_UNLOCK |
 370:Generated_Source\PSoC4/cyPm.c ****                             (CY_PM_PWR_STOP_REG & (CY_PM_PWR_STOP_TOKEN_MASK | CY_PM_PWR_STOP_POLAR
 371:Generated_Source\PSoC4/cyPm.c **** 
 372:Generated_Source\PSoC4/cyPm.c ****         /* If reading after writing, read this register three times to delay
 373:Generated_Source\PSoC4/cyPm.c ****         *  enough time for internal settling.
 374:Generated_Source\PSoC4/cyPm.c ****         */
 375:Generated_Source\PSoC4/cyPm.c ****         (void) CY_PM_PWR_STOP_REG;
 376:Generated_Source\PSoC4/cyPm.c ****         (void) CY_PM_PWR_STOP_REG;
 377:Generated_Source\PSoC4/cyPm.c **** 
 378:Generated_Source\PSoC4/cyPm.c ****         /* Lock STOP mode: write PWR_STOP.FREEZE=0, UNLOCK=0x00, STOP=0, .TOKEN */
 379:Generated_Source\PSoC4/cyPm.c ****         CY_PM_PWR_STOP_REG &= (CY_PM_PWR_STOP_TOKEN_MASK | CY_PM_PWR_STOP_POLARITY);
 380:Generated_Source\PSoC4/cyPm.c **** 
 381:Generated_Source\PSoC4/cyPm.c ****         CyExitCriticalSection(interruptState);
 382:Generated_Source\PSoC4/cyPm.c ****     }
 383:Generated_Source\PSoC4/cyPm.c **** 
 384:Generated_Source\PSoC4/cyPm.c **** #else
 385:Generated_Source\PSoC4/cyPm.c **** 
 386:Generated_Source\PSoC4/cyPm.c ****     /*******************************************************************************
 387:Generated_Source\PSoC4/cyPm.c ****     * Function Name: CySysPmSetWakeupHoldoff
 388:Generated_Source\PSoC4/cyPm.c ****     ****************************************************************************//**
 389:Generated_Source\PSoC4/cyPm.c ****     *
 390:Generated_Source\PSoC4/cyPm.c ****     * Sets the Deep Sleep wakeup time by scaling the hold-off to the HFCLK
 391:Generated_Source\PSoC4/cyPm.c ****     * frequency.
 392:Generated_Source\PSoC4/cyPm.c ****     *
 393:Generated_Source\PSoC4/cyPm.c ****     * This function must be called before increasing HFCLK clock frequency. It can
 394:Generated_Source\PSoC4/cyPm.c ****     * optionally be called after lowering HFCLK clock frequency in order to improve
ARM GAS  C:\Users\TIMCHE~1\AppData\Local\Temp\cczAnwbk.s 			page 10


 395:Generated_Source\PSoC4/cyPm.c ****     * Deep Sleep wakeup time.
 396:Generated_Source\PSoC4/cyPm.c ****     *
 397:Generated_Source\PSoC4/cyPm.c ****     * It is functionally acceptable to leave the default hold-off setting, but
 398:Generated_Source\PSoC4/cyPm.c ****     * Deep Sleep wakeup time may exceed the specification.
 399:Generated_Source\PSoC4/cyPm.c ****     *
 400:Generated_Source\PSoC4/cyPm.c ****     * This function is applicable only for the 4000 device family.
 401:Generated_Source\PSoC4/cyPm.c ****     *
 402:Generated_Source\PSoC4/cyPm.c ****     * \param hfclkFrequencyMhz The HFCLK frequency in MHz.
 403:Generated_Source\PSoC4/cyPm.c ****     *
 404:Generated_Source\PSoC4/cyPm.c ****     *******************************************************************************/
 405:Generated_Source\PSoC4/cyPm.c ****     void CySysPmSetWakeupHoldoff(uint32 hfclkFrequencyMhz)
 406:Generated_Source\PSoC4/cyPm.c ****     {
 119              		.loc 1 406 0
 120              		.cfi_startproc
 121              	.LVL4:
 407:Generated_Source\PSoC4/cyPm.c ****         CY_PM_PWR_KEY_DELAY_REG = ((((uint32)(CY_PM_PWR_KEY_DELAY_REG_DEFAULT << 16u) /
 408:Generated_Source\PSoC4/cyPm.c ****             CY_PM_PWR_KEY_DELAY_FREQ_DEFAULT) * hfclkFrequencyMhz) >> 16u) + 1u;
 122              		.loc 1 408 0
 123 0000 034B     		ldr	r3, .L8
 409:Generated_Source\PSoC4/cyPm.c ****     }
 124              		.loc 1 409 0
 125              		@ sp needed
 408:Generated_Source\PSoC4/cyPm.c ****     }
 126              		.loc 1 408 0
 127 0002 5843     		mul	r0, r3
 128              	.LVL5:
 407:Generated_Source\PSoC4/cyPm.c ****         CY_PM_PWR_KEY_DELAY_REG = ((((uint32)(CY_PM_PWR_KEY_DELAY_REG_DEFAULT << 16u) /
 129              		.loc 1 407 0
 130 0004 034B     		ldr	r3, .L8+4
 408:Generated_Source\PSoC4/cyPm.c ****     }
 131              		.loc 1 408 0
 132 0006 000C     		lsr	r0, r0, #16
 133 0008 0130     		add	r0, r0, #1
 407:Generated_Source\PSoC4/cyPm.c ****         CY_PM_PWR_KEY_DELAY_REG = ((((uint32)(CY_PM_PWR_KEY_DELAY_REG_DEFAULT << 16u) /
 134              		.loc 1 407 0
 135 000a 1860     		str	r0, [r3]
 136              		.loc 1 409 0
 137 000c 7047     		bx	lr
 138              	.L9:
 139 000e C046     		.align	2
 140              	.L8:
 141 0010 AA2A0500 		.word	338602
 142 0014 04000340 		.word	1073938436
 143              		.cfi_endproc
 144              	.LFE2:
 145              		.size	CySysPmSetWakeupHoldoff, .-CySysPmSetWakeupHoldoff
 146              		.text
 147              	.Letext0:
 148              		.file 2 "Generated_Source\\PSoC4\\cytypes.h"
 149              		.file 3 "Generated_Source\\PSoC4\\CyLib.h"
 150              		.section	.debug_info,"",%progbits
 151              	.Ldebug_info0:
 152 0000 77010000 		.4byte	0x177
 153 0004 0400     		.2byte	0x4
 154 0006 00000000 		.4byte	.Ldebug_abbrev0
 155 000a 04       		.byte	0x4
 156 000b 01       		.uleb128 0x1
ARM GAS  C:\Users\TIMCHE~1\AppData\Local\Temp\cczAnwbk.s 			page 11


 157 000c 80000000 		.4byte	.LASF22
 158 0010 01       		.byte	0x1
 159 0011 33000000 		.4byte	.LASF23
 160 0015 4A010000 		.4byte	.LASF24
 161 0019 00000000 		.4byte	.Ldebug_ranges0+0
 162 001d 00000000 		.4byte	0
 163 0021 00000000 		.4byte	.Ldebug_line0
 164 0025 02       		.uleb128 0x2
 165 0026 01       		.byte	0x1
 166 0027 06       		.byte	0x6
 167 0028 2E020000 		.4byte	.LASF0
 168 002c 02       		.uleb128 0x2
 169 002d 01       		.byte	0x1
 170 002e 08       		.byte	0x8
 171 002f E7010000 		.4byte	.LASF1
 172 0033 02       		.uleb128 0x2
 173 0034 02       		.byte	0x2
 174 0035 05       		.byte	0x5
 175 0036 63020000 		.4byte	.LASF2
 176 003a 02       		.uleb128 0x2
 177 003b 02       		.byte	0x2
 178 003c 07       		.byte	0x7
 179 003d 37010000 		.4byte	.LASF3
 180 0041 02       		.uleb128 0x2
 181 0042 04       		.byte	0x4
 182 0043 05       		.byte	0x5
 183 0044 FA010000 		.4byte	.LASF4
 184 0048 02       		.uleb128 0x2
 185 0049 04       		.byte	0x4
 186 004a 07       		.byte	0x7
 187 004b 0E010000 		.4byte	.LASF5
 188 004f 02       		.uleb128 0x2
 189 0050 08       		.byte	0x8
 190 0051 05       		.byte	0x5
 191 0052 00000000 		.4byte	.LASF6
 192 0056 02       		.uleb128 0x2
 193 0057 08       		.byte	0x8
 194 0058 07       		.byte	0x7
 195 0059 20010000 		.4byte	.LASF7
 196 005d 03       		.uleb128 0x3
 197 005e 04       		.byte	0x4
 198 005f 05       		.byte	0x5
 199 0060 696E7400 		.ascii	"int\000"
 200 0064 02       		.uleb128 0x2
 201 0065 04       		.byte	0x4
 202 0066 07       		.byte	0x7
 203 0067 15000000 		.4byte	.LASF8
 204 006b 04       		.uleb128 0x4
 205 006c 28020000 		.4byte	.LASF9
 206 0070 02       		.byte	0x2
 207 0071 B901     		.2byte	0x1b9
 208 0073 2C000000 		.4byte	0x2c
 209 0077 04       		.uleb128 0x4
 210 0078 6D020000 		.4byte	.LASF10
 211 007c 02       		.byte	0x2
 212 007d BA01     		.2byte	0x1ba
 213 007f 3A000000 		.4byte	0x3a
ARM GAS  C:\Users\TIMCHE~1\AppData\Local\Temp\cczAnwbk.s 			page 12


 214 0083 04       		.uleb128 0x4
 215 0084 0E000000 		.4byte	.LASF11
 216 0088 02       		.byte	0x2
 217 0089 BB01     		.2byte	0x1bb
 218 008b 48000000 		.4byte	0x48
 219 008f 02       		.uleb128 0x2
 220 0090 04       		.byte	0x4
 221 0091 04       		.byte	0x4
 222 0092 5D020000 		.4byte	.LASF12
 223 0096 02       		.uleb128 0x2
 224 0097 08       		.byte	0x8
 225 0098 04       		.byte	0x4
 226 0099 09020000 		.4byte	.LASF13
 227 009d 02       		.uleb128 0x2
 228 009e 01       		.byte	0x1
 229 009f 08       		.byte	0x8
 230 00a0 F5010000 		.4byte	.LASF14
 231 00a4 04       		.uleb128 0x4
 232 00a5 03020000 		.4byte	.LASF15
 233 00a9 02       		.byte	0x2
 234 00aa 6402     		.2byte	0x264
 235 00ac B0000000 		.4byte	0xb0
 236 00b0 05       		.uleb128 0x5
 237 00b1 77000000 		.4byte	0x77
 238 00b5 04       		.uleb128 0x4
 239 00b6 22020000 		.4byte	.LASF16
 240 00ba 02       		.byte	0x2
 241 00bb 6502     		.2byte	0x265
 242 00bd C1000000 		.4byte	0xc1
 243 00c1 05       		.uleb128 0x5
 244 00c2 83000000 		.4byte	0x83
 245 00c6 02       		.uleb128 0x2
 246 00c7 04       		.byte	0x4
 247 00c8 07       		.byte	0x7
 248 00c9 74020000 		.4byte	.LASF17
 249 00cd 06       		.uleb128 0x6
 250 00ce 3A020000 		.4byte	.LASF18
 251 00d2 01       		.byte	0x1
 252 00d3 20       		.byte	0x20
 253 00d4 00000000 		.4byte	.LFB0
 254 00d8 1C000000 		.4byte	.LFE0-.LFB0
 255 00dc 01       		.uleb128 0x1
 256 00dd 9C       		.byte	0x9c
 257 00de 04010000 		.4byte	0x104
 258 00e2 07       		.uleb128 0x7
 259 00e3 7D020000 		.4byte	.LASF20
 260 00e7 01       		.byte	0x1
 261 00e8 22       		.byte	0x22
 262 00e9 6B000000 		.4byte	0x6b
 263 00ed 00000000 		.4byte	.LLST0
 264 00f1 08       		.uleb128 0x8
 265 00f2 06000000 		.4byte	.LVL0
 266 00f6 62010000 		.4byte	0x162
 267 00fa 08       		.uleb128 0x8
 268 00fb 16000000 		.4byte	.LVL1
 269 00ff 6D010000 		.4byte	0x16d
 270 0103 00       		.byte	0
ARM GAS  C:\Users\TIMCHE~1\AppData\Local\Temp\cczAnwbk.s 			page 13


 271 0104 06       		.uleb128 0x6
 272 0105 22000000 		.4byte	.LASF19
 273 0109 01       		.byte	0x1
 274 010a 3F       		.byte	0x3f
 275 010b 00000000 		.4byte	.LFB1
 276 010f 30000000 		.4byte	.LFE1-.LFB1
 277 0113 01       		.uleb128 0x1
 278 0114 9C       		.byte	0x9c
 279 0115 3B010000 		.4byte	0x13b
 280 0119 07       		.uleb128 0x7
 281 011a 7D020000 		.4byte	.LASF20
 282 011e 01       		.byte	0x1
 283 011f 41       		.byte	0x41
 284 0120 6B000000 		.4byte	0x6b
 285 0124 13000000 		.4byte	.LLST1
 286 0128 08       		.uleb128 0x8
 287 0129 06000000 		.4byte	.LVL2
 288 012d 62010000 		.4byte	0x162
 289 0131 08       		.uleb128 0x8
 290 0132 20000000 		.4byte	.LVL3
 291 0136 6D010000 		.4byte	0x16d
 292 013a 00       		.byte	0
 293 013b 09       		.uleb128 0x9
 294 013c 68000000 		.4byte	.LASF21
 295 0140 01       		.byte	0x1
 296 0141 9501     		.2byte	0x195
 297 0143 00000000 		.4byte	.LFB2
 298 0147 18000000 		.4byte	.LFE2-.LFB2
 299 014b 01       		.uleb128 0x1
 300 014c 9C       		.byte	0x9c
 301 014d 62010000 		.4byte	0x162
 302 0151 0A       		.uleb128 0xa
 303 0152 10020000 		.4byte	.LASF25
 304 0156 01       		.byte	0x1
 305 0157 9501     		.2byte	0x195
 306 0159 83000000 		.4byte	0x83
 307 015d 26000000 		.4byte	.LLST2
 308 0161 00       		.byte	0
 309 0162 0B       		.uleb128 0xb
 310 0163 51000000 		.4byte	.LASF26
 311 0167 03       		.byte	0x3
 312 0168 E5       		.byte	0xe5
 313 0169 6B000000 		.4byte	0x6b
 314 016d 0C       		.uleb128 0xc
 315 016e 47020000 		.4byte	.LASF27
 316 0172 03       		.byte	0x3
 317 0173 E6       		.byte	0xe6
 318 0174 0D       		.uleb128 0xd
 319 0175 6B000000 		.4byte	0x6b
 320 0179 00       		.byte	0
 321 017a 00       		.byte	0
 322              		.section	.debug_abbrev,"",%progbits
 323              	.Ldebug_abbrev0:
 324 0000 01       		.uleb128 0x1
 325 0001 11       		.uleb128 0x11
 326 0002 01       		.byte	0x1
 327 0003 25       		.uleb128 0x25
ARM GAS  C:\Users\TIMCHE~1\AppData\Local\Temp\cczAnwbk.s 			page 14


 328 0004 0E       		.uleb128 0xe
 329 0005 13       		.uleb128 0x13
 330 0006 0B       		.uleb128 0xb
 331 0007 03       		.uleb128 0x3
 332 0008 0E       		.uleb128 0xe
 333 0009 1B       		.uleb128 0x1b
 334 000a 0E       		.uleb128 0xe
 335 000b 55       		.uleb128 0x55
 336 000c 17       		.uleb128 0x17
 337 000d 11       		.uleb128 0x11
 338 000e 01       		.uleb128 0x1
 339 000f 10       		.uleb128 0x10
 340 0010 17       		.uleb128 0x17
 341 0011 00       		.byte	0
 342 0012 00       		.byte	0
 343 0013 02       		.uleb128 0x2
 344 0014 24       		.uleb128 0x24
 345 0015 00       		.byte	0
 346 0016 0B       		.uleb128 0xb
 347 0017 0B       		.uleb128 0xb
 348 0018 3E       		.uleb128 0x3e
 349 0019 0B       		.uleb128 0xb
 350 001a 03       		.uleb128 0x3
 351 001b 0E       		.uleb128 0xe
 352 001c 00       		.byte	0
 353 001d 00       		.byte	0
 354 001e 03       		.uleb128 0x3
 355 001f 24       		.uleb128 0x24
 356 0020 00       		.byte	0
 357 0021 0B       		.uleb128 0xb
 358 0022 0B       		.uleb128 0xb
 359 0023 3E       		.uleb128 0x3e
 360 0024 0B       		.uleb128 0xb
 361 0025 03       		.uleb128 0x3
 362 0026 08       		.uleb128 0x8
 363 0027 00       		.byte	0
 364 0028 00       		.byte	0
 365 0029 04       		.uleb128 0x4
 366 002a 16       		.uleb128 0x16
 367 002b 00       		.byte	0
 368 002c 03       		.uleb128 0x3
 369 002d 0E       		.uleb128 0xe
 370 002e 3A       		.uleb128 0x3a
 371 002f 0B       		.uleb128 0xb
 372 0030 3B       		.uleb128 0x3b
 373 0031 05       		.uleb128 0x5
 374 0032 49       		.uleb128 0x49
 375 0033 13       		.uleb128 0x13
 376 0034 00       		.byte	0
 377 0035 00       		.byte	0
 378 0036 05       		.uleb128 0x5
 379 0037 35       		.uleb128 0x35
 380 0038 00       		.byte	0
 381 0039 49       		.uleb128 0x49
 382 003a 13       		.uleb128 0x13
 383 003b 00       		.byte	0
 384 003c 00       		.byte	0
ARM GAS  C:\Users\TIMCHE~1\AppData\Local\Temp\cczAnwbk.s 			page 15


 385 003d 06       		.uleb128 0x6
 386 003e 2E       		.uleb128 0x2e
 387 003f 01       		.byte	0x1
 388 0040 3F       		.uleb128 0x3f
 389 0041 19       		.uleb128 0x19
 390 0042 03       		.uleb128 0x3
 391 0043 0E       		.uleb128 0xe
 392 0044 3A       		.uleb128 0x3a
 393 0045 0B       		.uleb128 0xb
 394 0046 3B       		.uleb128 0x3b
 395 0047 0B       		.uleb128 0xb
 396 0048 27       		.uleb128 0x27
 397 0049 19       		.uleb128 0x19
 398 004a 11       		.uleb128 0x11
 399 004b 01       		.uleb128 0x1
 400 004c 12       		.uleb128 0x12
 401 004d 06       		.uleb128 0x6
 402 004e 40       		.uleb128 0x40
 403 004f 18       		.uleb128 0x18
 404 0050 9742     		.uleb128 0x2117
 405 0052 19       		.uleb128 0x19
 406 0053 01       		.uleb128 0x1
 407 0054 13       		.uleb128 0x13
 408 0055 00       		.byte	0
 409 0056 00       		.byte	0
 410 0057 07       		.uleb128 0x7
 411 0058 34       		.uleb128 0x34
 412 0059 00       		.byte	0
 413 005a 03       		.uleb128 0x3
 414 005b 0E       		.uleb128 0xe
 415 005c 3A       		.uleb128 0x3a
 416 005d 0B       		.uleb128 0xb
 417 005e 3B       		.uleb128 0x3b
 418 005f 0B       		.uleb128 0xb
 419 0060 49       		.uleb128 0x49
 420 0061 13       		.uleb128 0x13
 421 0062 02       		.uleb128 0x2
 422 0063 17       		.uleb128 0x17
 423 0064 00       		.byte	0
 424 0065 00       		.byte	0
 425 0066 08       		.uleb128 0x8
 426 0067 898201   		.uleb128 0x4109
 427 006a 00       		.byte	0
 428 006b 11       		.uleb128 0x11
 429 006c 01       		.uleb128 0x1
 430 006d 31       		.uleb128 0x31
 431 006e 13       		.uleb128 0x13
 432 006f 00       		.byte	0
 433 0070 00       		.byte	0
 434 0071 09       		.uleb128 0x9
 435 0072 2E       		.uleb128 0x2e
 436 0073 01       		.byte	0x1
 437 0074 3F       		.uleb128 0x3f
 438 0075 19       		.uleb128 0x19
 439 0076 03       		.uleb128 0x3
 440 0077 0E       		.uleb128 0xe
 441 0078 3A       		.uleb128 0x3a
ARM GAS  C:\Users\TIMCHE~1\AppData\Local\Temp\cczAnwbk.s 			page 16


 442 0079 0B       		.uleb128 0xb
 443 007a 3B       		.uleb128 0x3b
 444 007b 05       		.uleb128 0x5
 445 007c 27       		.uleb128 0x27
 446 007d 19       		.uleb128 0x19
 447 007e 11       		.uleb128 0x11
 448 007f 01       		.uleb128 0x1
 449 0080 12       		.uleb128 0x12
 450 0081 06       		.uleb128 0x6
 451 0082 40       		.uleb128 0x40
 452 0083 18       		.uleb128 0x18
 453 0084 9742     		.uleb128 0x2117
 454 0086 19       		.uleb128 0x19
 455 0087 01       		.uleb128 0x1
 456 0088 13       		.uleb128 0x13
 457 0089 00       		.byte	0
 458 008a 00       		.byte	0
 459 008b 0A       		.uleb128 0xa
 460 008c 05       		.uleb128 0x5
 461 008d 00       		.byte	0
 462 008e 03       		.uleb128 0x3
 463 008f 0E       		.uleb128 0xe
 464 0090 3A       		.uleb128 0x3a
 465 0091 0B       		.uleb128 0xb
 466 0092 3B       		.uleb128 0x3b
 467 0093 05       		.uleb128 0x5
 468 0094 49       		.uleb128 0x49
 469 0095 13       		.uleb128 0x13
 470 0096 02       		.uleb128 0x2
 471 0097 17       		.uleb128 0x17
 472 0098 00       		.byte	0
 473 0099 00       		.byte	0
 474 009a 0B       		.uleb128 0xb
 475 009b 2E       		.uleb128 0x2e
 476 009c 00       		.byte	0
 477 009d 3F       		.uleb128 0x3f
 478 009e 19       		.uleb128 0x19
 479 009f 03       		.uleb128 0x3
 480 00a0 0E       		.uleb128 0xe
 481 00a1 3A       		.uleb128 0x3a
 482 00a2 0B       		.uleb128 0xb
 483 00a3 3B       		.uleb128 0x3b
 484 00a4 0B       		.uleb128 0xb
 485 00a5 27       		.uleb128 0x27
 486 00a6 19       		.uleb128 0x19
 487 00a7 49       		.uleb128 0x49
 488 00a8 13       		.uleb128 0x13
 489 00a9 3C       		.uleb128 0x3c
 490 00aa 19       		.uleb128 0x19
 491 00ab 00       		.byte	0
 492 00ac 00       		.byte	0
 493 00ad 0C       		.uleb128 0xc
 494 00ae 2E       		.uleb128 0x2e
 495 00af 01       		.byte	0x1
 496 00b0 3F       		.uleb128 0x3f
 497 00b1 19       		.uleb128 0x19
 498 00b2 03       		.uleb128 0x3
ARM GAS  C:\Users\TIMCHE~1\AppData\Local\Temp\cczAnwbk.s 			page 17


 499 00b3 0E       		.uleb128 0xe
 500 00b4 3A       		.uleb128 0x3a
 501 00b5 0B       		.uleb128 0xb
 502 00b6 3B       		.uleb128 0x3b
 503 00b7 0B       		.uleb128 0xb
 504 00b8 27       		.uleb128 0x27
 505 00b9 19       		.uleb128 0x19
 506 00ba 3C       		.uleb128 0x3c
 507 00bb 19       		.uleb128 0x19
 508 00bc 00       		.byte	0
 509 00bd 00       		.byte	0
 510 00be 0D       		.uleb128 0xd
 511 00bf 05       		.uleb128 0x5
 512 00c0 00       		.byte	0
 513 00c1 49       		.uleb128 0x49
 514 00c2 13       		.uleb128 0x13
 515 00c3 00       		.byte	0
 516 00c4 00       		.byte	0
 517 00c5 00       		.byte	0
 518              		.section	.debug_loc,"",%progbits
 519              	.Ldebug_loc0:
 520              	.LLST0:
 521 0000 06000000 		.4byte	.LVL0
 522 0004 15000000 		.4byte	.LVL1-1
 523 0008 0100     		.2byte	0x1
 524 000a 50       		.byte	0x50
 525 000b 00000000 		.4byte	0
 526 000f 00000000 		.4byte	0
 527              	.LLST1:
 528 0013 06000000 		.4byte	.LVL2
 529 0017 1F000000 		.4byte	.LVL3-1
 530 001b 0100     		.2byte	0x1
 531 001d 50       		.byte	0x50
 532 001e 00000000 		.4byte	0
 533 0022 00000000 		.4byte	0
 534              	.LLST2:
 535 0026 00000000 		.4byte	.LVL4
 536 002a 04000000 		.4byte	.LVL5
 537 002e 0100     		.2byte	0x1
 538 0030 50       		.byte	0x50
 539 0031 04000000 		.4byte	.LVL5
 540 0035 18000000 		.4byte	.LFE2
 541 0039 0400     		.2byte	0x4
 542 003b F3       		.byte	0xf3
 543 003c 01       		.uleb128 0x1
 544 003d 50       		.byte	0x50
 545 003e 9F       		.byte	0x9f
 546 003f 00000000 		.4byte	0
 547 0043 00000000 		.4byte	0
 548              		.section	.debug_aranges,"",%progbits
 549 0000 2C000000 		.4byte	0x2c
 550 0004 0200     		.2byte	0x2
 551 0006 00000000 		.4byte	.Ldebug_info0
 552 000a 04       		.byte	0x4
 553 000b 00       		.byte	0
 554 000c 0000     		.2byte	0
 555 000e 0000     		.2byte	0
ARM GAS  C:\Users\TIMCHE~1\AppData\Local\Temp\cczAnwbk.s 			page 18


 556 0010 00000000 		.4byte	.LFB0
 557 0014 1C000000 		.4byte	.LFE0-.LFB0
 558 0018 00000000 		.4byte	.LFB1
 559 001c 30000000 		.4byte	.LFE1-.LFB1
 560 0020 00000000 		.4byte	.LFB2
 561 0024 18000000 		.4byte	.LFE2-.LFB2
 562 0028 00000000 		.4byte	0
 563 002c 00000000 		.4byte	0
 564              		.section	.debug_ranges,"",%progbits
 565              	.Ldebug_ranges0:
 566 0000 00000000 		.4byte	.LFB0
 567 0004 1C000000 		.4byte	.LFE0
 568 0008 00000000 		.4byte	.LFB1
 569 000c 30000000 		.4byte	.LFE1
 570 0010 00000000 		.4byte	.LFB2
 571 0014 18000000 		.4byte	.LFE2
 572 0018 00000000 		.4byte	0
 573 001c 00000000 		.4byte	0
 574              		.section	.debug_line,"",%progbits
 575              	.Ldebug_line0:
 576 0000 99000000 		.section	.debug_str,"MS",%progbits,1
 576      02004C00 
 576      00000201 
 576      FB0E0D00 
 576      01010101 
 577              	.LASF6:
 578 0000 6C6F6E67 		.ascii	"long long int\000"
 578      206C6F6E 
 578      6720696E 
 578      7400
 579              	.LASF11:
 580 000e 75696E74 		.ascii	"uint32\000"
 580      333200
 581              	.LASF8:
 582 0015 756E7369 		.ascii	"unsigned int\000"
 582      676E6564 
 582      20696E74 
 582      00
 583              	.LASF19:
 584 0022 43795379 		.ascii	"CySysPmDeepSleep\000"
 584      73506D44 
 584      65657053 
 584      6C656570 
 584      00
 585              	.LASF23:
 586 0033 47656E65 		.ascii	"Generated_Source\\PSoC4\\cyPm.c\000"
 586      72617465 
 586      645F536F 
 586      75726365 
 586      5C50536F 
 587              	.LASF26:
 588 0051 4379456E 		.ascii	"CyEnterCriticalSection\000"
 588      74657243 
 588      72697469 
 588      63616C53 
 588      65637469 
 589              	.LASF21:
ARM GAS  C:\Users\TIMCHE~1\AppData\Local\Temp\cczAnwbk.s 			page 19


 590 0068 43795379 		.ascii	"CySysPmSetWakeupHoldoff\000"
 590      73506D53 
 590      65745761 
 590      6B657570 
 590      486F6C64 
 591              	.LASF22:
 592 0080 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 592      4320342E 
 592      392E3320 
 592      32303135 
 592      30333033 
 593 00b3 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m0 -mthumb -g -O"
 593      20726576 
 593      6973696F 
 593      6E203232 
 593      31323230 
 594 00e6 73202D66 		.ascii	"s -ffunction-sections -ffat-lto-objects\000"
 594      66756E63 
 594      74696F6E 
 594      2D736563 
 594      74696F6E 
 595              	.LASF5:
 596 010e 6C6F6E67 		.ascii	"long unsigned int\000"
 596      20756E73 
 596      69676E65 
 596      6420696E 
 596      7400
 597              	.LASF7:
 598 0120 6C6F6E67 		.ascii	"long long unsigned int\000"
 598      206C6F6E 
 598      6720756E 
 598      7369676E 
 598      65642069 
 599              	.LASF3:
 600 0137 73686F72 		.ascii	"short unsigned int\000"
 600      7420756E 
 600      7369676E 
 600      65642069 
 600      6E7400
 601              	.LASF24:
 602 014a 433A5C55 		.ascii	"C:\\Users\\Tim Chen\\Desktop\\Test proximity auto t"
 602      73657273 
 602      5C54696D 
 602      20436865 
 602      6E5C4465 
 603 0179 756E696E 		.ascii	"uning\\MH-8W_Proximity_Board_V9_20170619\\MH-8W_PRO"
 603      675C4D48 
 603      2D38575F 
 603      50726F78 
 603      696D6974 
 604 01aa 58494D49 		.ascii	"XIMITY.cydsn\\Bootloader_V01\\Bootloader_PSoC4_Exam"
 604      54592E63 
 604      7964736E 
 604      5C426F6F 
 604      746C6F61 
 605 01db 706C6530 		.ascii	"ple01.cydsn\000"
 605      312E6379 
ARM GAS  C:\Users\TIMCHE~1\AppData\Local\Temp\cczAnwbk.s 			page 20


 605      64736E00 
 606              	.LASF1:
 607 01e7 756E7369 		.ascii	"unsigned char\000"
 607      676E6564 
 607      20636861 
 607      7200
 608              	.LASF14:
 609 01f5 63686172 		.ascii	"char\000"
 609      00
 610              	.LASF4:
 611 01fa 6C6F6E67 		.ascii	"long int\000"
 611      20696E74 
 611      00
 612              	.LASF15:
 613 0203 72656731 		.ascii	"reg16\000"
 613      3600
 614              	.LASF13:
 615 0209 646F7562 		.ascii	"double\000"
 615      6C6500
 616              	.LASF25:
 617 0210 6866636C 		.ascii	"hfclkFrequencyMhz\000"
 617      6B467265 
 617      7175656E 
 617      63794D68 
 617      7A00
 618              	.LASF16:
 619 0222 72656733 		.ascii	"reg32\000"
 619      3200
 620              	.LASF9:
 621 0228 75696E74 		.ascii	"uint8\000"
 621      3800
 622              	.LASF0:
 623 022e 7369676E 		.ascii	"signed char\000"
 623      65642063 
 623      68617200 
 624              	.LASF18:
 625 023a 43795379 		.ascii	"CySysPmSleep\000"
 625      73506D53 
 625      6C656570 
 625      00
 626              	.LASF27:
 627 0247 43794578 		.ascii	"CyExitCriticalSection\000"
 627      69744372 
 627      69746963 
 627      616C5365 
 627      6374696F 
 628              	.LASF12:
 629 025d 666C6F61 		.ascii	"float\000"
 629      7400
 630              	.LASF2:
 631 0263 73686F72 		.ascii	"short int\000"
 631      7420696E 
 631      7400
 632              	.LASF10:
 633 026d 75696E74 		.ascii	"uint16\000"
 633      313600
 634              	.LASF17:
ARM GAS  C:\Users\TIMCHE~1\AppData\Local\Temp\cczAnwbk.s 			page 21


 635 0274 73697A65 		.ascii	"sizetype\000"
 635      74797065 
 635      00
 636              	.LASF20:
 637 027d 696E7465 		.ascii	"interruptState\000"
 637      72727570 
 637      74537461 
 637      746500
 638              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
